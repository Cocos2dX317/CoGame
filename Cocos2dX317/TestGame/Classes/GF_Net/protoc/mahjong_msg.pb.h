// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong_msg.proto

#ifndef PROTOBUF_mahjong_5fmsg_2eproto__INCLUDED
#define PROTOBUF_mahjong_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mahjong_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

class loginRequest;
class loginResponse;
class logoutRequest;
class logoutMsg;
class getonlineRequest;
class getonlineResponse;
class xuanqueRequest;
class xuanqueResponse;
class huanpaiRequest;
class huanpaiResponse;
class canclerobotRequest;
class canclerobotResponse;
class notifyreadyMsg;
class alertMsg;
class readyRequest;
class goreadyMsg;
class notifygamestartMsg;
class broadmoneyMsg;
class replaceflowerMsg;
class notifyhuanpaiMsg;
class notifyxuanqueMsg;
class notifyxqresultMsg;
class notifyxqresultMsg_XQResult;
class notifyhpresultMsg;
class loginMsg;
class dealcardRequest;
class dealcardResponse;
class selfdealMsg;
class selfdealMsg_EatCard;
class notifynextdealMsg;
class dealcardMsg;
class dealcardMsg_DealEnds;
class dealcardMsg_GangCard;
class gameendMsg;
class gameendMsg_PlayInfo;
class gameendMsg_FanInfo;
class chatRequest;
class giveupMsg;
class chatMsg;
class normalexpresionRequest;
class normalexpresionMsg;
class expresionRequest;
class expresionMsg;
class tableinfoMsg;
class tableinfoMsg_TblPlayInfo;
class tableinfoMsg_TblPlayInfo_EatCard;
class tableinfoMsg_TblPlayInfo_GangCard;

// ===================================================================

class loginRequest : public ::google::protobuf::Message {
 public:
  loginRequest();
  virtual ~loginRequest();

  loginRequest(const loginRequest& from);

  inline loginRequest& operator=(const loginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const loginRequest& default_instance();

  void Swap(loginRequest* other);

  // implements Message ----------------------------------------------

  loginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const loginRequest& from);
  void MergeFrom(const loginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string skey = 1;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 1;
  inline const ::std::string& skey() const;
  inline void set_skey(const ::std::string& value);
  inline void set_skey(const char* value);
  inline void set_skey(const char* value, size_t size);
  inline ::std::string* mutable_skey();
  inline ::std::string* release_skey();
  inline void set_allocated_skey(::std::string* skey);

  // required string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional int32 base_money = 3;
  inline bool has_base_money() const;
  inline void clear_base_money();
  static const int kBaseMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 base_money() const;
  inline void set_base_money(::google::protobuf::int32 value);

  // optional int32 min_money = 4;
  inline bool has_min_money() const;
  inline void clear_min_money();
  static const int kMinMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 min_money() const;
  inline void set_min_money(::google::protobuf::int32 value);

  // optional int32 room_id = 5;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 5;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.loginRequest)
 private:
  inline void set_has_skey();
  inline void clear_has_skey();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_base_money();
  inline void clear_has_base_money();
  inline void set_has_min_money();
  inline void clear_has_min_money();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* skey_;
  ::std::string* version_;
  ::google::protobuf::int32 base_money_;
  ::google::protobuf::int32 min_money_;
  ::google::protobuf::int32 room_id_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static loginRequest* default_instance_;
};
// -------------------------------------------------------------------

class loginResponse : public ::google::protobuf::Message {
 public:
  loginResponse();
  virtual ~loginResponse();

  loginResponse(const loginResponse& from);

  inline loginResponse& operator=(const loginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const loginResponse& default_instance();

  void Swap(loginResponse* other);

  // implements Message ----------------------------------------------

  loginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const loginResponse& from);
  void MergeFrom(const loginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.loginResponse)
 private:
  inline void set_has_vid();
  inline void clear_has_vid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 vid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static loginResponse* default_instance_;
};
// -------------------------------------------------------------------

class logoutRequest : public ::google::protobuf::Message {
 public:
  logoutRequest();
  virtual ~logoutRequest();

  logoutRequest(const logoutRequest& from);

  inline logoutRequest& operator=(const logoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logoutRequest& default_instance();

  void Swap(logoutRequest* other);

  // implements Message ----------------------------------------------

  logoutRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logoutRequest& from);
  void MergeFrom(const logoutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.logoutRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static logoutRequest* default_instance_;
};
// -------------------------------------------------------------------

class logoutMsg : public ::google::protobuf::Message {
 public:
  logoutMsg();
  virtual ~logoutMsg();

  logoutMsg(const logoutMsg& from);

  inline logoutMsg& operator=(const logoutMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logoutMsg& default_instance();

  void Swap(logoutMsg* other);

  // implements Message ----------------------------------------------

  logoutMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const logoutMsg& from);
  void MergeFrom(const logoutMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 logout_type = 3;
  inline bool has_logout_type() const;
  inline void clear_logout_type();
  static const int kLogoutTypeFieldNumber = 3;
  inline ::google::protobuf::int32 logout_type() const;
  inline void set_logout_type(::google::protobuf::int32 value);

  // required string alertStr = 4;
  inline bool has_alertstr() const;
  inline void clear_alertstr();
  static const int kAlertStrFieldNumber = 4;
  inline const ::std::string& alertstr() const;
  inline void set_alertstr(const ::std::string& value);
  inline void set_alertstr(const char* value);
  inline void set_alertstr(const char* value, size_t size);
  inline ::std::string* mutable_alertstr();
  inline ::std::string* release_alertstr();
  inline void set_allocated_alertstr(::std::string* alertstr);

  // @@protoc_insertion_point(class_scope:mahjong_msg.logoutMsg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_logout_type();
  inline void clear_has_logout_type();
  inline void set_has_alertstr();
  inline void clear_has_alertstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::std::string* alertstr_;
  ::google::protobuf::int32 logout_type_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static logoutMsg* default_instance_;
};
// -------------------------------------------------------------------

class getonlineRequest : public ::google::protobuf::Message {
 public:
  getonlineRequest();
  virtual ~getonlineRequest();

  getonlineRequest(const getonlineRequest& from);

  inline getonlineRequest& operator=(const getonlineRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getonlineRequest& default_instance();

  void Swap(getonlineRequest* other);

  // implements Message ----------------------------------------------

  getonlineRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getonlineRequest& from);
  void MergeFrom(const getonlineRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.getonlineRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static getonlineRequest* default_instance_;
};
// -------------------------------------------------------------------

class getonlineResponse : public ::google::protobuf::Message {
 public:
  getonlineResponse();
  virtual ~getonlineResponse();

  getonlineResponse(const getonlineResponse& from);

  inline getonlineResponse& operator=(const getonlineResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getonlineResponse& default_instance();

  void Swap(getonlineResponse* other);

  // implements Message ----------------------------------------------

  getonlineResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getonlineResponse& from);
  void MergeFrom(const getonlineResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 online = 1;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 1;
  inline ::google::protobuf::uint32 online() const;
  inline void set_online(::google::protobuf::uint32 value);

  // required uint32 activecount = 2;
  inline bool has_activecount() const;
  inline void clear_activecount();
  static const int kActivecountFieldNumber = 2;
  inline ::google::protobuf::uint32 activecount() const;
  inline void set_activecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.getonlineResponse)
 private:
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_activecount();
  inline void clear_has_activecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 online_;
  ::google::protobuf::uint32 activecount_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static getonlineResponse* default_instance_;
};
// -------------------------------------------------------------------

class xuanqueRequest : public ::google::protobuf::Message {
 public:
  xuanqueRequest();
  virtual ~xuanqueRequest();

  xuanqueRequest(const xuanqueRequest& from);

  inline xuanqueRequest& operator=(const xuanqueRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const xuanqueRequest& default_instance();

  void Swap(xuanqueRequest* other);

  // implements Message ----------------------------------------------

  xuanqueRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const xuanqueRequest& from);
  void MergeFrom(const xuanqueRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 quetype = 1;
  inline bool has_quetype() const;
  inline void clear_quetype();
  static const int kQuetypeFieldNumber = 1;
  inline ::google::protobuf::int32 quetype() const;
  inline void set_quetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.xuanqueRequest)
 private:
  inline void set_has_quetype();
  inline void clear_has_quetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 quetype_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static xuanqueRequest* default_instance_;
};
// -------------------------------------------------------------------

class xuanqueResponse : public ::google::protobuf::Message {
 public:
  xuanqueResponse();
  virtual ~xuanqueResponse();

  xuanqueResponse(const xuanqueResponse& from);

  inline xuanqueResponse& operator=(const xuanqueResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const xuanqueResponse& default_instance();

  void Swap(xuanqueResponse* other);

  // implements Message ----------------------------------------------

  xuanqueResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const xuanqueResponse& from);
  void MergeFrom(const xuanqueResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.xuanqueResponse)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static xuanqueResponse* default_instance_;
};
// -------------------------------------------------------------------

class huanpaiRequest : public ::google::protobuf::Message {
 public:
  huanpaiRequest();
  virtual ~huanpaiRequest();

  huanpaiRequest(const huanpaiRequest& from);

  inline huanpaiRequest& operator=(const huanpaiRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const huanpaiRequest& default_instance();

  void Swap(huanpaiRequest* other);

  // implements Message ----------------------------------------------

  huanpaiRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const huanpaiRequest& from);
  void MergeFrom(const huanpaiRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card_value = 1;
  inline int card_value_size() const;
  inline void clear_card_value();
  static const int kCardValueFieldNumber = 1;
  inline ::google::protobuf::int32 card_value(int index) const;
  inline void set_card_value(int index, ::google::protobuf::int32 value);
  inline void add_card_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card_value();

  // repeated int32 card_index = 2;
  inline int card_index_size() const;
  inline void clear_card_index();
  static const int kCardIndexFieldNumber = 2;
  inline ::google::protobuf::int32 card_index(int index) const;
  inline void set_card_index(int index, ::google::protobuf::int32 value);
  inline void add_card_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card_index();

  // @@protoc_insertion_point(class_scope:mahjong_msg.huanpaiRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_index_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static huanpaiRequest* default_instance_;
};
// -------------------------------------------------------------------

class huanpaiResponse : public ::google::protobuf::Message {
 public:
  huanpaiResponse();
  virtual ~huanpaiResponse();

  huanpaiResponse(const huanpaiResponse& from);

  inline huanpaiResponse& operator=(const huanpaiResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const huanpaiResponse& default_instance();

  void Swap(huanpaiResponse* other);

  // implements Message ----------------------------------------------

  huanpaiResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const huanpaiResponse& from);
  void MergeFrom(const huanpaiResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.huanpaiResponse)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static huanpaiResponse* default_instance_;
};
// -------------------------------------------------------------------

class canclerobotRequest : public ::google::protobuf::Message {
 public:
  canclerobotRequest();
  virtual ~canclerobotRequest();

  canclerobotRequest(const canclerobotRequest& from);

  inline canclerobotRequest& operator=(const canclerobotRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const canclerobotRequest& default_instance();

  void Swap(canclerobotRequest* other);

  // implements Message ----------------------------------------------

  canclerobotRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const canclerobotRequest& from);
  void MergeFrom(const canclerobotRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.canclerobotRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static canclerobotRequest* default_instance_;
};
// -------------------------------------------------------------------

class canclerobotResponse : public ::google::protobuf::Message {
 public:
  canclerobotResponse();
  virtual ~canclerobotResponse();

  canclerobotResponse(const canclerobotResponse& from);

  inline canclerobotResponse& operator=(const canclerobotResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const canclerobotResponse& default_instance();

  void Swap(canclerobotResponse* other);

  // implements Message ----------------------------------------------

  canclerobotResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const canclerobotResponse& from);
  void MergeFrom(const canclerobotResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.canclerobotResponse)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static canclerobotResponse* default_instance_;
};
// -------------------------------------------------------------------

class notifyreadyMsg : public ::google::protobuf::Message {
 public:
  notifyreadyMsg();
  virtual ~notifyreadyMsg();

  notifyreadyMsg(const notifyreadyMsg& from);

  inline notifyreadyMsg& operator=(const notifyreadyMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifyreadyMsg& default_instance();

  void Swap(notifyreadyMsg* other);

  // implements Message ----------------------------------------------

  notifyreadyMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifyreadyMsg& from);
  void MergeFrom(const notifyreadyMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cd = 1;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 1;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // required int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifyreadyMsg)
 private:
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifyreadyMsg* default_instance_;
};
// -------------------------------------------------------------------

class alertMsg : public ::google::protobuf::Message {
 public:
  alertMsg();
  virtual ~alertMsg();

  alertMsg(const alertMsg& from);

  inline alertMsg& operator=(const alertMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const alertMsg& default_instance();

  void Swap(alertMsg* other);

  // implements Message ----------------------------------------------

  alertMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const alertMsg& from);
  void MergeFrom(const alertMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string alertStr = 1;
  inline bool has_alertstr() const;
  inline void clear_alertstr();
  static const int kAlertStrFieldNumber = 1;
  inline const ::std::string& alertstr() const;
  inline void set_alertstr(const ::std::string& value);
  inline void set_alertstr(const char* value);
  inline void set_alertstr(const char* value, size_t size);
  inline ::std::string* mutable_alertstr();
  inline ::std::string* release_alertstr();
  inline void set_allocated_alertstr(::std::string* alertstr);

  // @@protoc_insertion_point(class_scope:mahjong_msg.alertMsg)
 private:
  inline void set_has_alertstr();
  inline void clear_has_alertstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* alertstr_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static alertMsg* default_instance_;
};
// -------------------------------------------------------------------

class readyRequest : public ::google::protobuf::Message {
 public:
  readyRequest();
  virtual ~readyRequest();

  readyRequest(const readyRequest& from);

  inline readyRequest& operator=(const readyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const readyRequest& default_instance();

  void Swap(readyRequest* other);

  // implements Message ----------------------------------------------

  readyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const readyRequest& from);
  void MergeFrom(const readyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.readyRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static readyRequest* default_instance_;
};
// -------------------------------------------------------------------

class goreadyMsg : public ::google::protobuf::Message {
 public:
  goreadyMsg();
  virtual ~goreadyMsg();

  goreadyMsg(const goreadyMsg& from);

  inline goreadyMsg& operator=(const goreadyMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const goreadyMsg& default_instance();

  void Swap(goreadyMsg* other);

  // implements Message ----------------------------------------------

  goreadyMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const goreadyMsg& from);
  void MergeFrom(const goreadyMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.goreadyMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static goreadyMsg* default_instance_;
};
// -------------------------------------------------------------------

class notifygamestartMsg : public ::google::protobuf::Message {
 public:
  notifygamestartMsg();
  virtual ~notifygamestartMsg();

  notifygamestartMsg(const notifygamestartMsg& from);

  inline notifygamestartMsg& operator=(const notifygamestartMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifygamestartMsg& default_instance();

  void Swap(notifygamestartMsg* other);

  // implements Message ----------------------------------------------

  notifygamestartMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifygamestartMsg& from);
  void MergeFrom(const notifygamestartMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 bseatid = 2;
  inline bool has_bseatid() const;
  inline void clear_bseatid();
  static const int kBseatidFieldNumber = 2;
  inline ::google::protobuf::int32 bseatid() const;
  inline void set_bseatid(::google::protobuf::int32 value);

  // required uint32 buid = 3;
  inline bool has_buid() const;
  inline void clear_buid();
  static const int kBuidFieldNumber = 3;
  inline ::google::protobuf::uint32 buid() const;
  inline void set_buid(::google::protobuf::uint32 value);

  // required int32 p1_num = 4;
  inline bool has_p1_num() const;
  inline void clear_p1_num();
  static const int kP1NumFieldNumber = 4;
  inline ::google::protobuf::int32 p1_num() const;
  inline void set_p1_num(::google::protobuf::int32 value);

  // required int32 p2_num = 5;
  inline bool has_p2_num() const;
  inline void clear_p2_num();
  static const int kP2NumFieldNumber = 5;
  inline ::google::protobuf::int32 p2_num() const;
  inline void set_p2_num(::google::protobuf::int32 value);

  // repeated int32 cards = 6;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 6;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 train_money = 7;
  inline bool has_train_money() const;
  inline void clear_train_money();
  static const int kTrainMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 train_money() const;
  inline void set_train_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifygamestartMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_bseatid();
  inline void clear_has_bseatid();
  inline void set_has_buid();
  inline void clear_has_buid();
  inline void set_has_p1_num();
  inline void clear_has_p1_num();
  inline void set_has_p2_num();
  inline void clear_has_p2_num();
  inline void set_has_train_money();
  inline void clear_has_train_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 bseatid_;
  ::google::protobuf::uint32 buid_;
  ::google::protobuf::int32 p1_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 p2_num_;
  ::google::protobuf::int32 train_money_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifygamestartMsg* default_instance_;
};
// -------------------------------------------------------------------

class broadmoneyMsg : public ::google::protobuf::Message {
 public:
  broadmoneyMsg();
  virtual ~broadmoneyMsg();

  broadmoneyMsg(const broadmoneyMsg& from);

  inline broadmoneyMsg& operator=(const broadmoneyMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadmoneyMsg& default_instance();

  void Swap(broadmoneyMsg* other);

  // implements Message ----------------------------------------------

  broadmoneyMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const broadmoneyMsg& from);
  void MergeFrom(const broadmoneyMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 players_money = 1;
  inline int players_money_size() const;
  inline void clear_players_money();
  static const int kPlayersMoneyFieldNumber = 1;
  inline ::google::protobuf::int32 players_money(int index) const;
  inline void set_players_money(int index, ::google::protobuf::int32 value);
  inline void add_players_money(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      players_money() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_players_money();

  // @@protoc_insertion_point(class_scope:mahjong_msg.broadmoneyMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > players_money_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static broadmoneyMsg* default_instance_;
};
// -------------------------------------------------------------------

class replaceflowerMsg : public ::google::protobuf::Message {
 public:
  replaceflowerMsg();
  virtual ~replaceflowerMsg();

  replaceflowerMsg(const replaceflowerMsg& from);

  inline replaceflowerMsg& operator=(const replaceflowerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const replaceflowerMsg& default_instance();

  void Swap(replaceflowerMsg* other);

  // implements Message ----------------------------------------------

  replaceflowerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const replaceflowerMsg& from);
  void MergeFrom(const replaceflowerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // repeated int32 take_cards = 2;
  inline int take_cards_size() const;
  inline void clear_take_cards();
  static const int kTakeCardsFieldNumber = 2;
  inline ::google::protobuf::int32 take_cards(int index) const;
  inline void set_take_cards(int index, ::google::protobuf::int32 value);
  inline void add_take_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      take_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_take_cards();

  // repeated int32 flower_cards = 3;
  inline int flower_cards_size() const;
  inline void clear_flower_cards();
  static const int kFlowerCardsFieldNumber = 3;
  inline ::google::protobuf::int32 flower_cards(int index) const;
  inline void set_flower_cards(int index, ::google::protobuf::int32 value);
  inline void add_flower_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      flower_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_flower_cards();

  // optional int32 start_game = 4;
  inline bool has_start_game() const;
  inline void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  inline ::google::protobuf::int32 start_game() const;
  inline void set_start_game(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.replaceflowerMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_start_game();
  inline void clear_has_start_game();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > take_cards_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 start_game_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > flower_cards_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static replaceflowerMsg* default_instance_;
};
// -------------------------------------------------------------------

class notifyhuanpaiMsg : public ::google::protobuf::Message {
 public:
  notifyhuanpaiMsg();
  virtual ~notifyhuanpaiMsg();

  notifyhuanpaiMsg(const notifyhuanpaiMsg& from);

  inline notifyhuanpaiMsg& operator=(const notifyhuanpaiMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifyhuanpaiMsg& default_instance();

  void Swap(notifyhuanpaiMsg* other);

  // implements Message ----------------------------------------------

  notifyhuanpaiMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifyhuanpaiMsg& from);
  void MergeFrom(const notifyhuanpaiMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required int32 cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // repeated int32 hpinfos = 4;
  inline int hpinfos_size() const;
  inline void clear_hpinfos();
  static const int kHpinfosFieldNumber = 4;
  inline ::google::protobuf::int32 hpinfos(int index) const;
  inline void set_hpinfos(int index, ::google::protobuf::int32 value);
  inline void add_hpinfos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hpinfos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hpinfos();

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifyhuanpaiMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hpinfos_;
  ::google::protobuf::int32 cd_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifyhuanpaiMsg* default_instance_;
};
// -------------------------------------------------------------------

class notifyxuanqueMsg : public ::google::protobuf::Message {
 public:
  notifyxuanqueMsg();
  virtual ~notifyxuanqueMsg();

  notifyxuanqueMsg(const notifyxuanqueMsg& from);

  inline notifyxuanqueMsg& operator=(const notifyxuanqueMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifyxuanqueMsg& default_instance();

  void Swap(notifyxuanqueMsg* other);

  // implements Message ----------------------------------------------

  notifyxuanqueMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifyxuanqueMsg& from);
  void MergeFrom(const notifyxuanqueMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required int32 cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // required int32 quetype = 4;
  inline bool has_quetype() const;
  inline void clear_quetype();
  static const int kQuetypeFieldNumber = 4;
  inline ::google::protobuf::int32 quetype() const;
  inline void set_quetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifyxuanqueMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_quetype();
  inline void clear_has_quetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 quetype_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifyxuanqueMsg* default_instance_;
};
// -------------------------------------------------------------------

class notifyxqresultMsg_XQResult : public ::google::protobuf::Message {
 public:
  notifyxqresultMsg_XQResult();
  virtual ~notifyxqresultMsg_XQResult();

  notifyxqresultMsg_XQResult(const notifyxqresultMsg_XQResult& from);

  inline notifyxqresultMsg_XQResult& operator=(const notifyxqresultMsg_XQResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifyxqresultMsg_XQResult& default_instance();

  void Swap(notifyxqresultMsg_XQResult* other);

  // implements Message ----------------------------------------------

  notifyxqresultMsg_XQResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifyxqresultMsg_XQResult& from);
  void MergeFrom(const notifyxqresultMsg_XQResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 quetype = 3;
  inline bool has_quetype() const;
  inline void clear_quetype();
  static const int kQuetypeFieldNumber = 3;
  inline ::google::protobuf::int32 quetype() const;
  inline void set_quetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifyxqresultMsg.XQResult)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_quetype();
  inline void clear_has_quetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 quetype_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifyxqresultMsg_XQResult* default_instance_;
};
// -------------------------------------------------------------------

class notifyxqresultMsg : public ::google::protobuf::Message {
 public:
  notifyxqresultMsg();
  virtual ~notifyxqresultMsg();

  notifyxqresultMsg(const notifyxqresultMsg& from);

  inline notifyxqresultMsg& operator=(const notifyxqresultMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifyxqresultMsg& default_instance();

  void Swap(notifyxqresultMsg* other);

  // implements Message ----------------------------------------------

  notifyxqresultMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifyxqresultMsg& from);
  void MergeFrom(const notifyxqresultMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef notifyxqresultMsg_XQResult XQResult;

  // accessors -------------------------------------------------------

  // repeated .mahjong_msg.notifyxqresultMsg.XQResult xq_result = 1;
  inline int xq_result_size() const;
  inline void clear_xq_result();
  static const int kXqResultFieldNumber = 1;
  inline const ::mahjong_msg::notifyxqresultMsg_XQResult& xq_result(int index) const;
  inline ::mahjong_msg::notifyxqresultMsg_XQResult* mutable_xq_result(int index);
  inline ::mahjong_msg::notifyxqresultMsg_XQResult* add_xq_result();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::notifyxqresultMsg_XQResult >&
      xq_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::notifyxqresultMsg_XQResult >*
      mutable_xq_result();

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifyxqresultMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::notifyxqresultMsg_XQResult > xq_result_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifyxqresultMsg* default_instance_;
};
// -------------------------------------------------------------------

class notifyhpresultMsg : public ::google::protobuf::Message {
 public:
  notifyhpresultMsg();
  virtual ~notifyhpresultMsg();

  notifyhpresultMsg(const notifyhpresultMsg& from);

  inline notifyhpresultMsg& operator=(const notifyhpresultMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifyhpresultMsg& default_instance();

  void Swap(notifyhpresultMsg* other);

  // implements Message ----------------------------------------------

  notifyhpresultMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifyhpresultMsg& from);
  void MergeFrom(const notifyhpresultMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 hpinfos_index = 1;
  inline int hpinfos_index_size() const;
  inline void clear_hpinfos_index();
  static const int kHpinfosIndexFieldNumber = 1;
  inline ::google::protobuf::int32 hpinfos_index(int index) const;
  inline void set_hpinfos_index(int index, ::google::protobuf::int32 value);
  inline void add_hpinfos_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hpinfos_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hpinfos_index();

  // repeated int32 hpinfos_value = 2;
  inline int hpinfos_value_size() const;
  inline void clear_hpinfos_value();
  static const int kHpinfosValueFieldNumber = 2;
  inline ::google::protobuf::int32 hpinfos_value(int index) const;
  inline void set_hpinfos_value(int index, ::google::protobuf::int32 value);
  inline void add_hpinfos_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hpinfos_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hpinfos_value();

  // repeated int32 getinfos = 3;
  inline int getinfos_size() const;
  inline void clear_getinfos();
  static const int kGetinfosFieldNumber = 3;
  inline ::google::protobuf::int32 getinfos(int index) const;
  inline void set_getinfos(int index, ::google::protobuf::int32 value);
  inline void add_getinfos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      getinfos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_getinfos();

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifyhpresultMsg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hpinfos_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hpinfos_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > getinfos_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifyhpresultMsg* default_instance_;
};
// -------------------------------------------------------------------

class loginMsg : public ::google::protobuf::Message {
 public:
  loginMsg();
  virtual ~loginMsg();

  loginMsg(const loginMsg& from);

  inline loginMsg& operator=(const loginMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const loginMsg& default_instance();

  void Swap(loginMsg* other);

  // implements Message ----------------------------------------------

  loginMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const loginMsg& from);
  void MergeFrom(const loginMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 betting = 3;
  inline bool has_betting() const;
  inline void clear_betting();
  static const int kBettingFieldNumber = 3;
  inline ::google::protobuf::int32 betting() const;
  inline void set_betting(::google::protobuf::int32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required string avatar = 6;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // required string avatar_1 = 7;
  inline bool has_avatar_1() const;
  inline void clear_avatar_1();
  static const int kAvatar1FieldNumber = 7;
  inline const ::std::string& avatar_1() const;
  inline void set_avatar_1(const ::std::string& value);
  inline void set_avatar_1(const char* value);
  inline void set_avatar_1(const char* value, size_t size);
  inline ::std::string* mutable_avatar_1();
  inline ::std::string* release_avatar_1();
  inline void set_allocated_avatar_1(::std::string* avatar_1);

  // required int32 max_fan = 8;
  inline bool has_max_fan() const;
  inline void clear_max_fan();
  static const int kMaxFanFieldNumber = 8;
  inline ::google::protobuf::int32 max_fan() const;
  inline void set_max_fan(::google::protobuf::int32 value);

  // required int32 loveliness_amt = 9;
  inline bool has_loveliness_amt() const;
  inline void clear_loveliness_amt();
  static const int kLovelinessAmtFieldNumber = 9;
  inline ::google::protobuf::int32 loveliness_amt() const;
  inline void set_loveliness_amt(::google::protobuf::int32 value);

  // required int64 total_win_money = 10;
  inline bool has_total_win_money() const;
  inline void clear_total_win_money();
  static const int kTotalWinMoneyFieldNumber = 10;
  inline ::google::protobuf::int64 total_win_money() const;
  inline void set_total_win_money(::google::protobuf::int64 value);

  // required int64 money = 11;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int64 train_money = 12;
  inline bool has_train_money() const;
  inline void clear_train_money();
  static const int kTrainMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 train_money() const;
  inline void set_train_money(::google::protobuf::int64 value);

  // required int64 taste_money = 13;
  inline bool has_taste_money() const;
  inline void clear_taste_money();
  static const int kTasteMoneyFieldNumber = 13;
  inline ::google::protobuf::int64 taste_money() const;
  inline void set_taste_money(::google::protobuf::int64 value);

  // required int32 total_board = 14;
  inline bool has_total_board() const;
  inline void clear_total_board();
  static const int kTotalBoardFieldNumber = 14;
  inline ::google::protobuf::int32 total_board() const;
  inline void set_total_board(::google::protobuf::int32 value);

  // required int32 total_win = 15;
  inline bool has_total_win() const;
  inline void clear_total_win();
  static const int kTotalWinFieldNumber = 15;
  inline ::google::protobuf::int32 total_win() const;
  inline void set_total_win(::google::protobuf::int32 value);

  // required int32 vlevel = 16;
  inline bool has_vlevel() const;
  inline void clear_vlevel();
  static const int kVlevelFieldNumber = 16;
  inline ::google::protobuf::int32 vlevel() const;
  inline void set_vlevel(::google::protobuf::int32 value);

  // required string ps = 17;
  inline bool has_ps() const;
  inline void clear_ps();
  static const int kPsFieldNumber = 17;
  inline const ::std::string& ps() const;
  inline void set_ps(const ::std::string& value);
  inline void set_ps(const char* value);
  inline void set_ps(const char* value, size_t size);
  inline ::std::string* mutable_ps();
  inline ::std::string* release_ps();
  inline void set_allocated_ps(::std::string* ps);

  // @@protoc_insertion_point(class_scope:mahjong_msg.loginMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_betting();
  inline void clear_has_betting();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_avatar_1();
  inline void clear_has_avatar_1();
  inline void set_has_max_fan();
  inline void clear_has_max_fan();
  inline void set_has_loveliness_amt();
  inline void clear_has_loveliness_amt();
  inline void set_has_total_win_money();
  inline void clear_has_total_win_money();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_train_money();
  inline void clear_has_train_money();
  inline void set_has_taste_money();
  inline void clear_has_taste_money();
  inline void set_has_total_board();
  inline void clear_has_total_board();
  inline void set_has_total_win();
  inline void clear_has_total_win();
  inline void set_has_vlevel();
  inline void clear_has_vlevel();
  inline void set_has_ps();
  inline void clear_has_ps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 betting_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 max_fan_;
  ::std::string* avatar_1_;
  ::google::protobuf::int64 total_win_money_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 loveliness_amt_;
  ::google::protobuf::int32 total_board_;
  ::google::protobuf::int64 train_money_;
  ::google::protobuf::int64 taste_money_;
  ::google::protobuf::int32 total_win_;
  ::google::protobuf::int32 vlevel_;
  ::std::string* ps_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static loginMsg* default_instance_;
};
// -------------------------------------------------------------------

class dealcardRequest : public ::google::protobuf::Message {
 public:
  dealcardRequest();
  virtual ~dealcardRequest();

  dealcardRequest(const dealcardRequest& from);

  inline dealcardRequest& operator=(const dealcardRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dealcardRequest& default_instance();

  void Swap(dealcardRequest* other);

  // implements Message ----------------------------------------------

  dealcardRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dealcardRequest& from);
  void MergeFrom(const dealcardRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dtype = 1;
  inline bool has_dtype() const;
  inline void clear_dtype();
  static const int kDtypeFieldNumber = 1;
  inline ::google::protobuf::int32 dtype() const;
  inline void set_dtype(::google::protobuf::int32 value);

  // required int32 cardv = 2;
  inline bool has_cardv() const;
  inline void clear_cardv();
  static const int kCardvFieldNumber = 2;
  inline ::google::protobuf::int32 cardv() const;
  inline void set_cardv(::google::protobuf::int32 value);

  // required int32 seatid = 3;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.dealcardRequest)
 private:
  inline void set_has_dtype();
  inline void clear_has_dtype();
  inline void set_has_cardv();
  inline void clear_has_cardv();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 dtype_;
  ::google::protobuf::int32 cardv_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dealcardRequest* default_instance_;
};
// -------------------------------------------------------------------

class dealcardResponse : public ::google::protobuf::Message {
 public:
  dealcardResponse();
  virtual ~dealcardResponse();

  dealcardResponse(const dealcardResponse& from);

  inline dealcardResponse& operator=(const dealcardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dealcardResponse& default_instance();

  void Swap(dealcardResponse* other);

  // implements Message ----------------------------------------------

  dealcardResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dealcardResponse& from);
  void MergeFrom(const dealcardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.dealcardResponse)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dealcardResponse* default_instance_;
};
// -------------------------------------------------------------------

class selfdealMsg_EatCard : public ::google::protobuf::Message {
 public:
  selfdealMsg_EatCard();
  virtual ~selfdealMsg_EatCard();

  selfdealMsg_EatCard(const selfdealMsg_EatCard& from);

  inline selfdealMsg_EatCard& operator=(const selfdealMsg_EatCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const selfdealMsg_EatCard& default_instance();

  void Swap(selfdealMsg_EatCard* other);

  // implements Message ----------------------------------------------

  selfdealMsg_EatCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const selfdealMsg_EatCard& from);
  void MergeFrom(const selfdealMsg_EatCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:mahjong_msg.selfdealMsg.EatCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static selfdealMsg_EatCard* default_instance_;
};
// -------------------------------------------------------------------

class selfdealMsg : public ::google::protobuf::Message {
 public:
  selfdealMsg();
  virtual ~selfdealMsg();

  selfdealMsg(const selfdealMsg& from);

  inline selfdealMsg& operator=(const selfdealMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const selfdealMsg& default_instance();

  void Swap(selfdealMsg* other);

  // implements Message ----------------------------------------------

  selfdealMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const selfdealMsg& from);
  void MergeFrom(const selfdealMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef selfdealMsg_EatCard EatCard;

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 ftype = 2;
  inline bool has_ftype() const;
  inline void clear_ftype();
  static const int kFtypeFieldNumber = 2;
  inline ::google::protobuf::int32 ftype() const;
  inline void set_ftype(::google::protobuf::int32 value);

  // required int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 cardnums = 4;
  inline bool has_cardnums() const;
  inline void clear_cardnums();
  static const int kCardnumsFieldNumber = 4;
  inline ::google::protobuf::int32 cardnums() const;
  inline void set_cardnums(::google::protobuf::int32 value);

  // required int32 cd = 5;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 5;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // required int32 t_cardv = 6;
  inline bool has_t_cardv() const;
  inline void clear_t_cardv();
  static const int kTCardvFieldNumber = 6;
  inline ::google::protobuf::int32 t_cardv() const;
  inline void set_t_cardv(::google::protobuf::int32 value);

  // required int32 cardv = 7;
  inline bool has_cardv() const;
  inline void clear_cardv();
  static const int kCardvFieldNumber = 7;
  inline ::google::protobuf::int32 cardv() const;
  inline void set_cardv(::google::protobuf::int32 value);

  // repeated int32 dealinfos = 8;
  inline int dealinfos_size() const;
  inline void clear_dealinfos();
  static const int kDealinfosFieldNumber = 8;
  inline ::google::protobuf::int32 dealinfos(int index) const;
  inline void set_dealinfos(int index, ::google::protobuf::int32 value);
  inline void add_dealinfos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dealinfos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dealinfos();

  // repeated int32 cards = 9;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 9;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated .mahjong_msg.selfdealMsg.EatCard eatcards = 10;
  inline int eatcards_size() const;
  inline void clear_eatcards();
  static const int kEatcardsFieldNumber = 10;
  inline const ::mahjong_msg::selfdealMsg_EatCard& eatcards(int index) const;
  inline ::mahjong_msg::selfdealMsg_EatCard* mutable_eatcards(int index);
  inline ::mahjong_msg::selfdealMsg_EatCard* add_eatcards();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::selfdealMsg_EatCard >&
      eatcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::selfdealMsg_EatCard >*
      mutable_eatcards();

  // required uint32 uid = 11;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 11;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 train_money = 12;
  inline bool has_train_money() const;
  inline void clear_train_money();
  static const int kTrainMoneyFieldNumber = 12;
  inline ::google::protobuf::int32 train_money() const;
  inline void set_train_money(::google::protobuf::int32 value);

  // required int32 taste_money = 13;
  inline bool has_taste_money() const;
  inline void clear_taste_money();
  static const int kTasteMoneyFieldNumber = 13;
  inline ::google::protobuf::int32 taste_money() const;
  inline void set_taste_money(::google::protobuf::int32 value);

  // optional int32 pengcv = 14;
  inline bool has_pengcv() const;
  inline void clear_pengcv();
  static const int kPengcvFieldNumber = 14;
  inline ::google::protobuf::int32 pengcv() const;
  inline void set_pengcv(::google::protobuf::int32 value);

  // optional int32 other_t_cardv = 15;
  inline bool has_other_t_cardv() const;
  inline void clear_other_t_cardv();
  static const int kOtherTCardvFieldNumber = 15;
  inline ::google::protobuf::int32 other_t_cardv() const;
  inline void set_other_t_cardv(::google::protobuf::int32 value);

  // optional int32 other_cardv = 16;
  inline bool has_other_cardv() const;
  inline void clear_other_cardv();
  static const int kOtherCardvFieldNumber = 16;
  inline ::google::protobuf::int32 other_cardv() const;
  inline void set_other_cardv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.selfdealMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_ftype();
  inline void clear_has_ftype();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_cardnums();
  inline void clear_has_cardnums();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_t_cardv();
  inline void clear_has_t_cardv();
  inline void set_has_cardv();
  inline void clear_has_cardv();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_train_money();
  inline void clear_has_train_money();
  inline void set_has_taste_money();
  inline void clear_has_taste_money();
  inline void set_has_pengcv();
  inline void clear_has_pengcv();
  inline void set_has_other_t_cardv();
  inline void clear_has_other_t_cardv();
  inline void set_has_other_cardv();
  inline void clear_has_other_cardv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 ftype_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 cardnums_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 t_cardv_;
  ::google::protobuf::int32 cardv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dealinfos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::selfdealMsg_EatCard > eatcards_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 train_money_;
  ::google::protobuf::int32 taste_money_;
  ::google::protobuf::int32 pengcv_;
  ::google::protobuf::int32 other_t_cardv_;
  ::google::protobuf::int32 other_cardv_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static selfdealMsg* default_instance_;
};
// -------------------------------------------------------------------

class notifynextdealMsg : public ::google::protobuf::Message {
 public:
  notifynextdealMsg();
  virtual ~notifynextdealMsg();

  notifynextdealMsg(const notifynextdealMsg& from);

  inline notifynextdealMsg& operator=(const notifynextdealMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const notifynextdealMsg& default_instance();

  void Swap(notifynextdealMsg* other);

  // implements Message ----------------------------------------------

  notifynextdealMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const notifynextdealMsg& from);
  void MergeFrom(const notifynextdealMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 robot = 3;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 3;
  inline ::google::protobuf::int32 robot() const;
  inline void set_robot(::google::protobuf::int32 value);

  // required int32 cd = 4;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 4;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.notifynextdealMsg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 robot_;
  ::google::protobuf::int32 cd_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static notifynextdealMsg* default_instance_;
};
// -------------------------------------------------------------------

class dealcardMsg_DealEnds : public ::google::protobuf::Message {
 public:
  dealcardMsg_DealEnds();
  virtual ~dealcardMsg_DealEnds();

  dealcardMsg_DealEnds(const dealcardMsg_DealEnds& from);

  inline dealcardMsg_DealEnds& operator=(const dealcardMsg_DealEnds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dealcardMsg_DealEnds& default_instance();

  void Swap(dealcardMsg_DealEnds* other);

  // implements Message ----------------------------------------------

  dealcardMsg_DealEnds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dealcardMsg_DealEnds& from);
  void MergeFrom(const dealcardMsg_DealEnds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 beishu = 3;
  inline bool has_beishu() const;
  inline void clear_beishu();
  static const int kBeishuFieldNumber = 3;
  inline ::google::protobuf::int32 beishu() const;
  inline void set_beishu(::google::protobuf::int32 value);

  // required int64 winmoney = 4;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinmoneyFieldNumber = 4;
  inline ::google::protobuf::int64 winmoney() const;
  inline void set_winmoney(::google::protobuf::int64 value);

  // required int64 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.dealcardMsg.DealEnds)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_beishu();
  inline void clear_has_beishu();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int64 winmoney_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 beishu_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dealcardMsg_DealEnds* default_instance_;
};
// -------------------------------------------------------------------

class dealcardMsg_GangCard : public ::google::protobuf::Message {
 public:
  dealcardMsg_GangCard();
  virtual ~dealcardMsg_GangCard();

  dealcardMsg_GangCard(const dealcardMsg_GangCard& from);

  inline dealcardMsg_GangCard& operator=(const dealcardMsg_GangCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dealcardMsg_GangCard& default_instance();

  void Swap(dealcardMsg_GangCard* other);

  // implements Message ----------------------------------------------

  dealcardMsg_GangCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dealcardMsg_GangCard& from);
  void MergeFrom(const dealcardMsg_GangCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.dealcardMsg.GangCard)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dealcardMsg_GangCard* default_instance_;
};
// -------------------------------------------------------------------

class dealcardMsg : public ::google::protobuf::Message {
 public:
  dealcardMsg();
  virtual ~dealcardMsg();

  dealcardMsg(const dealcardMsg& from);

  inline dealcardMsg& operator=(const dealcardMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dealcardMsg& default_instance();

  void Swap(dealcardMsg* other);

  // implements Message ----------------------------------------------

  dealcardMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dealcardMsg& from);
  void MergeFrom(const dealcardMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef dealcardMsg_DealEnds DealEnds;
  typedef dealcardMsg_GangCard GangCard;

  // accessors -------------------------------------------------------

  // repeated int32 dealcards = 1;
  inline int dealcards_size() const;
  inline void clear_dealcards();
  static const int kDealcardsFieldNumber = 1;
  inline ::google::protobuf::int32 dealcards(int index) const;
  inline void set_dealcards(int index, ::google::protobuf::int32 value);
  inline void add_dealcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dealcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dealcards();

  // required uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 3;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 cardnums = 4;
  inline bool has_cardnums() const;
  inline void clear_cardnums();
  static const int kCardnumsFieldNumber = 4;
  inline ::google::protobuf::int32 cardnums() const;
  inline void set_cardnums(::google::protobuf::int32 value);

  // required int32 cardv = 5;
  inline bool has_cardv() const;
  inline void clear_cardv();
  static const int kCardvFieldNumber = 5;
  inline ::google::protobuf::int32 cardv() const;
  inline void set_cardv(::google::protobuf::int32 value);

  // required int32 index = 6;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 6;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 dtype = 7;
  inline bool has_dtype() const;
  inline void clear_dtype();
  static const int kDtypeFieldNumber = 7;
  inline ::google::protobuf::int32 dtype() const;
  inline void set_dtype(::google::protobuf::int32 value);

  // required int32 otype = 8;
  inline bool has_otype() const;
  inline void clear_otype();
  static const int kOtypeFieldNumber = 8;
  inline ::google::protobuf::int32 otype() const;
  inline void set_otype(::google::protobuf::int32 value);

  // required int32 zmcount = 9;
  inline bool has_zmcount() const;
  inline void clear_zmcount();
  static const int kZmcountFieldNumber = 9;
  inline ::google::protobuf::int32 zmcount() const;
  inline void set_zmcount(::google::protobuf::int32 value);

  // required int32 hpcount = 10;
  inline bool has_hpcount() const;
  inline void clear_hpcount();
  static const int kHpcountFieldNumber = 10;
  inline ::google::protobuf::int32 hpcount() const;
  inline void set_hpcount(::google::protobuf::int32 value);

  // required int64 money = 11;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 train_money = 12;
  inline bool has_train_money() const;
  inline void clear_train_money();
  static const int kTrainMoneyFieldNumber = 12;
  inline ::google::protobuf::int32 train_money() const;
  inline void set_train_money(::google::protobuf::int32 value);

  // required int32 taste_money = 13;
  inline bool has_taste_money() const;
  inline void clear_taste_money();
  static const int kTasteMoneyFieldNumber = 13;
  inline ::google::protobuf::int32 taste_money() const;
  inline void set_taste_money(::google::protobuf::int32 value);

  // required int32 lastseatid = 14;
  inline bool has_lastseatid() const;
  inline void clear_lastseatid();
  static const int kLastseatidFieldNumber = 14;
  inline ::google::protobuf::int32 lastseatid() const;
  inline void set_lastseatid(::google::protobuf::int32 value);

  // required int32 qgflag = 15;
  inline bool has_qgflag() const;
  inline void clear_qgflag();
  static const int kQgflagFieldNumber = 15;
  inline ::google::protobuf::int32 qgflag() const;
  inline void set_qgflag(::google::protobuf::int32 value);

  // repeated .mahjong_msg.dealcardMsg.DealEnds dealends = 16;
  inline int dealends_size() const;
  inline void clear_dealends();
  static const int kDealendsFieldNumber = 16;
  inline const ::mahjong_msg::dealcardMsg_DealEnds& dealends(int index) const;
  inline ::mahjong_msg::dealcardMsg_DealEnds* mutable_dealends(int index);
  inline ::mahjong_msg::dealcardMsg_DealEnds* add_dealends();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_DealEnds >&
      dealends() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_DealEnds >*
      mutable_dealends();

  // optional int32 mflag = 17;
  inline bool has_mflag() const;
  inline void clear_mflag();
  static const int kMflagFieldNumber = 17;
  inline ::google::protobuf::int32 mflag() const;
  inline void set_mflag(::google::protobuf::int32 value);

  // optional int32 qgdeal = 18;
  inline bool has_qgdeal() const;
  inline void clear_qgdeal();
  static const int kQgdealFieldNumber = 18;
  inline ::google::protobuf::int32 qgdeal() const;
  inline void set_qgdeal(::google::protobuf::int32 value);

  // repeated int32 handcards = 19;
  inline int handcards_size() const;
  inline void clear_handcards();
  static const int kHandcardsFieldNumber = 19;
  inline ::google::protobuf::int32 handcards(int index) const;
  inline void set_handcards(int index, ::google::protobuf::int32 value);
  inline void add_handcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcards();

  // repeated .mahjong_msg.dealcardMsg.GangCard gangcards = 20;
  inline int gangcards_size() const;
  inline void clear_gangcards();
  static const int kGangcardsFieldNumber = 20;
  inline const ::mahjong_msg::dealcardMsg_GangCard& gangcards(int index) const;
  inline ::mahjong_msg::dealcardMsg_GangCard* mutable_gangcards(int index);
  inline ::mahjong_msg::dealcardMsg_GangCard* add_gangcards();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_GangCard >&
      gangcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_GangCard >*
      mutable_gangcards();

  // optional int32 pass_hu_count = 21;
  inline bool has_pass_hu_count() const;
  inline void clear_pass_hu_count();
  static const int kPassHuCountFieldNumber = 21;
  inline ::google::protobuf::int32 pass_hu_count() const;
  inline void set_pass_hu_count(::google::protobuf::int32 value);

  // optional bool tianting = 22;
  inline bool has_tianting() const;
  inline void clear_tianting();
  static const int kTiantingFieldNumber = 22;
  inline bool tianting() const;
  inline void set_tianting(bool value);

  // optional bool haidilaoyue = 23;
  inline bool has_haidilaoyue() const;
  inline void clear_haidilaoyue();
  static const int kHaidilaoyueFieldNumber = 23;
  inline bool haidilaoyue() const;
  inline void set_haidilaoyue(bool value);

  // optional bool miaoshouhuichun = 24;
  inline bool has_miaoshouhuichun() const;
  inline void clear_miaoshouhuichun();
  static const int kMiaoshouhuichunFieldNumber = 24;
  inline bool miaoshouhuichun() const;
  inline void set_miaoshouhuichun(bool value);

  // optional int32 qgseatid = 25;
  inline bool has_qgseatid() const;
  inline void clear_qgseatid();
  static const int kQgseatidFieldNumber = 25;
  inline ::google::protobuf::int32 qgseatid() const;
  inline void set_qgseatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.dealcardMsg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_cardnums();
  inline void clear_has_cardnums();
  inline void set_has_cardv();
  inline void clear_has_cardv();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_dtype();
  inline void clear_has_dtype();
  inline void set_has_otype();
  inline void clear_has_otype();
  inline void set_has_zmcount();
  inline void clear_has_zmcount();
  inline void set_has_hpcount();
  inline void clear_has_hpcount();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_train_money();
  inline void clear_has_train_money();
  inline void set_has_taste_money();
  inline void clear_has_taste_money();
  inline void set_has_lastseatid();
  inline void clear_has_lastseatid();
  inline void set_has_qgflag();
  inline void clear_has_qgflag();
  inline void set_has_mflag();
  inline void clear_has_mflag();
  inline void set_has_qgdeal();
  inline void clear_has_qgdeal();
  inline void set_has_pass_hu_count();
  inline void clear_has_pass_hu_count();
  inline void set_has_tianting();
  inline void clear_has_tianting();
  inline void set_has_haidilaoyue();
  inline void clear_has_haidilaoyue();
  inline void set_has_miaoshouhuichun();
  inline void clear_has_miaoshouhuichun();
  inline void set_has_qgseatid();
  inline void clear_has_qgseatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dealcards_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 cardnums_;
  ::google::protobuf::int32 cardv_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 dtype_;
  ::google::protobuf::int32 otype_;
  ::google::protobuf::int32 zmcount_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 hpcount_;
  ::google::protobuf::int32 train_money_;
  ::google::protobuf::int32 taste_money_;
  ::google::protobuf::int32 lastseatid_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_DealEnds > dealends_;
  ::google::protobuf::int32 qgflag_;
  ::google::protobuf::int32 mflag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcards_;
  ::google::protobuf::int32 qgdeal_;
  ::google::protobuf::int32 pass_hu_count_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_GangCard > gangcards_;
  bool tianting_;
  bool haidilaoyue_;
  bool miaoshouhuichun_;
  ::google::protobuf::int32 qgseatid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dealcardMsg* default_instance_;
};
// -------------------------------------------------------------------

class gameendMsg_PlayInfo : public ::google::protobuf::Message {
 public:
  gameendMsg_PlayInfo();
  virtual ~gameendMsg_PlayInfo();

  gameendMsg_PlayInfo(const gameendMsg_PlayInfo& from);

  inline gameendMsg_PlayInfo& operator=(const gameendMsg_PlayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gameendMsg_PlayInfo& default_instance();

  void Swap(gameendMsg_PlayInfo* other);

  // implements Message ----------------------------------------------

  gameendMsg_PlayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gameendMsg_PlayInfo& from);
  void MergeFrom(const gameendMsg_PlayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 winmoney = 4;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinmoneyFieldNumber = 4;
  inline ::google::protobuf::int64 winmoney() const;
  inline void set_winmoney(::google::protobuf::int64 value);

  // required int32 beishu = 5;
  inline bool has_beishu() const;
  inline void clear_beishu();
  static const int kBeishuFieldNumber = 5;
  inline ::google::protobuf::int32 beishu() const;
  inline void set_beishu(::google::protobuf::int32 value);

  // required int32 total_board = 6;
  inline bool has_total_board() const;
  inline void clear_total_board();
  static const int kTotalBoardFieldNumber = 6;
  inline ::google::protobuf::int32 total_board() const;
  inline void set_total_board(::google::protobuf::int32 value);

  // required int32 total_win = 7;
  inline bool has_total_win() const;
  inline void clear_total_win();
  static const int kTotalWinFieldNumber = 7;
  inline ::google::protobuf::int32 total_win() const;
  inline void set_total_win(::google::protobuf::int32 value);

  // required int64 money = 8;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 8;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 max_fan = 9;
  inline bool has_max_fan() const;
  inline void clear_max_fan();
  static const int kMaxFanFieldNumber = 9;
  inline ::google::protobuf::int32 max_fan() const;
  inline void set_max_fan(::google::protobuf::int32 value);

  // required int32 loveliness_amt = 10;
  inline bool has_loveliness_amt() const;
  inline void clear_loveliness_amt();
  static const int kLovelinessAmtFieldNumber = 10;
  inline ::google::protobuf::int32 loveliness_amt() const;
  inline void set_loveliness_amt(::google::protobuf::int32 value);

  // required int64 total_win_money = 11;
  inline bool has_total_win_money() const;
  inline void clear_total_win_money();
  static const int kTotalWinMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 total_win_money() const;
  inline void set_total_win_money(::google::protobuf::int64 value);

  // repeated int32 cards = 12;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 12;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 pass_hu_count = 14;
  inline bool has_pass_hu_count() const;
  inline void clear_pass_hu_count();
  static const int kPassHuCountFieldNumber = 14;
  inline ::google::protobuf::int32 pass_hu_count() const;
  inline void set_pass_hu_count(::google::protobuf::int32 value);

  // optional int32 train_money = 15;
  inline bool has_train_money() const;
  inline void clear_train_money();
  static const int kTrainMoneyFieldNumber = 15;
  inline ::google::protobuf::int32 train_money() const;
  inline void set_train_money(::google::protobuf::int32 value);

  // optional int32 taste_money = 16;
  inline bool has_taste_money() const;
  inline void clear_taste_money();
  static const int kTasteMoneyFieldNumber = 16;
  inline ::google::protobuf::int32 taste_money() const;
  inline void set_taste_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.gameendMsg.PlayInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_beishu();
  inline void clear_has_beishu();
  inline void set_has_total_board();
  inline void clear_has_total_board();
  inline void set_has_total_win();
  inline void clear_has_total_win();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_max_fan();
  inline void clear_has_max_fan();
  inline void set_has_loveliness_amt();
  inline void clear_has_loveliness_amt();
  inline void set_has_total_win_money();
  inline void clear_has_total_win_money();
  inline void set_has_pass_hu_count();
  inline void clear_has_pass_hu_count();
  inline void set_has_train_money();
  inline void clear_has_train_money();
  inline void set_has_taste_money();
  inline void clear_has_taste_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::std::string* name_;
  ::google::protobuf::int64 winmoney_;
  ::google::protobuf::int32 beishu_;
  ::google::protobuf::int32 total_board_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 total_win_;
  ::google::protobuf::int32 max_fan_;
  ::google::protobuf::int64 total_win_money_;
  ::google::protobuf::int32 loveliness_amt_;
  ::google::protobuf::int32 pass_hu_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 train_money_;
  ::google::protobuf::int32 taste_money_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gameendMsg_PlayInfo* default_instance_;
};
// -------------------------------------------------------------------

class gameendMsg_FanInfo : public ::google::protobuf::Message {
 public:
  gameendMsg_FanInfo();
  virtual ~gameendMsg_FanInfo();

  gameendMsg_FanInfo(const gameendMsg_FanInfo& from);

  inline gameendMsg_FanInfo& operator=(const gameendMsg_FanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gameendMsg_FanInfo& default_instance();

  void Swap(gameendMsg_FanInfo* other);

  // implements Message ----------------------------------------------

  gameendMsg_FanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gameendMsg_FanInfo& from);
  void MergeFrom(const gameendMsg_FanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ftype = 1;
  inline bool has_ftype() const;
  inline void clear_ftype();
  static const int kFtypeFieldNumber = 1;
  inline const ::std::string& ftype() const;
  inline void set_ftype(const ::std::string& value);
  inline void set_ftype(const char* value);
  inline void set_ftype(const char* value, size_t size);
  inline ::std::string* mutable_ftype();
  inline ::std::string* release_ftype();
  inline void set_allocated_ftype(::std::string* ftype);

  // required int32 beishu = 2;
  inline bool has_beishu() const;
  inline void clear_beishu();
  static const int kBeishuFieldNumber = 2;
  inline ::google::protobuf::int32 beishu() const;
  inline void set_beishu(::google::protobuf::int32 value);

  // optional int64 winmoney = 3;
  inline bool has_winmoney() const;
  inline void clear_winmoney();
  static const int kWinmoneyFieldNumber = 3;
  inline ::google::protobuf::int64 winmoney() const;
  inline void set_winmoney(::google::protobuf::int64 value);

  // optional int32 otype = 4;
  inline bool has_otype() const;
  inline void clear_otype();
  static const int kOtypeFieldNumber = 4;
  inline ::google::protobuf::int32 otype() const;
  inline void set_otype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.gameendMsg.FanInfo)
 private:
  inline void set_has_ftype();
  inline void clear_has_ftype();
  inline void set_has_beishu();
  inline void clear_has_beishu();
  inline void set_has_winmoney();
  inline void clear_has_winmoney();
  inline void set_has_otype();
  inline void clear_has_otype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ftype_;
  ::google::protobuf::int64 winmoney_;
  ::google::protobuf::int32 beishu_;
  ::google::protobuf::int32 otype_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gameendMsg_FanInfo* default_instance_;
};
// -------------------------------------------------------------------

class gameendMsg : public ::google::protobuf::Message {
 public:
  gameendMsg();
  virtual ~gameendMsg();

  gameendMsg(const gameendMsg& from);

  inline gameendMsg& operator=(const gameendMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gameendMsg& default_instance();

  void Swap(gameendMsg* other);

  // implements Message ----------------------------------------------

  gameendMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gameendMsg& from);
  void MergeFrom(const gameendMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gameendMsg_PlayInfo PlayInfo;
  typedef gameendMsg_FanInfo FanInfo;

  // accessors -------------------------------------------------------

  // required int32 isliuju = 1;
  inline bool has_isliuju() const;
  inline void clear_isliuju();
  static const int kIsliujuFieldNumber = 1;
  inline ::google::protobuf::int32 isliuju() const;
  inline void set_isliuju(::google::protobuf::int32 value);

  // repeated .mahjong_msg.gameendMsg.PlayInfo players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::mahjong_msg::gameendMsg_PlayInfo& players(int index) const;
  inline ::mahjong_msg::gameendMsg_PlayInfo* mutable_players(int index);
  inline ::mahjong_msg::gameendMsg_PlayInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_PlayInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_PlayInfo >*
      mutable_players();

  // repeated .mahjong_msg.gameendMsg.FanInfo faninfos = 3;
  inline int faninfos_size() const;
  inline void clear_faninfos();
  static const int kFaninfosFieldNumber = 3;
  inline const ::mahjong_msg::gameendMsg_FanInfo& faninfos(int index) const;
  inline ::mahjong_msg::gameendMsg_FanInfo* mutable_faninfos(int index);
  inline ::mahjong_msg::gameendMsg_FanInfo* add_faninfos();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_FanInfo >&
      faninfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_FanInfo >*
      mutable_faninfos();

  // @@protoc_insertion_point(class_scope:mahjong_msg.gameendMsg)
 private:
  inline void set_has_isliuju();
  inline void clear_has_isliuju();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_PlayInfo > players_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_FanInfo > faninfos_;
  ::google::protobuf::int32 isliuju_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static gameendMsg* default_instance_;
};
// -------------------------------------------------------------------

class chatRequest : public ::google::protobuf::Message {
 public:
  chatRequest();
  virtual ~chatRequest();

  chatRequest(const chatRequest& from);

  inline chatRequest& operator=(const chatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chatRequest& default_instance();

  void Swap(chatRequest* other);

  // implements Message ----------------------------------------------

  chatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chatRequest& from);
  void MergeFrom(const chatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // required int32 chatid = 2;
  inline bool has_chatid() const;
  inline void clear_chatid();
  static const int kChatidFieldNumber = 2;
  inline ::google::protobuf::int32 chatid() const;
  inline void set_chatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.chatRequest)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_chatid();
  inline void clear_has_chatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  ::google::protobuf::int32 chatid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static chatRequest* default_instance_;
};
// -------------------------------------------------------------------

class giveupMsg : public ::google::protobuf::Message {
 public:
  giveupMsg();
  virtual ~giveupMsg();

  giveupMsg(const giveupMsg& from);

  inline giveupMsg& operator=(const giveupMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const giveupMsg& default_instance();

  void Swap(giveupMsg* other);

  // implements Message ----------------------------------------------

  giveupMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const giveupMsg& from);
  void MergeFrom(const giveupMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.giveupMsg)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 seatid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static giveupMsg* default_instance_;
};
// -------------------------------------------------------------------

class chatMsg : public ::google::protobuf::Message {
 public:
  chatMsg();
  virtual ~chatMsg();

  chatMsg(const chatMsg& from);

  inline chatMsg& operator=(const chatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chatMsg& default_instance();

  void Swap(chatMsg* other);

  // implements Message ----------------------------------------------

  chatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chatMsg& from);
  void MergeFrom(const chatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // required int32 chatid = 4;
  inline bool has_chatid() const;
  inline void clear_chatid();
  static const int kChatidFieldNumber = 4;
  inline ::google::protobuf::int32 chatid() const;
  inline void set_chatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.chatMsg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_chatid();
  inline void clear_has_chatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::std::string* text_;
  ::google::protobuf::int32 chatid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static chatMsg* default_instance_;
};
// -------------------------------------------------------------------

class normalexpresionRequest : public ::google::protobuf::Message {
 public:
  normalexpresionRequest();
  virtual ~normalexpresionRequest();

  normalexpresionRequest(const normalexpresionRequest& from);

  inline normalexpresionRequest& operator=(const normalexpresionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const normalexpresionRequest& default_instance();

  void Swap(normalexpresionRequest* other);

  // implements Message ----------------------------------------------

  normalexpresionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const normalexpresionRequest& from);
  void MergeFrom(const normalexpresionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 expressionid = 1;
  inline bool has_expressionid() const;
  inline void clear_expressionid();
  static const int kExpressionidFieldNumber = 1;
  inline ::google::protobuf::int32 expressionid() const;
  inline void set_expressionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.normalexpresionRequest)
 private:
  inline void set_has_expressionid();
  inline void clear_has_expressionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 expressionid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static normalexpresionRequest* default_instance_;
};
// -------------------------------------------------------------------

class normalexpresionMsg : public ::google::protobuf::Message {
 public:
  normalexpresionMsg();
  virtual ~normalexpresionMsg();

  normalexpresionMsg(const normalexpresionMsg& from);

  inline normalexpresionMsg& operator=(const normalexpresionMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const normalexpresionMsg& default_instance();

  void Swap(normalexpresionMsg* other);

  // implements Message ----------------------------------------------

  normalexpresionMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const normalexpresionMsg& from);
  void MergeFrom(const normalexpresionMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 seatid = 3;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 expressionid = 4;
  inline bool has_expressionid() const;
  inline void clear_expressionid();
  static const int kExpressionidFieldNumber = 4;
  inline ::google::protobuf::int32 expressionid() const;
  inline void set_expressionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.normalexpresionMsg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_expressionid();
  inline void clear_has_expressionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 expressionid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static normalexpresionMsg* default_instance_;
};
// -------------------------------------------------------------------

class expresionRequest : public ::google::protobuf::Message {
 public:
  expresionRequest();
  virtual ~expresionRequest();

  expresionRequest(const expresionRequest& from);

  inline expresionRequest& operator=(const expresionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const expresionRequest& default_instance();

  void Swap(expresionRequest* other);

  // implements Message ----------------------------------------------

  expresionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const expresionRequest& from);
  void MergeFrom(const expresionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 targetuid = 1;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetuidFieldNumber = 1;
  inline ::google::protobuf::int32 targetuid() const;
  inline void set_targetuid(::google::protobuf::int32 value);

  // required int32 reciveseatid = 2;
  inline bool has_reciveseatid() const;
  inline void clear_reciveseatid();
  static const int kReciveseatidFieldNumber = 2;
  inline ::google::protobuf::int32 reciveseatid() const;
  inline void set_reciveseatid(::google::protobuf::int32 value);

  // required int32 expressionid = 3;
  inline bool has_expressionid() const;
  inline void clear_expressionid();
  static const int kExpressionidFieldNumber = 3;
  inline ::google::protobuf::int32 expressionid() const;
  inline void set_expressionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.expresionRequest)
 private:
  inline void set_has_targetuid();
  inline void clear_has_targetuid();
  inline void set_has_reciveseatid();
  inline void clear_has_reciveseatid();
  inline void set_has_expressionid();
  inline void clear_has_expressionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 targetuid_;
  ::google::protobuf::int32 reciveseatid_;
  ::google::protobuf::int32 expressionid_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static expresionRequest* default_instance_;
};
// -------------------------------------------------------------------

class expresionMsg : public ::google::protobuf::Message {
 public:
  expresionMsg();
  virtual ~expresionMsg();

  expresionMsg(const expresionMsg& from);

  inline expresionMsg& operator=(const expresionMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const expresionMsg& default_instance();

  void Swap(expresionMsg* other);

  // implements Message ----------------------------------------------

  expresionMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const expresionMsg& from);
  void MergeFrom(const expresionMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sendseatid = 1;
  inline bool has_sendseatid() const;
  inline void clear_sendseatid();
  static const int kSendseatidFieldNumber = 1;
  inline ::google::protobuf::int32 sendseatid() const;
  inline void set_sendseatid(::google::protobuf::int32 value);

  // required int64 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 taste_money = 3;
  inline bool has_taste_money() const;
  inline void clear_taste_money();
  static const int kTasteMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 taste_money() const;
  inline void set_taste_money(::google::protobuf::int32 value);

  // required int32 reciveseatid = 4;
  inline bool has_reciveseatid() const;
  inline void clear_reciveseatid();
  static const int kReciveseatidFieldNumber = 4;
  inline ::google::protobuf::int32 reciveseatid() const;
  inline void set_reciveseatid(::google::protobuf::int32 value);

  // required int32 expressionid = 5;
  inline bool has_expressionid() const;
  inline void clear_expressionid();
  static const int kExpressionidFieldNumber = 5;
  inline ::google::protobuf::int32 expressionid() const;
  inline void set_expressionid(::google::protobuf::int32 value);

  // required int32 tar_loveliness = 6;
  inline bool has_tar_loveliness() const;
  inline void clear_tar_loveliness();
  static const int kTarLovelinessFieldNumber = 6;
  inline ::google::protobuf::int32 tar_loveliness() const;
  inline void set_tar_loveliness(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.expresionMsg)
 private:
  inline void set_has_sendseatid();
  inline void clear_has_sendseatid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_taste_money();
  inline void clear_has_taste_money();
  inline void set_has_reciveseatid();
  inline void clear_has_reciveseatid();
  inline void set_has_expressionid();
  inline void clear_has_expressionid();
  inline void set_has_tar_loveliness();
  inline void clear_has_tar_loveliness();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 sendseatid_;
  ::google::protobuf::int32 taste_money_;
  ::google::protobuf::int32 reciveseatid_;
  ::google::protobuf::int32 expressionid_;
  ::google::protobuf::int32 tar_loveliness_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static expresionMsg* default_instance_;
};
// -------------------------------------------------------------------

class tableinfoMsg_TblPlayInfo_EatCard : public ::google::protobuf::Message {
 public:
  tableinfoMsg_TblPlayInfo_EatCard();
  virtual ~tableinfoMsg_TblPlayInfo_EatCard();

  tableinfoMsg_TblPlayInfo_EatCard(const tableinfoMsg_TblPlayInfo_EatCard& from);

  inline tableinfoMsg_TblPlayInfo_EatCard& operator=(const tableinfoMsg_TblPlayInfo_EatCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tableinfoMsg_TblPlayInfo_EatCard& default_instance();

  void Swap(tableinfoMsg_TblPlayInfo_EatCard* other);

  // implements Message ----------------------------------------------

  tableinfoMsg_TblPlayInfo_EatCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tableinfoMsg_TblPlayInfo_EatCard& from);
  void MergeFrom(const tableinfoMsg_TblPlayInfo_EatCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static tableinfoMsg_TblPlayInfo_EatCard* default_instance_;
};
// -------------------------------------------------------------------

class tableinfoMsg_TblPlayInfo_GangCard : public ::google::protobuf::Message {
 public:
  tableinfoMsg_TblPlayInfo_GangCard();
  virtual ~tableinfoMsg_TblPlayInfo_GangCard();

  tableinfoMsg_TblPlayInfo_GangCard(const tableinfoMsg_TblPlayInfo_GangCard& from);

  inline tableinfoMsg_TblPlayInfo_GangCard& operator=(const tableinfoMsg_TblPlayInfo_GangCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tableinfoMsg_TblPlayInfo_GangCard& default_instance();

  void Swap(tableinfoMsg_TblPlayInfo_GangCard* other);

  // implements Message ----------------------------------------------

  tableinfoMsg_TblPlayInfo_GangCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tableinfoMsg_TblPlayInfo_GangCard& from);
  void MergeFrom(const tableinfoMsg_TblPlayInfo_GangCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static tableinfoMsg_TblPlayInfo_GangCard* default_instance_;
};
// -------------------------------------------------------------------

class tableinfoMsg_TblPlayInfo : public ::google::protobuf::Message {
 public:
  tableinfoMsg_TblPlayInfo();
  virtual ~tableinfoMsg_TblPlayInfo();

  tableinfoMsg_TblPlayInfo(const tableinfoMsg_TblPlayInfo& from);

  inline tableinfoMsg_TblPlayInfo& operator=(const tableinfoMsg_TblPlayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tableinfoMsg_TblPlayInfo& default_instance();

  void Swap(tableinfoMsg_TblPlayInfo* other);

  // implements Message ----------------------------------------------

  tableinfoMsg_TblPlayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tableinfoMsg_TblPlayInfo& from);
  void MergeFrom(const tableinfoMsg_TblPlayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tableinfoMsg_TblPlayInfo_EatCard EatCard;
  typedef tableinfoMsg_TblPlayInfo_GangCard GangCard;

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 zhunbei = 3;
  inline bool has_zhunbei() const;
  inline void clear_zhunbei();
  static const int kZhunbeiFieldNumber = 3;
  inline ::google::protobuf::int32 zhunbei() const;
  inline void set_zhunbei(::google::protobuf::int32 value);

  // required int32 betting = 4;
  inline bool has_betting() const;
  inline void clear_betting();
  static const int kBettingFieldNumber = 4;
  inline ::google::protobuf::int32 betting() const;
  inline void set_betting(::google::protobuf::int32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required string avatar = 7;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // required string avatar_1 = 8;
  inline bool has_avatar_1() const;
  inline void clear_avatar_1();
  static const int kAvatar1FieldNumber = 8;
  inline const ::std::string& avatar_1() const;
  inline void set_avatar_1(const ::std::string& value);
  inline void set_avatar_1(const char* value);
  inline void set_avatar_1(const char* value, size_t size);
  inline ::std::string* mutable_avatar_1();
  inline ::std::string* release_avatar_1();
  inline void set_allocated_avatar_1(::std::string* avatar_1);

  // required int32 max_fan = 9;
  inline bool has_max_fan() const;
  inline void clear_max_fan();
  static const int kMaxFanFieldNumber = 9;
  inline ::google::protobuf::int32 max_fan() const;
  inline void set_max_fan(::google::protobuf::int32 value);

  // required int32 loveliness_amt = 10;
  inline bool has_loveliness_amt() const;
  inline void clear_loveliness_amt();
  static const int kLovelinessAmtFieldNumber = 10;
  inline ::google::protobuf::int32 loveliness_amt() const;
  inline void set_loveliness_amt(::google::protobuf::int32 value);

  // required int64 total_win_money = 11;
  inline bool has_total_win_money() const;
  inline void clear_total_win_money();
  static const int kTotalWinMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 total_win_money() const;
  inline void set_total_win_money(::google::protobuf::int64 value);

  // required int64 money = 12;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 12;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 total_board = 13;
  inline bool has_total_board() const;
  inline void clear_total_board();
  static const int kTotalBoardFieldNumber = 13;
  inline ::google::protobuf::int32 total_board() const;
  inline void set_total_board(::google::protobuf::int32 value);

  // required int32 total_win = 14;
  inline bool has_total_win() const;
  inline void clear_total_win();
  static const int kTotalWinFieldNumber = 14;
  inline ::google::protobuf::int32 total_win() const;
  inline void set_total_win(::google::protobuf::int32 value);

  // required int32 vlevel = 15;
  inline bool has_vlevel() const;
  inline void clear_vlevel();
  static const int kVlevelFieldNumber = 15;
  inline ::google::protobuf::int32 vlevel() const;
  inline void set_vlevel(::google::protobuf::int32 value);

  // optional int32 train_money = 16;
  inline bool has_train_money() const;
  inline void clear_train_money();
  static const int kTrainMoneyFieldNumber = 16;
  inline ::google::protobuf::int32 train_money() const;
  inline void set_train_money(::google::protobuf::int32 value);

  // required string ps = 25;
  inline bool has_ps() const;
  inline void clear_ps();
  static const int kPsFieldNumber = 25;
  inline const ::std::string& ps() const;
  inline void set_ps(const ::std::string& value);
  inline void set_ps(const char* value);
  inline void set_ps(const char* value, size_t size);
  inline ::std::string* mutable_ps();
  inline ::std::string* release_ps();
  inline void set_allocated_ps(::std::string* ps);

  // required int32 hpstate = 26;
  inline bool has_hpstate() const;
  inline void clear_hpstate();
  static const int kHpstateFieldNumber = 26;
  inline ::google::protobuf::int32 hpstate() const;
  inline void set_hpstate(::google::protobuf::int32 value);

  // required int32 quetype = 27;
  inline bool has_quetype() const;
  inline void clear_quetype();
  static const int kQuetypeFieldNumber = 27;
  inline ::google::protobuf::int32 quetype() const;
  inline void set_quetype(::google::protobuf::int32 value);

  // required int32 zmcount = 28;
  inline bool has_zmcount() const;
  inline void clear_zmcount();
  static const int kZmcountFieldNumber = 28;
  inline ::google::protobuf::int32 zmcount() const;
  inline void set_zmcount(::google::protobuf::int32 value);

  // required int32 hpcount = 29;
  inline bool has_hpcount() const;
  inline void clear_hpcount();
  static const int kHpcountFieldNumber = 29;
  inline ::google::protobuf::int32 hpcount() const;
  inline void set_hpcount(::google::protobuf::int32 value);

  // required int32 is_baoting = 30;
  inline bool has_is_baoting() const;
  inline void clear_is_baoting();
  static const int kIsBaotingFieldNumber = 30;
  inline ::google::protobuf::int32 is_baoting() const;
  inline void set_is_baoting(::google::protobuf::int32 value);

  // required int32 pass_hu_count = 31;
  inline bool has_pass_hu_count() const;
  inline void clear_pass_hu_count();
  static const int kPassHuCountFieldNumber = 31;
  inline ::google::protobuf::int32 pass_hu_count() const;
  inline void set_pass_hu_count(::google::protobuf::int32 value);

  // required int32 is_give_up = 32;
  inline bool has_is_give_up() const;
  inline void clear_is_give_up();
  static const int kIsGiveUpFieldNumber = 32;
  inline ::google::protobuf::int32 is_give_up() const;
  inline void set_is_give_up(::google::protobuf::int32 value);

  // required int32 is_quit = 33;
  inline bool has_is_quit() const;
  inline void clear_is_quit();
  static const int kIsQuitFieldNumber = 33;
  inline ::google::protobuf::int32 is_quit() const;
  inline void set_is_quit(::google::protobuf::int32 value);

  // required int32 handlenum = 34;
  inline bool has_handlenum() const;
  inline void clear_handlenum();
  static const int kHandlenumFieldNumber = 34;
  inline ::google::protobuf::int32 handlenum() const;
  inline void set_handlenum(::google::protobuf::int32 value);

  // optional int32 last_get_card = 35;
  inline bool has_last_get_card() const;
  inline void clear_last_get_card();
  static const int kLastGetCardFieldNumber = 35;
  inline ::google::protobuf::int32 last_get_card() const;
  inline void set_last_get_card(::google::protobuf::int32 value);

  // repeated int32 handcards = 40;
  inline int handcards_size() const;
  inline void clear_handcards();
  static const int kHandcardsFieldNumber = 40;
  inline ::google::protobuf::int32 handcards(int index) const;
  inline void set_handcards(int index, ::google::protobuf::int32 value);
  inline void add_handcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcards();

  // repeated int32 outcards = 41;
  inline int outcards_size() const;
  inline void clear_outcards();
  static const int kOutcardsFieldNumber = 41;
  inline ::google::protobuf::int32 outcards(int index) const;
  inline void set_outcards(int index, ::google::protobuf::int32 value);
  inline void add_outcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outcards();

  // repeated int32 pengcards = 42;
  inline int pengcards_size() const;
  inline void clear_pengcards();
  static const int kPengcardsFieldNumber = 42;
  inline ::google::protobuf::int32 pengcards(int index) const;
  inline void set_pengcards(int index, ::google::protobuf::int32 value);
  inline void add_pengcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pengcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pengcards();

  // repeated int32 flowercards = 43;
  inline int flowercards_size() const;
  inline void clear_flowercards();
  static const int kFlowercardsFieldNumber = 43;
  inline ::google::protobuf::int32 flowercards(int index) const;
  inline void set_flowercards(int index, ::google::protobuf::int32 value);
  inline void add_flowercards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      flowercards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_flowercards();

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard eatcards = 44;
  inline int eatcards_size() const;
  inline void clear_eatcards();
  static const int kEatcardsFieldNumber = 44;
  inline const ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard& eatcards(int index) const;
  inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard* mutable_eatcards(int index);
  inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard* add_eatcards();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard >&
      eatcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard >*
      mutable_eatcards();

  // repeated int32 hucards = 45;
  inline int hucards_size() const;
  inline void clear_hucards();
  static const int kHucardsFieldNumber = 45;
  inline ::google::protobuf::int32 hucards(int index) const;
  inline void set_hucards(int index, ::google::protobuf::int32 value);
  inline void add_hucards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hucards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hucards();

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard gangcards = 46;
  inline int gangcards_size() const;
  inline void clear_gangcards();
  static const int kGangcardsFieldNumber = 46;
  inline const ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard& gangcards(int index) const;
  inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard* mutable_gangcards(int index);
  inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard* add_gangcards();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard >&
      gangcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard >*
      mutable_gangcards();

  // repeated int32 hpinfos = 47;
  inline int hpinfos_size() const;
  inline void clear_hpinfos();
  static const int kHpinfosFieldNumber = 47;
  inline ::google::protobuf::int32 hpinfos(int index) const;
  inline void set_hpinfos(int index, ::google::protobuf::int32 value);
  inline void add_hpinfos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hpinfos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hpinfos();

  // @@protoc_insertion_point(class_scope:mahjong_msg.tableinfoMsg.TblPlayInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_zhunbei();
  inline void clear_has_zhunbei();
  inline void set_has_betting();
  inline void clear_has_betting();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_avatar_1();
  inline void clear_has_avatar_1();
  inline void set_has_max_fan();
  inline void clear_has_max_fan();
  inline void set_has_loveliness_amt();
  inline void clear_has_loveliness_amt();
  inline void set_has_total_win_money();
  inline void clear_has_total_win_money();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_total_board();
  inline void clear_has_total_board();
  inline void set_has_total_win();
  inline void clear_has_total_win();
  inline void set_has_vlevel();
  inline void clear_has_vlevel();
  inline void set_has_train_money();
  inline void clear_has_train_money();
  inline void set_has_ps();
  inline void clear_has_ps();
  inline void set_has_hpstate();
  inline void clear_has_hpstate();
  inline void set_has_quetype();
  inline void clear_has_quetype();
  inline void set_has_zmcount();
  inline void clear_has_zmcount();
  inline void set_has_hpcount();
  inline void clear_has_hpcount();
  inline void set_has_is_baoting();
  inline void clear_has_is_baoting();
  inline void set_has_pass_hu_count();
  inline void clear_has_pass_hu_count();
  inline void set_has_is_give_up();
  inline void clear_has_is_give_up();
  inline void set_has_is_quit();
  inline void clear_has_is_quit();
  inline void set_has_handlenum();
  inline void clear_has_handlenum();
  inline void set_has_last_get_card();
  inline void clear_has_last_get_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 zhunbei_;
  ::google::protobuf::int32 betting_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 max_fan_;
  ::std::string* avatar_1_;
  ::google::protobuf::int64 total_win_money_;
  ::google::protobuf::int32 loveliness_amt_;
  ::google::protobuf::int32 total_board_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 total_win_;
  ::google::protobuf::int32 vlevel_;
  ::std::string* ps_;
  ::google::protobuf::int32 train_money_;
  ::google::protobuf::int32 hpstate_;
  ::google::protobuf::int32 quetype_;
  ::google::protobuf::int32 zmcount_;
  ::google::protobuf::int32 hpcount_;
  ::google::protobuf::int32 is_baoting_;
  ::google::protobuf::int32 pass_hu_count_;
  ::google::protobuf::int32 is_give_up_;
  ::google::protobuf::int32 is_quit_;
  ::google::protobuf::int32 handlenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pengcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > flowercards_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard > eatcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hucards_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard > gangcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hpinfos_;
  ::google::protobuf::int32 last_get_card_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static tableinfoMsg_TblPlayInfo* default_instance_;
};
// -------------------------------------------------------------------

class tableinfoMsg : public ::google::protobuf::Message {
 public:
  tableinfoMsg();
  virtual ~tableinfoMsg();

  tableinfoMsg(const tableinfoMsg& from);

  inline tableinfoMsg& operator=(const tableinfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tableinfoMsg& default_instance();

  void Swap(tableinfoMsg* other);

  // implements Message ----------------------------------------------

  tableinfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tableinfoMsg& from);
  void MergeFrom(const tableinfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tableinfoMsg_TblPlayInfo TblPlayInfo;

  // accessors -------------------------------------------------------

  // required uint32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required int32 cd = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 2;
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // required int32 base_money = 3;
  inline bool has_base_money() const;
  inline void clear_base_money();
  static const int kBaseMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 base_money() const;
  inline void set_base_money(::google::protobuf::int32 value);

  // required int32 min_money = 4;
  inline bool has_min_money() const;
  inline void clear_min_money();
  static const int kMinMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 min_money() const;
  inline void set_min_money(::google::protobuf::int32 value);

  // required int32 cardnums = 5;
  inline bool has_cardnums() const;
  inline void clear_cardnums();
  static const int kCardnumsFieldNumber = 5;
  inline ::google::protobuf::int32 cardnums() const;
  inline void set_cardnums(::google::protobuf::int32 value);

  // required int32 robot = 6;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 6;
  inline ::google::protobuf::int32 robot() const;
  inline void set_robot(::google::protobuf::int32 value);

  // required int32 magicexpressioncost = 7;
  inline bool has_magicexpressioncost() const;
  inline void clear_magicexpressioncost();
  static const int kMagicexpressioncostFieldNumber = 7;
  inline ::google::protobuf::int32 magicexpressioncost() const;
  inline void set_magicexpressioncost(::google::protobuf::int32 value);

  // required int32 dealseatid = 8;
  inline bool has_dealseatid() const;
  inline void clear_dealseatid();
  static const int kDealseatidFieldNumber = 8;
  inline ::google::protobuf::int32 dealseatid() const;
  inline void set_dealseatid(::google::protobuf::int32 value);

  // required int32 roomfee = 9;
  inline bool has_roomfee() const;
  inline void clear_roomfee();
  static const int kRoomfeeFieldNumber = 9;
  inline ::google::protobuf::int32 roomfee() const;
  inline void set_roomfee(::google::protobuf::int32 value);

  // required int32 auto_giveup = 10;
  inline bool has_auto_giveup() const;
  inline void clear_auto_giveup();
  static const int kAutoGiveupFieldNumber = 10;
  inline ::google::protobuf::int32 auto_giveup() const;
  inline void set_auto_giveup(::google::protobuf::int32 value);

  // required int32 round_flag = 11;
  inline bool has_round_flag() const;
  inline void clear_round_flag();
  static const int kRoundFlagFieldNumber = 11;
  inline ::google::protobuf::int32 round_flag() const;
  inline void set_round_flag(::google::protobuf::int32 value);

  // required int32 limit_max_win = 12;
  inline bool has_limit_max_win() const;
  inline void clear_limit_max_win();
  static const int kLimitMaxWinFieldNumber = 12;
  inline ::google::protobuf::int32 limit_max_win() const;
  inline void set_limit_max_win(::google::protobuf::int32 value);

  // required int32 cli_hb_interval = 13;
  inline bool has_cli_hb_interval() const;
  inline void clear_cli_hb_interval();
  static const int kCliHbIntervalFieldNumber = 13;
  inline ::google::protobuf::int32 cli_hb_interval() const;
  inline void set_cli_hb_interval(::google::protobuf::int32 value);

  // required int32 pass_hu_twice = 14;
  inline bool has_pass_hu_twice() const;
  inline void clear_pass_hu_twice();
  static const int kPassHuTwiceFieldNumber = 14;
  inline ::google::protobuf::int32 pass_hu_twice() const;
  inline void set_pass_hu_twice(::google::protobuf::int32 value);

  // required int32 max_pass_hu = 15;
  inline bool has_max_pass_hu() const;
  inline void clear_max_pass_hu();
  static const int kMaxPassHuFieldNumber = 15;
  inline ::google::protobuf::int32 max_pass_hu() const;
  inline void set_max_pass_hu(::google::protobuf::int32 value);

  // required int32 room_id = 16;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 16;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo players = 17;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 17;
  inline const ::mahjong_msg::tableinfoMsg_TblPlayInfo& players(int index) const;
  inline ::mahjong_msg::tableinfoMsg_TblPlayInfo* mutable_players(int index);
  inline ::mahjong_msg::tableinfoMsg_TblPlayInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:mahjong_msg.tableinfoMsg)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_base_money();
  inline void clear_has_base_money();
  inline void set_has_min_money();
  inline void clear_has_min_money();
  inline void set_has_cardnums();
  inline void clear_has_cardnums();
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_magicexpressioncost();
  inline void clear_has_magicexpressioncost();
  inline void set_has_dealseatid();
  inline void clear_has_dealseatid();
  inline void set_has_roomfee();
  inline void clear_has_roomfee();
  inline void set_has_auto_giveup();
  inline void clear_has_auto_giveup();
  inline void set_has_round_flag();
  inline void clear_has_round_flag();
  inline void set_has_limit_max_win();
  inline void clear_has_limit_max_win();
  inline void set_has_cli_hb_interval();
  inline void clear_has_cli_hb_interval();
  inline void set_has_pass_hu_twice();
  inline void clear_has_pass_hu_twice();
  inline void set_has_max_pass_hu();
  inline void clear_has_max_pass_hu();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 base_money_;
  ::google::protobuf::int32 min_money_;
  ::google::protobuf::int32 cardnums_;
  ::google::protobuf::int32 robot_;
  ::google::protobuf::int32 magicexpressioncost_;
  ::google::protobuf::int32 dealseatid_;
  ::google::protobuf::int32 roomfee_;
  ::google::protobuf::int32 auto_giveup_;
  ::google::protobuf::int32 round_flag_;
  ::google::protobuf::int32 limit_max_win_;
  ::google::protobuf::int32 cli_hb_interval_;
  ::google::protobuf::int32 pass_hu_twice_;
  ::google::protobuf::int32 max_pass_hu_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo > players_;
  friend void  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_AssignDesc_mahjong_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_mahjong_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static tableinfoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// loginRequest

// required string skey = 1;
inline bool loginRequest::has_skey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void loginRequest::set_has_skey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void loginRequest::clear_has_skey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void loginRequest::clear_skey() {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_->clear();
  }
  clear_has_skey();
}
inline const ::std::string& loginRequest::skey() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginRequest.skey)
  return *skey_;
}
inline void loginRequest::set_skey(const ::std::string& value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.loginRequest.skey)
}
inline void loginRequest::set_skey(const char* value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.loginRequest.skey)
}
inline void loginRequest::set_skey(const char* value, size_t size) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.loginRequest.skey)
}
inline ::std::string* loginRequest::mutable_skey() {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.loginRequest.skey)
  return skey_;
}
inline ::std::string* loginRequest::release_skey() {
  clear_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skey_;
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginRequest::set_allocated_skey(::std::string* skey) {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (skey) {
    set_has_skey();
    skey_ = skey;
  } else {
    clear_has_skey();
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.loginRequest.skey)
}

// required string version = 2;
inline bool loginRequest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void loginRequest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void loginRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void loginRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& loginRequest::version() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginRequest.version)
  return *version_;
}
inline void loginRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.loginRequest.version)
}
inline void loginRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.loginRequest.version)
}
inline void loginRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.loginRequest.version)
}
inline ::std::string* loginRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.loginRequest.version)
  return version_;
}
inline ::std::string* loginRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.loginRequest.version)
}

// optional int32 base_money = 3;
inline bool loginRequest::has_base_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void loginRequest::set_has_base_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void loginRequest::clear_has_base_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void loginRequest::clear_base_money() {
  base_money_ = 0;
  clear_has_base_money();
}
inline ::google::protobuf::int32 loginRequest::base_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginRequest.base_money)
  return base_money_;
}
inline void loginRequest::set_base_money(::google::protobuf::int32 value) {
  set_has_base_money();
  base_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginRequest.base_money)
}

// optional int32 min_money = 4;
inline bool loginRequest::has_min_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void loginRequest::set_has_min_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void loginRequest::clear_has_min_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void loginRequest::clear_min_money() {
  min_money_ = 0;
  clear_has_min_money();
}
inline ::google::protobuf::int32 loginRequest::min_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginRequest.min_money)
  return min_money_;
}
inline void loginRequest::set_min_money(::google::protobuf::int32 value) {
  set_has_min_money();
  min_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginRequest.min_money)
}

// optional int32 room_id = 5;
inline bool loginRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void loginRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void loginRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void loginRequest::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 loginRequest::room_id() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginRequest.room_id)
  return room_id_;
}
inline void loginRequest::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginRequest.room_id)
}

// -------------------------------------------------------------------

// loginResponse

// required int32 vid = 1;
inline bool loginResponse::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void loginResponse::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void loginResponse::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void loginResponse::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 loginResponse::vid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginResponse.vid)
  return vid_;
}
inline void loginResponse::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginResponse.vid)
}

// -------------------------------------------------------------------

// logoutRequest

// optional uint32 uid = 1;
inline bool logoutRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logoutRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logoutRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logoutRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 logoutRequest::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.logoutRequest.uid)
  return uid_;
}
inline void logoutRequest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.logoutRequest.uid)
}

// -------------------------------------------------------------------

// logoutMsg

// required uint32 uid = 1;
inline bool logoutMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logoutMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void logoutMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void logoutMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 logoutMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.logoutMsg.uid)
  return uid_;
}
inline void logoutMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.logoutMsg.uid)
}

// required int32 seatid = 2;
inline bool logoutMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void logoutMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void logoutMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void logoutMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 logoutMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.logoutMsg.seatid)
  return seatid_;
}
inline void logoutMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.logoutMsg.seatid)
}

// required int32 logout_type = 3;
inline bool logoutMsg::has_logout_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void logoutMsg::set_has_logout_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void logoutMsg::clear_has_logout_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void logoutMsg::clear_logout_type() {
  logout_type_ = 0;
  clear_has_logout_type();
}
inline ::google::protobuf::int32 logoutMsg::logout_type() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.logoutMsg.logout_type)
  return logout_type_;
}
inline void logoutMsg::set_logout_type(::google::protobuf::int32 value) {
  set_has_logout_type();
  logout_type_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.logoutMsg.logout_type)
}

// required string alertStr = 4;
inline bool logoutMsg::has_alertstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void logoutMsg::set_has_alertstr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void logoutMsg::clear_has_alertstr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void logoutMsg::clear_alertstr() {
  if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_->clear();
  }
  clear_has_alertstr();
}
inline const ::std::string& logoutMsg::alertstr() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.logoutMsg.alertStr)
  return *alertstr_;
}
inline void logoutMsg::set_alertstr(const ::std::string& value) {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  alertstr_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.logoutMsg.alertStr)
}
inline void logoutMsg::set_alertstr(const char* value) {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  alertstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.logoutMsg.alertStr)
}
inline void logoutMsg::set_alertstr(const char* value, size_t size) {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  alertstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.logoutMsg.alertStr)
}
inline ::std::string* logoutMsg::mutable_alertstr() {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.logoutMsg.alertStr)
  return alertstr_;
}
inline ::std::string* logoutMsg::release_alertstr() {
  clear_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alertstr_;
    alertstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void logoutMsg::set_allocated_alertstr(::std::string* alertstr) {
  if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alertstr_;
  }
  if (alertstr) {
    set_has_alertstr();
    alertstr_ = alertstr;
  } else {
    clear_has_alertstr();
    alertstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.logoutMsg.alertStr)
}

// -------------------------------------------------------------------

// getonlineRequest

// optional uint32 uid = 1;
inline bool getonlineRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getonlineRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getonlineRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getonlineRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 getonlineRequest::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.getonlineRequest.uid)
  return uid_;
}
inline void getonlineRequest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.getonlineRequest.uid)
}

// -------------------------------------------------------------------

// getonlineResponse

// required uint32 online = 1;
inline bool getonlineResponse::has_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getonlineResponse::set_has_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getonlineResponse::clear_has_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getonlineResponse::clear_online() {
  online_ = 0u;
  clear_has_online();
}
inline ::google::protobuf::uint32 getonlineResponse::online() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.getonlineResponse.online)
  return online_;
}
inline void getonlineResponse::set_online(::google::protobuf::uint32 value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.getonlineResponse.online)
}

// required uint32 activecount = 2;
inline bool getonlineResponse::has_activecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getonlineResponse::set_has_activecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getonlineResponse::clear_has_activecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getonlineResponse::clear_activecount() {
  activecount_ = 0u;
  clear_has_activecount();
}
inline ::google::protobuf::uint32 getonlineResponse::activecount() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.getonlineResponse.activecount)
  return activecount_;
}
inline void getonlineResponse::set_activecount(::google::protobuf::uint32 value) {
  set_has_activecount();
  activecount_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.getonlineResponse.activecount)
}

// -------------------------------------------------------------------

// xuanqueRequest

// required int32 quetype = 1;
inline bool xuanqueRequest::has_quetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void xuanqueRequest::set_has_quetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void xuanqueRequest::clear_has_quetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void xuanqueRequest::clear_quetype() {
  quetype_ = 0;
  clear_has_quetype();
}
inline ::google::protobuf::int32 xuanqueRequest::quetype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.xuanqueRequest.quetype)
  return quetype_;
}
inline void xuanqueRequest::set_quetype(::google::protobuf::int32 value) {
  set_has_quetype();
  quetype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.xuanqueRequest.quetype)
}

// -------------------------------------------------------------------

// xuanqueResponse

// optional uint32 uid = 1;
inline bool xuanqueResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void xuanqueResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void xuanqueResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void xuanqueResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 xuanqueResponse::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.xuanqueResponse.uid)
  return uid_;
}
inline void xuanqueResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.xuanqueResponse.uid)
}

// -------------------------------------------------------------------

// huanpaiRequest

// repeated int32 card_value = 1;
inline int huanpaiRequest::card_value_size() const {
  return card_value_.size();
}
inline void huanpaiRequest::clear_card_value() {
  card_value_.Clear();
}
inline ::google::protobuf::int32 huanpaiRequest::card_value(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.huanpaiRequest.card_value)
  return card_value_.Get(index);
}
inline void huanpaiRequest::set_card_value(int index, ::google::protobuf::int32 value) {
  card_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.huanpaiRequest.card_value)
}
inline void huanpaiRequest::add_card_value(::google::protobuf::int32 value) {
  card_value_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.huanpaiRequest.card_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
huanpaiRequest::card_value() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.huanpaiRequest.card_value)
  return card_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
huanpaiRequest::mutable_card_value() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.huanpaiRequest.card_value)
  return &card_value_;
}

// repeated int32 card_index = 2;
inline int huanpaiRequest::card_index_size() const {
  return card_index_.size();
}
inline void huanpaiRequest::clear_card_index() {
  card_index_.Clear();
}
inline ::google::protobuf::int32 huanpaiRequest::card_index(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.huanpaiRequest.card_index)
  return card_index_.Get(index);
}
inline void huanpaiRequest::set_card_index(int index, ::google::protobuf::int32 value) {
  card_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.huanpaiRequest.card_index)
}
inline void huanpaiRequest::add_card_index(::google::protobuf::int32 value) {
  card_index_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.huanpaiRequest.card_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
huanpaiRequest::card_index() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.huanpaiRequest.card_index)
  return card_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
huanpaiRequest::mutable_card_index() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.huanpaiRequest.card_index)
  return &card_index_;
}

// -------------------------------------------------------------------

// huanpaiResponse

// optional uint32 uid = 1;
inline bool huanpaiResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void huanpaiResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void huanpaiResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void huanpaiResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 huanpaiResponse::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.huanpaiResponse.uid)
  return uid_;
}
inline void huanpaiResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.huanpaiResponse.uid)
}

// -------------------------------------------------------------------

// canclerobotRequest

// optional uint32 uid = 1;
inline bool canclerobotRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void canclerobotRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void canclerobotRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void canclerobotRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 canclerobotRequest::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.canclerobotRequest.uid)
  return uid_;
}
inline void canclerobotRequest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.canclerobotRequest.uid)
}

// -------------------------------------------------------------------

// canclerobotResponse

// optional uint32 uid = 1;
inline bool canclerobotResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void canclerobotResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void canclerobotResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void canclerobotResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 canclerobotResponse::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.canclerobotResponse.uid)
  return uid_;
}
inline void canclerobotResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.canclerobotResponse.uid)
}

// -------------------------------------------------------------------

// notifyreadyMsg

// required int32 cd = 1;
inline bool notifyreadyMsg::has_cd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notifyreadyMsg::set_has_cd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notifyreadyMsg::clear_has_cd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notifyreadyMsg::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 notifyreadyMsg::cd() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyreadyMsg.cd)
  return cd_;
}
inline void notifyreadyMsg::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyreadyMsg.cd)
}

// required int32 flag = 2;
inline bool notifyreadyMsg::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notifyreadyMsg::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notifyreadyMsg::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notifyreadyMsg::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 notifyreadyMsg::flag() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyreadyMsg.flag)
  return flag_;
}
inline void notifyreadyMsg::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyreadyMsg.flag)
}

// -------------------------------------------------------------------

// alertMsg

// required string alertStr = 1;
inline bool alertMsg::has_alertstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void alertMsg::set_has_alertstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void alertMsg::clear_has_alertstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void alertMsg::clear_alertstr() {
  if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_->clear();
  }
  clear_has_alertstr();
}
inline const ::std::string& alertMsg::alertstr() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.alertMsg.alertStr)
  return *alertstr_;
}
inline void alertMsg::set_alertstr(const ::std::string& value) {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  alertstr_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.alertMsg.alertStr)
}
inline void alertMsg::set_alertstr(const char* value) {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  alertstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.alertMsg.alertStr)
}
inline void alertMsg::set_alertstr(const char* value, size_t size) {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  alertstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.alertMsg.alertStr)
}
inline ::std::string* alertMsg::mutable_alertstr() {
  set_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alertstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.alertMsg.alertStr)
  return alertstr_;
}
inline ::std::string* alertMsg::release_alertstr() {
  clear_has_alertstr();
  if (alertstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alertstr_;
    alertstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void alertMsg::set_allocated_alertstr(::std::string* alertstr) {
  if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alertstr_;
  }
  if (alertstr) {
    set_has_alertstr();
    alertstr_ = alertstr;
  } else {
    clear_has_alertstr();
    alertstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.alertMsg.alertStr)
}

// -------------------------------------------------------------------

// readyRequest

// optional uint32 uid = 1;
inline bool readyRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void readyRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void readyRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void readyRequest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 readyRequest::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.readyRequest.uid)
  return uid_;
}
inline void readyRequest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.readyRequest.uid)
}

// -------------------------------------------------------------------

// goreadyMsg

// required int32 seatid = 1;
inline bool goreadyMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void goreadyMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void goreadyMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void goreadyMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 goreadyMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.goreadyMsg.seatid)
  return seatid_;
}
inline void goreadyMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.goreadyMsg.seatid)
}

// required int32 uid = 2;
inline bool goreadyMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void goreadyMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void goreadyMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void goreadyMsg::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 goreadyMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.goreadyMsg.uid)
  return uid_;
}
inline void goreadyMsg::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.goreadyMsg.uid)
}

// -------------------------------------------------------------------

// notifygamestartMsg

// required int32 seatid = 1;
inline bool notifygamestartMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notifygamestartMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notifygamestartMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notifygamestartMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 notifygamestartMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.seatid)
  return seatid_;
}
inline void notifygamestartMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.seatid)
}

// required int32 bseatid = 2;
inline bool notifygamestartMsg::has_bseatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notifygamestartMsg::set_has_bseatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notifygamestartMsg::clear_has_bseatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notifygamestartMsg::clear_bseatid() {
  bseatid_ = 0;
  clear_has_bseatid();
}
inline ::google::protobuf::int32 notifygamestartMsg::bseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.bseatid)
  return bseatid_;
}
inline void notifygamestartMsg::set_bseatid(::google::protobuf::int32 value) {
  set_has_bseatid();
  bseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.bseatid)
}

// required uint32 buid = 3;
inline bool notifygamestartMsg::has_buid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notifygamestartMsg::set_has_buid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notifygamestartMsg::clear_has_buid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notifygamestartMsg::clear_buid() {
  buid_ = 0u;
  clear_has_buid();
}
inline ::google::protobuf::uint32 notifygamestartMsg::buid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.buid)
  return buid_;
}
inline void notifygamestartMsg::set_buid(::google::protobuf::uint32 value) {
  set_has_buid();
  buid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.buid)
}

// required int32 p1_num = 4;
inline bool notifygamestartMsg::has_p1_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void notifygamestartMsg::set_has_p1_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void notifygamestartMsg::clear_has_p1_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void notifygamestartMsg::clear_p1_num() {
  p1_num_ = 0;
  clear_has_p1_num();
}
inline ::google::protobuf::int32 notifygamestartMsg::p1_num() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.p1_num)
  return p1_num_;
}
inline void notifygamestartMsg::set_p1_num(::google::protobuf::int32 value) {
  set_has_p1_num();
  p1_num_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.p1_num)
}

// required int32 p2_num = 5;
inline bool notifygamestartMsg::has_p2_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void notifygamestartMsg::set_has_p2_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void notifygamestartMsg::clear_has_p2_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void notifygamestartMsg::clear_p2_num() {
  p2_num_ = 0;
  clear_has_p2_num();
}
inline ::google::protobuf::int32 notifygamestartMsg::p2_num() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.p2_num)
  return p2_num_;
}
inline void notifygamestartMsg::set_p2_num(::google::protobuf::int32 value) {
  set_has_p2_num();
  p2_num_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.p2_num)
}

// repeated int32 cards = 6;
inline int notifygamestartMsg::cards_size() const {
  return cards_.size();
}
inline void notifygamestartMsg::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 notifygamestartMsg::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.cards)
  return cards_.Get(index);
}
inline void notifygamestartMsg::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.cards)
}
inline void notifygamestartMsg::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.notifygamestartMsg.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
notifygamestartMsg::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.notifygamestartMsg.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
notifygamestartMsg::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.notifygamestartMsg.cards)
  return &cards_;
}

// optional int32 train_money = 7;
inline bool notifygamestartMsg::has_train_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void notifygamestartMsg::set_has_train_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void notifygamestartMsg::clear_has_train_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void notifygamestartMsg::clear_train_money() {
  train_money_ = 0;
  clear_has_train_money();
}
inline ::google::protobuf::int32 notifygamestartMsg::train_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifygamestartMsg.train_money)
  return train_money_;
}
inline void notifygamestartMsg::set_train_money(::google::protobuf::int32 value) {
  set_has_train_money();
  train_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifygamestartMsg.train_money)
}

// -------------------------------------------------------------------

// broadmoneyMsg

// repeated int32 players_money = 1;
inline int broadmoneyMsg::players_money_size() const {
  return players_money_.size();
}
inline void broadmoneyMsg::clear_players_money() {
  players_money_.Clear();
}
inline ::google::protobuf::int32 broadmoneyMsg::players_money(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.broadmoneyMsg.players_money)
  return players_money_.Get(index);
}
inline void broadmoneyMsg::set_players_money(int index, ::google::protobuf::int32 value) {
  players_money_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.broadmoneyMsg.players_money)
}
inline void broadmoneyMsg::add_players_money(::google::protobuf::int32 value) {
  players_money_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.broadmoneyMsg.players_money)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
broadmoneyMsg::players_money() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.broadmoneyMsg.players_money)
  return players_money_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
broadmoneyMsg::mutable_players_money() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.broadmoneyMsg.players_money)
  return &players_money_;
}

// -------------------------------------------------------------------

// replaceflowerMsg

// required int32 seatid = 1;
inline bool replaceflowerMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void replaceflowerMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void replaceflowerMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void replaceflowerMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 replaceflowerMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.replaceflowerMsg.seatid)
  return seatid_;
}
inline void replaceflowerMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.replaceflowerMsg.seatid)
}

// repeated int32 take_cards = 2;
inline int replaceflowerMsg::take_cards_size() const {
  return take_cards_.size();
}
inline void replaceflowerMsg::clear_take_cards() {
  take_cards_.Clear();
}
inline ::google::protobuf::int32 replaceflowerMsg::take_cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.replaceflowerMsg.take_cards)
  return take_cards_.Get(index);
}
inline void replaceflowerMsg::set_take_cards(int index, ::google::protobuf::int32 value) {
  take_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.replaceflowerMsg.take_cards)
}
inline void replaceflowerMsg::add_take_cards(::google::protobuf::int32 value) {
  take_cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.replaceflowerMsg.take_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
replaceflowerMsg::take_cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.replaceflowerMsg.take_cards)
  return take_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
replaceflowerMsg::mutable_take_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.replaceflowerMsg.take_cards)
  return &take_cards_;
}

// repeated int32 flower_cards = 3;
inline int replaceflowerMsg::flower_cards_size() const {
  return flower_cards_.size();
}
inline void replaceflowerMsg::clear_flower_cards() {
  flower_cards_.Clear();
}
inline ::google::protobuf::int32 replaceflowerMsg::flower_cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.replaceflowerMsg.flower_cards)
  return flower_cards_.Get(index);
}
inline void replaceflowerMsg::set_flower_cards(int index, ::google::protobuf::int32 value) {
  flower_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.replaceflowerMsg.flower_cards)
}
inline void replaceflowerMsg::add_flower_cards(::google::protobuf::int32 value) {
  flower_cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.replaceflowerMsg.flower_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
replaceflowerMsg::flower_cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.replaceflowerMsg.flower_cards)
  return flower_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
replaceflowerMsg::mutable_flower_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.replaceflowerMsg.flower_cards)
  return &flower_cards_;
}

// optional int32 start_game = 4;
inline bool replaceflowerMsg::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void replaceflowerMsg::set_has_start_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void replaceflowerMsg::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void replaceflowerMsg::clear_start_game() {
  start_game_ = 0;
  clear_has_start_game();
}
inline ::google::protobuf::int32 replaceflowerMsg::start_game() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.replaceflowerMsg.start_game)
  return start_game_;
}
inline void replaceflowerMsg::set_start_game(::google::protobuf::int32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.replaceflowerMsg.start_game)
}

// -------------------------------------------------------------------

// notifyhuanpaiMsg

// required int32 seatid = 1;
inline bool notifyhuanpaiMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notifyhuanpaiMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notifyhuanpaiMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notifyhuanpaiMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 notifyhuanpaiMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhuanpaiMsg.seatid)
  return seatid_;
}
inline void notifyhuanpaiMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhuanpaiMsg.seatid)
}

// required uint32 state = 2;
inline bool notifyhuanpaiMsg::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notifyhuanpaiMsg::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notifyhuanpaiMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notifyhuanpaiMsg::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 notifyhuanpaiMsg::state() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhuanpaiMsg.state)
  return state_;
}
inline void notifyhuanpaiMsg::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhuanpaiMsg.state)
}

// required int32 cd = 3;
inline bool notifyhuanpaiMsg::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notifyhuanpaiMsg::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notifyhuanpaiMsg::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notifyhuanpaiMsg::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 notifyhuanpaiMsg::cd() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhuanpaiMsg.cd)
  return cd_;
}
inline void notifyhuanpaiMsg::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhuanpaiMsg.cd)
}

// repeated int32 hpinfos = 4;
inline int notifyhuanpaiMsg::hpinfos_size() const {
  return hpinfos_.size();
}
inline void notifyhuanpaiMsg::clear_hpinfos() {
  hpinfos_.Clear();
}
inline ::google::protobuf::int32 notifyhuanpaiMsg::hpinfos(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhuanpaiMsg.hpinfos)
  return hpinfos_.Get(index);
}
inline void notifyhuanpaiMsg::set_hpinfos(int index, ::google::protobuf::int32 value) {
  hpinfos_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhuanpaiMsg.hpinfos)
}
inline void notifyhuanpaiMsg::add_hpinfos(::google::protobuf::int32 value) {
  hpinfos_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.notifyhuanpaiMsg.hpinfos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
notifyhuanpaiMsg::hpinfos() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.notifyhuanpaiMsg.hpinfos)
  return hpinfos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
notifyhuanpaiMsg::mutable_hpinfos() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.notifyhuanpaiMsg.hpinfos)
  return &hpinfos_;
}

// -------------------------------------------------------------------

// notifyxuanqueMsg

// required int32 seatid = 1;
inline bool notifyxuanqueMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notifyxuanqueMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notifyxuanqueMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notifyxuanqueMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 notifyxuanqueMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxuanqueMsg.seatid)
  return seatid_;
}
inline void notifyxuanqueMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxuanqueMsg.seatid)
}

// required uint32 state = 2;
inline bool notifyxuanqueMsg::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notifyxuanqueMsg::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notifyxuanqueMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notifyxuanqueMsg::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 notifyxuanqueMsg::state() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxuanqueMsg.state)
  return state_;
}
inline void notifyxuanqueMsg::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxuanqueMsg.state)
}

// required int32 cd = 3;
inline bool notifyxuanqueMsg::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notifyxuanqueMsg::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notifyxuanqueMsg::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notifyxuanqueMsg::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 notifyxuanqueMsg::cd() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxuanqueMsg.cd)
  return cd_;
}
inline void notifyxuanqueMsg::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxuanqueMsg.cd)
}

// required int32 quetype = 4;
inline bool notifyxuanqueMsg::has_quetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void notifyxuanqueMsg::set_has_quetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void notifyxuanqueMsg::clear_has_quetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void notifyxuanqueMsg::clear_quetype() {
  quetype_ = 0;
  clear_has_quetype();
}
inline ::google::protobuf::int32 notifyxuanqueMsg::quetype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxuanqueMsg.quetype)
  return quetype_;
}
inline void notifyxuanqueMsg::set_quetype(::google::protobuf::int32 value) {
  set_has_quetype();
  quetype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxuanqueMsg.quetype)
}

// -------------------------------------------------------------------

// notifyxqresultMsg_XQResult

// required int32 seatid = 1;
inline bool notifyxqresultMsg_XQResult::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notifyxqresultMsg_XQResult::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notifyxqresultMsg_XQResult::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notifyxqresultMsg_XQResult::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 notifyxqresultMsg_XQResult::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxqresultMsg.XQResult.seatid)
  return seatid_;
}
inline void notifyxqresultMsg_XQResult::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxqresultMsg.XQResult.seatid)
}

// required uint32 uid = 2;
inline bool notifyxqresultMsg_XQResult::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notifyxqresultMsg_XQResult::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notifyxqresultMsg_XQResult::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notifyxqresultMsg_XQResult::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 notifyxqresultMsg_XQResult::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxqresultMsg.XQResult.uid)
  return uid_;
}
inline void notifyxqresultMsg_XQResult::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxqresultMsg.XQResult.uid)
}

// required int32 quetype = 3;
inline bool notifyxqresultMsg_XQResult::has_quetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notifyxqresultMsg_XQResult::set_has_quetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notifyxqresultMsg_XQResult::clear_has_quetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notifyxqresultMsg_XQResult::clear_quetype() {
  quetype_ = 0;
  clear_has_quetype();
}
inline ::google::protobuf::int32 notifyxqresultMsg_XQResult::quetype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxqresultMsg.XQResult.quetype)
  return quetype_;
}
inline void notifyxqresultMsg_XQResult::set_quetype(::google::protobuf::int32 value) {
  set_has_quetype();
  quetype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyxqresultMsg.XQResult.quetype)
}

// -------------------------------------------------------------------

// notifyxqresultMsg

// repeated .mahjong_msg.notifyxqresultMsg.XQResult xq_result = 1;
inline int notifyxqresultMsg::xq_result_size() const {
  return xq_result_.size();
}
inline void notifyxqresultMsg::clear_xq_result() {
  xq_result_.Clear();
}
inline const ::mahjong_msg::notifyxqresultMsg_XQResult& notifyxqresultMsg::xq_result(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyxqresultMsg.xq_result)
  return xq_result_.Get(index);
}
inline ::mahjong_msg::notifyxqresultMsg_XQResult* notifyxqresultMsg::mutable_xq_result(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.notifyxqresultMsg.xq_result)
  return xq_result_.Mutable(index);
}
inline ::mahjong_msg::notifyxqresultMsg_XQResult* notifyxqresultMsg::add_xq_result() {
  // @@protoc_insertion_point(field_add:mahjong_msg.notifyxqresultMsg.xq_result)
  return xq_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::notifyxqresultMsg_XQResult >&
notifyxqresultMsg::xq_result() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.notifyxqresultMsg.xq_result)
  return xq_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::notifyxqresultMsg_XQResult >*
notifyxqresultMsg::mutable_xq_result() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.notifyxqresultMsg.xq_result)
  return &xq_result_;
}

// -------------------------------------------------------------------

// notifyhpresultMsg

// repeated int32 hpinfos_index = 1;
inline int notifyhpresultMsg::hpinfos_index_size() const {
  return hpinfos_index_.size();
}
inline void notifyhpresultMsg::clear_hpinfos_index() {
  hpinfos_index_.Clear();
}
inline ::google::protobuf::int32 notifyhpresultMsg::hpinfos_index(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhpresultMsg.hpinfos_index)
  return hpinfos_index_.Get(index);
}
inline void notifyhpresultMsg::set_hpinfos_index(int index, ::google::protobuf::int32 value) {
  hpinfos_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhpresultMsg.hpinfos_index)
}
inline void notifyhpresultMsg::add_hpinfos_index(::google::protobuf::int32 value) {
  hpinfos_index_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.notifyhpresultMsg.hpinfos_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
notifyhpresultMsg::hpinfos_index() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.notifyhpresultMsg.hpinfos_index)
  return hpinfos_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
notifyhpresultMsg::mutable_hpinfos_index() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.notifyhpresultMsg.hpinfos_index)
  return &hpinfos_index_;
}

// repeated int32 hpinfos_value = 2;
inline int notifyhpresultMsg::hpinfos_value_size() const {
  return hpinfos_value_.size();
}
inline void notifyhpresultMsg::clear_hpinfos_value() {
  hpinfos_value_.Clear();
}
inline ::google::protobuf::int32 notifyhpresultMsg::hpinfos_value(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhpresultMsg.hpinfos_value)
  return hpinfos_value_.Get(index);
}
inline void notifyhpresultMsg::set_hpinfos_value(int index, ::google::protobuf::int32 value) {
  hpinfos_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhpresultMsg.hpinfos_value)
}
inline void notifyhpresultMsg::add_hpinfos_value(::google::protobuf::int32 value) {
  hpinfos_value_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.notifyhpresultMsg.hpinfos_value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
notifyhpresultMsg::hpinfos_value() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.notifyhpresultMsg.hpinfos_value)
  return hpinfos_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
notifyhpresultMsg::mutable_hpinfos_value() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.notifyhpresultMsg.hpinfos_value)
  return &hpinfos_value_;
}

// repeated int32 getinfos = 3;
inline int notifyhpresultMsg::getinfos_size() const {
  return getinfos_.size();
}
inline void notifyhpresultMsg::clear_getinfos() {
  getinfos_.Clear();
}
inline ::google::protobuf::int32 notifyhpresultMsg::getinfos(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifyhpresultMsg.getinfos)
  return getinfos_.Get(index);
}
inline void notifyhpresultMsg::set_getinfos(int index, ::google::protobuf::int32 value) {
  getinfos_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.notifyhpresultMsg.getinfos)
}
inline void notifyhpresultMsg::add_getinfos(::google::protobuf::int32 value) {
  getinfos_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.notifyhpresultMsg.getinfos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
notifyhpresultMsg::getinfos() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.notifyhpresultMsg.getinfos)
  return getinfos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
notifyhpresultMsg::mutable_getinfos() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.notifyhpresultMsg.getinfos)
  return &getinfos_;
}

// -------------------------------------------------------------------

// loginMsg

// required int32 seatid = 2;
inline bool loginMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void loginMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void loginMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void loginMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 loginMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.seatid)
  return seatid_;
}
inline void loginMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.seatid)
}

// required int32 betting = 3;
inline bool loginMsg::has_betting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void loginMsg::set_has_betting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void loginMsg::clear_has_betting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void loginMsg::clear_betting() {
  betting_ = 0;
  clear_has_betting();
}
inline ::google::protobuf::int32 loginMsg::betting() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.betting)
  return betting_;
}
inline void loginMsg::set_betting(::google::protobuf::int32 value) {
  set_has_betting();
  betting_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.betting)
}

// required string name = 4;
inline bool loginMsg::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void loginMsg::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void loginMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void loginMsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& loginMsg::name() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.name)
  return *name_;
}
inline void loginMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.name)
}
inline void loginMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.loginMsg.name)
}
inline void loginMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.loginMsg.name)
}
inline ::std::string* loginMsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.loginMsg.name)
  return name_;
}
inline ::std::string* loginMsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginMsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.loginMsg.name)
}

// required int32 sex = 5;
inline bool loginMsg::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void loginMsg::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void loginMsg::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void loginMsg::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 loginMsg::sex() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.sex)
  return sex_;
}
inline void loginMsg::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.sex)
}

// required string avatar = 6;
inline bool loginMsg::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void loginMsg::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void loginMsg::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void loginMsg::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& loginMsg::avatar() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.avatar)
  return *avatar_;
}
inline void loginMsg::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.avatar)
}
inline void loginMsg::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.loginMsg.avatar)
}
inline void loginMsg::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.loginMsg.avatar)
}
inline ::std::string* loginMsg::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.loginMsg.avatar)
  return avatar_;
}
inline ::std::string* loginMsg::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginMsg::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.loginMsg.avatar)
}

// required string avatar_1 = 7;
inline bool loginMsg::has_avatar_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void loginMsg::set_has_avatar_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void loginMsg::clear_has_avatar_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void loginMsg::clear_avatar_1() {
  if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_->clear();
  }
  clear_has_avatar_1();
}
inline const ::std::string& loginMsg::avatar_1() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.avatar_1)
  return *avatar_1_;
}
inline void loginMsg::set_avatar_1(const ::std::string& value) {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  avatar_1_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.avatar_1)
}
inline void loginMsg::set_avatar_1(const char* value) {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  avatar_1_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.loginMsg.avatar_1)
}
inline void loginMsg::set_avatar_1(const char* value, size_t size) {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  avatar_1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.loginMsg.avatar_1)
}
inline ::std::string* loginMsg::mutable_avatar_1() {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.loginMsg.avatar_1)
  return avatar_1_;
}
inline ::std::string* loginMsg::release_avatar_1() {
  clear_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_1_;
    avatar_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginMsg::set_allocated_avatar_1(::std::string* avatar_1) {
  if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_1_;
  }
  if (avatar_1) {
    set_has_avatar_1();
    avatar_1_ = avatar_1;
  } else {
    clear_has_avatar_1();
    avatar_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.loginMsg.avatar_1)
}

// required int32 max_fan = 8;
inline bool loginMsg::has_max_fan() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void loginMsg::set_has_max_fan() {
  _has_bits_[0] |= 0x00000040u;
}
inline void loginMsg::clear_has_max_fan() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void loginMsg::clear_max_fan() {
  max_fan_ = 0;
  clear_has_max_fan();
}
inline ::google::protobuf::int32 loginMsg::max_fan() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.max_fan)
  return max_fan_;
}
inline void loginMsg::set_max_fan(::google::protobuf::int32 value) {
  set_has_max_fan();
  max_fan_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.max_fan)
}

// required int32 loveliness_amt = 9;
inline bool loginMsg::has_loveliness_amt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void loginMsg::set_has_loveliness_amt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void loginMsg::clear_has_loveliness_amt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void loginMsg::clear_loveliness_amt() {
  loveliness_amt_ = 0;
  clear_has_loveliness_amt();
}
inline ::google::protobuf::int32 loginMsg::loveliness_amt() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.loveliness_amt)
  return loveliness_amt_;
}
inline void loginMsg::set_loveliness_amt(::google::protobuf::int32 value) {
  set_has_loveliness_amt();
  loveliness_amt_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.loveliness_amt)
}

// required int64 total_win_money = 10;
inline bool loginMsg::has_total_win_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void loginMsg::set_has_total_win_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void loginMsg::clear_has_total_win_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void loginMsg::clear_total_win_money() {
  total_win_money_ = GOOGLE_LONGLONG(0);
  clear_has_total_win_money();
}
inline ::google::protobuf::int64 loginMsg::total_win_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.total_win_money)
  return total_win_money_;
}
inline void loginMsg::set_total_win_money(::google::protobuf::int64 value) {
  set_has_total_win_money();
  total_win_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.total_win_money)
}

// required int64 money = 11;
inline bool loginMsg::has_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void loginMsg::set_has_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void loginMsg::clear_has_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void loginMsg::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 loginMsg::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.money)
  return money_;
}
inline void loginMsg::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.money)
}

// required int64 train_money = 12;
inline bool loginMsg::has_train_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void loginMsg::set_has_train_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void loginMsg::clear_has_train_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void loginMsg::clear_train_money() {
  train_money_ = GOOGLE_LONGLONG(0);
  clear_has_train_money();
}
inline ::google::protobuf::int64 loginMsg::train_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.train_money)
  return train_money_;
}
inline void loginMsg::set_train_money(::google::protobuf::int64 value) {
  set_has_train_money();
  train_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.train_money)
}

// required int64 taste_money = 13;
inline bool loginMsg::has_taste_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void loginMsg::set_has_taste_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void loginMsg::clear_has_taste_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void loginMsg::clear_taste_money() {
  taste_money_ = GOOGLE_LONGLONG(0);
  clear_has_taste_money();
}
inline ::google::protobuf::int64 loginMsg::taste_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.taste_money)
  return taste_money_;
}
inline void loginMsg::set_taste_money(::google::protobuf::int64 value) {
  set_has_taste_money();
  taste_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.taste_money)
}

// required int32 total_board = 14;
inline bool loginMsg::has_total_board() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void loginMsg::set_has_total_board() {
  _has_bits_[0] |= 0x00001000u;
}
inline void loginMsg::clear_has_total_board() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void loginMsg::clear_total_board() {
  total_board_ = 0;
  clear_has_total_board();
}
inline ::google::protobuf::int32 loginMsg::total_board() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.total_board)
  return total_board_;
}
inline void loginMsg::set_total_board(::google::protobuf::int32 value) {
  set_has_total_board();
  total_board_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.total_board)
}

// required int32 total_win = 15;
inline bool loginMsg::has_total_win() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void loginMsg::set_has_total_win() {
  _has_bits_[0] |= 0x00002000u;
}
inline void loginMsg::clear_has_total_win() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void loginMsg::clear_total_win() {
  total_win_ = 0;
  clear_has_total_win();
}
inline ::google::protobuf::int32 loginMsg::total_win() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.total_win)
  return total_win_;
}
inline void loginMsg::set_total_win(::google::protobuf::int32 value) {
  set_has_total_win();
  total_win_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.total_win)
}

// required int32 vlevel = 16;
inline bool loginMsg::has_vlevel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void loginMsg::set_has_vlevel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void loginMsg::clear_has_vlevel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void loginMsg::clear_vlevel() {
  vlevel_ = 0;
  clear_has_vlevel();
}
inline ::google::protobuf::int32 loginMsg::vlevel() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.vlevel)
  return vlevel_;
}
inline void loginMsg::set_vlevel(::google::protobuf::int32 value) {
  set_has_vlevel();
  vlevel_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.vlevel)
}

// required string ps = 17;
inline bool loginMsg::has_ps() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void loginMsg::set_has_ps() {
  _has_bits_[0] |= 0x00008000u;
}
inline void loginMsg::clear_has_ps() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void loginMsg::clear_ps() {
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_->clear();
  }
  clear_has_ps();
}
inline const ::std::string& loginMsg::ps() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.loginMsg.ps)
  return *ps_;
}
inline void loginMsg::set_ps(const ::std::string& value) {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  ps_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.loginMsg.ps)
}
inline void loginMsg::set_ps(const char* value) {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  ps_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.loginMsg.ps)
}
inline void loginMsg::set_ps(const char* value, size_t size) {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  ps_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.loginMsg.ps)
}
inline ::std::string* loginMsg::mutable_ps() {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.loginMsg.ps)
  return ps_;
}
inline ::std::string* loginMsg::release_ps() {
  clear_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ps_;
    ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loginMsg::set_allocated_ps(::std::string* ps) {
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ps_;
  }
  if (ps) {
    set_has_ps();
    ps_ = ps;
  } else {
    clear_has_ps();
    ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.loginMsg.ps)
}

// -------------------------------------------------------------------

// dealcardRequest

// required int32 dtype = 1;
inline bool dealcardRequest::has_dtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dealcardRequest::set_has_dtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dealcardRequest::clear_has_dtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dealcardRequest::clear_dtype() {
  dtype_ = 0;
  clear_has_dtype();
}
inline ::google::protobuf::int32 dealcardRequest::dtype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardRequest.dtype)
  return dtype_;
}
inline void dealcardRequest::set_dtype(::google::protobuf::int32 value) {
  set_has_dtype();
  dtype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardRequest.dtype)
}

// required int32 cardv = 2;
inline bool dealcardRequest::has_cardv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dealcardRequest::set_has_cardv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dealcardRequest::clear_has_cardv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dealcardRequest::clear_cardv() {
  cardv_ = 0;
  clear_has_cardv();
}
inline ::google::protobuf::int32 dealcardRequest::cardv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardRequest.cardv)
  return cardv_;
}
inline void dealcardRequest::set_cardv(::google::protobuf::int32 value) {
  set_has_cardv();
  cardv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardRequest.cardv)
}

// required int32 seatid = 3;
inline bool dealcardRequest::has_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dealcardRequest::set_has_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dealcardRequest::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dealcardRequest::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 dealcardRequest::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardRequest.seatid)
  return seatid_;
}
inline void dealcardRequest::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardRequest.seatid)
}

// required int32 index = 4;
inline bool dealcardRequest::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dealcardRequest::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dealcardRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dealcardRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 dealcardRequest::index() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardRequest.index)
  return index_;
}
inline void dealcardRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardRequest.index)
}

// -------------------------------------------------------------------

// dealcardResponse

// optional uint32 uid = 1;
inline bool dealcardResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dealcardResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dealcardResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dealcardResponse::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 dealcardResponse::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardResponse.uid)
  return uid_;
}
inline void dealcardResponse::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardResponse.uid)
}

// -------------------------------------------------------------------

// selfdealMsg_EatCard

// repeated int32 cards = 1;
inline int selfdealMsg_EatCard::cards_size() const {
  return cards_.size();
}
inline void selfdealMsg_EatCard::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 selfdealMsg_EatCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.EatCard.cards)
  return cards_.Get(index);
}
inline void selfdealMsg_EatCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.EatCard.cards)
}
inline void selfdealMsg_EatCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.selfdealMsg.EatCard.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
selfdealMsg_EatCard::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.selfdealMsg.EatCard.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
selfdealMsg_EatCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.selfdealMsg.EatCard.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// selfdealMsg

// required int32 seatid = 1;
inline bool selfdealMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void selfdealMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void selfdealMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void selfdealMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 selfdealMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.seatid)
  return seatid_;
}
inline void selfdealMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.seatid)
}

// required int32 ftype = 2;
inline bool selfdealMsg::has_ftype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void selfdealMsg::set_has_ftype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void selfdealMsg::clear_has_ftype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void selfdealMsg::clear_ftype() {
  ftype_ = 0;
  clear_has_ftype();
}
inline ::google::protobuf::int32 selfdealMsg::ftype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.ftype)
  return ftype_;
}
inline void selfdealMsg::set_ftype(::google::protobuf::int32 value) {
  set_has_ftype();
  ftype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.ftype)
}

// required int64 money = 3;
inline bool selfdealMsg::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void selfdealMsg::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void selfdealMsg::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void selfdealMsg::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 selfdealMsg::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.money)
  return money_;
}
inline void selfdealMsg::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.money)
}

// required int32 cardnums = 4;
inline bool selfdealMsg::has_cardnums() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void selfdealMsg::set_has_cardnums() {
  _has_bits_[0] |= 0x00000008u;
}
inline void selfdealMsg::clear_has_cardnums() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void selfdealMsg::clear_cardnums() {
  cardnums_ = 0;
  clear_has_cardnums();
}
inline ::google::protobuf::int32 selfdealMsg::cardnums() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.cardnums)
  return cardnums_;
}
inline void selfdealMsg::set_cardnums(::google::protobuf::int32 value) {
  set_has_cardnums();
  cardnums_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.cardnums)
}

// required int32 cd = 5;
inline bool selfdealMsg::has_cd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void selfdealMsg::set_has_cd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void selfdealMsg::clear_has_cd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void selfdealMsg::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 selfdealMsg::cd() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.cd)
  return cd_;
}
inline void selfdealMsg::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.cd)
}

// required int32 t_cardv = 6;
inline bool selfdealMsg::has_t_cardv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void selfdealMsg::set_has_t_cardv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void selfdealMsg::clear_has_t_cardv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void selfdealMsg::clear_t_cardv() {
  t_cardv_ = 0;
  clear_has_t_cardv();
}
inline ::google::protobuf::int32 selfdealMsg::t_cardv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.t_cardv)
  return t_cardv_;
}
inline void selfdealMsg::set_t_cardv(::google::protobuf::int32 value) {
  set_has_t_cardv();
  t_cardv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.t_cardv)
}

// required int32 cardv = 7;
inline bool selfdealMsg::has_cardv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void selfdealMsg::set_has_cardv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void selfdealMsg::clear_has_cardv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void selfdealMsg::clear_cardv() {
  cardv_ = 0;
  clear_has_cardv();
}
inline ::google::protobuf::int32 selfdealMsg::cardv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.cardv)
  return cardv_;
}
inline void selfdealMsg::set_cardv(::google::protobuf::int32 value) {
  set_has_cardv();
  cardv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.cardv)
}

// repeated int32 dealinfos = 8;
inline int selfdealMsg::dealinfos_size() const {
  return dealinfos_.size();
}
inline void selfdealMsg::clear_dealinfos() {
  dealinfos_.Clear();
}
inline ::google::protobuf::int32 selfdealMsg::dealinfos(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.dealinfos)
  return dealinfos_.Get(index);
}
inline void selfdealMsg::set_dealinfos(int index, ::google::protobuf::int32 value) {
  dealinfos_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.dealinfos)
}
inline void selfdealMsg::add_dealinfos(::google::protobuf::int32 value) {
  dealinfos_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.selfdealMsg.dealinfos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
selfdealMsg::dealinfos() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.selfdealMsg.dealinfos)
  return dealinfos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
selfdealMsg::mutable_dealinfos() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.selfdealMsg.dealinfos)
  return &dealinfos_;
}

// repeated int32 cards = 9;
inline int selfdealMsg::cards_size() const {
  return cards_.size();
}
inline void selfdealMsg::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 selfdealMsg::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.cards)
  return cards_.Get(index);
}
inline void selfdealMsg::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.cards)
}
inline void selfdealMsg::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.selfdealMsg.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
selfdealMsg::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.selfdealMsg.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
selfdealMsg::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.selfdealMsg.cards)
  return &cards_;
}

// repeated .mahjong_msg.selfdealMsg.EatCard eatcards = 10;
inline int selfdealMsg::eatcards_size() const {
  return eatcards_.size();
}
inline void selfdealMsg::clear_eatcards() {
  eatcards_.Clear();
}
inline const ::mahjong_msg::selfdealMsg_EatCard& selfdealMsg::eatcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.eatcards)
  return eatcards_.Get(index);
}
inline ::mahjong_msg::selfdealMsg_EatCard* selfdealMsg::mutable_eatcards(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.selfdealMsg.eatcards)
  return eatcards_.Mutable(index);
}
inline ::mahjong_msg::selfdealMsg_EatCard* selfdealMsg::add_eatcards() {
  // @@protoc_insertion_point(field_add:mahjong_msg.selfdealMsg.eatcards)
  return eatcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::selfdealMsg_EatCard >&
selfdealMsg::eatcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.selfdealMsg.eatcards)
  return eatcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::selfdealMsg_EatCard >*
selfdealMsg::mutable_eatcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.selfdealMsg.eatcards)
  return &eatcards_;
}

// required uint32 uid = 11;
inline bool selfdealMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void selfdealMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void selfdealMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void selfdealMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 selfdealMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.uid)
  return uid_;
}
inline void selfdealMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.uid)
}

// required int32 train_money = 12;
inline bool selfdealMsg::has_train_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void selfdealMsg::set_has_train_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void selfdealMsg::clear_has_train_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void selfdealMsg::clear_train_money() {
  train_money_ = 0;
  clear_has_train_money();
}
inline ::google::protobuf::int32 selfdealMsg::train_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.train_money)
  return train_money_;
}
inline void selfdealMsg::set_train_money(::google::protobuf::int32 value) {
  set_has_train_money();
  train_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.train_money)
}

// required int32 taste_money = 13;
inline bool selfdealMsg::has_taste_money() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void selfdealMsg::set_has_taste_money() {
  _has_bits_[0] |= 0x00001000u;
}
inline void selfdealMsg::clear_has_taste_money() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void selfdealMsg::clear_taste_money() {
  taste_money_ = 0;
  clear_has_taste_money();
}
inline ::google::protobuf::int32 selfdealMsg::taste_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.taste_money)
  return taste_money_;
}
inline void selfdealMsg::set_taste_money(::google::protobuf::int32 value) {
  set_has_taste_money();
  taste_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.taste_money)
}

// optional int32 pengcv = 14;
inline bool selfdealMsg::has_pengcv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void selfdealMsg::set_has_pengcv() {
  _has_bits_[0] |= 0x00002000u;
}
inline void selfdealMsg::clear_has_pengcv() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void selfdealMsg::clear_pengcv() {
  pengcv_ = 0;
  clear_has_pengcv();
}
inline ::google::protobuf::int32 selfdealMsg::pengcv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.pengcv)
  return pengcv_;
}
inline void selfdealMsg::set_pengcv(::google::protobuf::int32 value) {
  set_has_pengcv();
  pengcv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.pengcv)
}

// optional int32 other_t_cardv = 15;
inline bool selfdealMsg::has_other_t_cardv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void selfdealMsg::set_has_other_t_cardv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void selfdealMsg::clear_has_other_t_cardv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void selfdealMsg::clear_other_t_cardv() {
  other_t_cardv_ = 0;
  clear_has_other_t_cardv();
}
inline ::google::protobuf::int32 selfdealMsg::other_t_cardv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.other_t_cardv)
  return other_t_cardv_;
}
inline void selfdealMsg::set_other_t_cardv(::google::protobuf::int32 value) {
  set_has_other_t_cardv();
  other_t_cardv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.other_t_cardv)
}

// optional int32 other_cardv = 16;
inline bool selfdealMsg::has_other_cardv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void selfdealMsg::set_has_other_cardv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void selfdealMsg::clear_has_other_cardv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void selfdealMsg::clear_other_cardv() {
  other_cardv_ = 0;
  clear_has_other_cardv();
}
inline ::google::protobuf::int32 selfdealMsg::other_cardv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.selfdealMsg.other_cardv)
  return other_cardv_;
}
inline void selfdealMsg::set_other_cardv(::google::protobuf::int32 value) {
  set_has_other_cardv();
  other_cardv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.selfdealMsg.other_cardv)
}

// -------------------------------------------------------------------

// notifynextdealMsg

// required uint32 uid = 1;
inline bool notifynextdealMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void notifynextdealMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void notifynextdealMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void notifynextdealMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 notifynextdealMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifynextdealMsg.uid)
  return uid_;
}
inline void notifynextdealMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifynextdealMsg.uid)
}

// required int32 seatid = 2;
inline bool notifynextdealMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void notifynextdealMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void notifynextdealMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void notifynextdealMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 notifynextdealMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifynextdealMsg.seatid)
  return seatid_;
}
inline void notifynextdealMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifynextdealMsg.seatid)
}

// required int32 robot = 3;
inline bool notifynextdealMsg::has_robot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void notifynextdealMsg::set_has_robot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void notifynextdealMsg::clear_has_robot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void notifynextdealMsg::clear_robot() {
  robot_ = 0;
  clear_has_robot();
}
inline ::google::protobuf::int32 notifynextdealMsg::robot() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifynextdealMsg.robot)
  return robot_;
}
inline void notifynextdealMsg::set_robot(::google::protobuf::int32 value) {
  set_has_robot();
  robot_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifynextdealMsg.robot)
}

// required int32 cd = 4;
inline bool notifynextdealMsg::has_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void notifynextdealMsg::set_has_cd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void notifynextdealMsg::clear_has_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void notifynextdealMsg::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 notifynextdealMsg::cd() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.notifynextdealMsg.cd)
  return cd_;
}
inline void notifynextdealMsg::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.notifynextdealMsg.cd)
}

// -------------------------------------------------------------------

// dealcardMsg_DealEnds

// required uint32 uid = 1;
inline bool dealcardMsg_DealEnds::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dealcardMsg_DealEnds::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dealcardMsg_DealEnds::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dealcardMsg_DealEnds::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 dealcardMsg_DealEnds::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.DealEnds.uid)
  return uid_;
}
inline void dealcardMsg_DealEnds::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.DealEnds.uid)
}

// required int32 seatid = 2;
inline bool dealcardMsg_DealEnds::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dealcardMsg_DealEnds::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dealcardMsg_DealEnds::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dealcardMsg_DealEnds::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 dealcardMsg_DealEnds::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.DealEnds.seatid)
  return seatid_;
}
inline void dealcardMsg_DealEnds::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.DealEnds.seatid)
}

// required int32 beishu = 3;
inline bool dealcardMsg_DealEnds::has_beishu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dealcardMsg_DealEnds::set_has_beishu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dealcardMsg_DealEnds::clear_has_beishu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dealcardMsg_DealEnds::clear_beishu() {
  beishu_ = 0;
  clear_has_beishu();
}
inline ::google::protobuf::int32 dealcardMsg_DealEnds::beishu() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.DealEnds.beishu)
  return beishu_;
}
inline void dealcardMsg_DealEnds::set_beishu(::google::protobuf::int32 value) {
  set_has_beishu();
  beishu_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.DealEnds.beishu)
}

// required int64 winmoney = 4;
inline bool dealcardMsg_DealEnds::has_winmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dealcardMsg_DealEnds::set_has_winmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dealcardMsg_DealEnds::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dealcardMsg_DealEnds::clear_winmoney() {
  winmoney_ = GOOGLE_LONGLONG(0);
  clear_has_winmoney();
}
inline ::google::protobuf::int64 dealcardMsg_DealEnds::winmoney() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.DealEnds.winmoney)
  return winmoney_;
}
inline void dealcardMsg_DealEnds::set_winmoney(::google::protobuf::int64 value) {
  set_has_winmoney();
  winmoney_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.DealEnds.winmoney)
}

// required int64 money = 5;
inline bool dealcardMsg_DealEnds::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dealcardMsg_DealEnds::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dealcardMsg_DealEnds::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dealcardMsg_DealEnds::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 dealcardMsg_DealEnds::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.DealEnds.money)
  return money_;
}
inline void dealcardMsg_DealEnds::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.DealEnds.money)
}

// -------------------------------------------------------------------

// dealcardMsg_GangCard

// repeated int32 cards = 1;
inline int dealcardMsg_GangCard::cards_size() const {
  return cards_.size();
}
inline void dealcardMsg_GangCard::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 dealcardMsg_GangCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.GangCard.cards)
  return cards_.Get(index);
}
inline void dealcardMsg_GangCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.GangCard.cards)
}
inline void dealcardMsg_GangCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.dealcardMsg.GangCard.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dealcardMsg_GangCard::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.dealcardMsg.GangCard.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dealcardMsg_GangCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.dealcardMsg.GangCard.cards)
  return &cards_;
}

// required int32 type = 2;
inline bool dealcardMsg_GangCard::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dealcardMsg_GangCard::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dealcardMsg_GangCard::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dealcardMsg_GangCard::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 dealcardMsg_GangCard::type() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.GangCard.type)
  return type_;
}
inline void dealcardMsg_GangCard::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.GangCard.type)
}

// -------------------------------------------------------------------

// dealcardMsg

// repeated int32 dealcards = 1;
inline int dealcardMsg::dealcards_size() const {
  return dealcards_.size();
}
inline void dealcardMsg::clear_dealcards() {
  dealcards_.Clear();
}
inline ::google::protobuf::int32 dealcardMsg::dealcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.dealcards)
  return dealcards_.Get(index);
}
inline void dealcardMsg::set_dealcards(int index, ::google::protobuf::int32 value) {
  dealcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.dealcards)
}
inline void dealcardMsg::add_dealcards(::google::protobuf::int32 value) {
  dealcards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.dealcardMsg.dealcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dealcardMsg::dealcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.dealcardMsg.dealcards)
  return dealcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dealcardMsg::mutable_dealcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.dealcardMsg.dealcards)
  return &dealcards_;
}

// required uint32 uid = 2;
inline bool dealcardMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dealcardMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dealcardMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dealcardMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 dealcardMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.uid)
  return uid_;
}
inline void dealcardMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.uid)
}

// required int32 seatid = 3;
inline bool dealcardMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dealcardMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dealcardMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dealcardMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 dealcardMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.seatid)
  return seatid_;
}
inline void dealcardMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.seatid)
}

// required int32 cardnums = 4;
inline bool dealcardMsg::has_cardnums() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dealcardMsg::set_has_cardnums() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dealcardMsg::clear_has_cardnums() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dealcardMsg::clear_cardnums() {
  cardnums_ = 0;
  clear_has_cardnums();
}
inline ::google::protobuf::int32 dealcardMsg::cardnums() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.cardnums)
  return cardnums_;
}
inline void dealcardMsg::set_cardnums(::google::protobuf::int32 value) {
  set_has_cardnums();
  cardnums_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.cardnums)
}

// required int32 cardv = 5;
inline bool dealcardMsg::has_cardv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dealcardMsg::set_has_cardv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dealcardMsg::clear_has_cardv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dealcardMsg::clear_cardv() {
  cardv_ = 0;
  clear_has_cardv();
}
inline ::google::protobuf::int32 dealcardMsg::cardv() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.cardv)
  return cardv_;
}
inline void dealcardMsg::set_cardv(::google::protobuf::int32 value) {
  set_has_cardv();
  cardv_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.cardv)
}

// required int32 index = 6;
inline bool dealcardMsg::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dealcardMsg::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dealcardMsg::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dealcardMsg::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 dealcardMsg::index() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.index)
  return index_;
}
inline void dealcardMsg::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.index)
}

// required int32 dtype = 7;
inline bool dealcardMsg::has_dtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dealcardMsg::set_has_dtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dealcardMsg::clear_has_dtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dealcardMsg::clear_dtype() {
  dtype_ = 0;
  clear_has_dtype();
}
inline ::google::protobuf::int32 dealcardMsg::dtype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.dtype)
  return dtype_;
}
inline void dealcardMsg::set_dtype(::google::protobuf::int32 value) {
  set_has_dtype();
  dtype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.dtype)
}

// required int32 otype = 8;
inline bool dealcardMsg::has_otype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dealcardMsg::set_has_otype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dealcardMsg::clear_has_otype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dealcardMsg::clear_otype() {
  otype_ = 0;
  clear_has_otype();
}
inline ::google::protobuf::int32 dealcardMsg::otype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.otype)
  return otype_;
}
inline void dealcardMsg::set_otype(::google::protobuf::int32 value) {
  set_has_otype();
  otype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.otype)
}

// required int32 zmcount = 9;
inline bool dealcardMsg::has_zmcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dealcardMsg::set_has_zmcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dealcardMsg::clear_has_zmcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dealcardMsg::clear_zmcount() {
  zmcount_ = 0;
  clear_has_zmcount();
}
inline ::google::protobuf::int32 dealcardMsg::zmcount() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.zmcount)
  return zmcount_;
}
inline void dealcardMsg::set_zmcount(::google::protobuf::int32 value) {
  set_has_zmcount();
  zmcount_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.zmcount)
}

// required int32 hpcount = 10;
inline bool dealcardMsg::has_hpcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dealcardMsg::set_has_hpcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dealcardMsg::clear_has_hpcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dealcardMsg::clear_hpcount() {
  hpcount_ = 0;
  clear_has_hpcount();
}
inline ::google::protobuf::int32 dealcardMsg::hpcount() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.hpcount)
  return hpcount_;
}
inline void dealcardMsg::set_hpcount(::google::protobuf::int32 value) {
  set_has_hpcount();
  hpcount_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.hpcount)
}

// required int64 money = 11;
inline bool dealcardMsg::has_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void dealcardMsg::set_has_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void dealcardMsg::clear_has_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void dealcardMsg::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 dealcardMsg::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.money)
  return money_;
}
inline void dealcardMsg::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.money)
}

// required int32 train_money = 12;
inline bool dealcardMsg::has_train_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void dealcardMsg::set_has_train_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void dealcardMsg::clear_has_train_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void dealcardMsg::clear_train_money() {
  train_money_ = 0;
  clear_has_train_money();
}
inline ::google::protobuf::int32 dealcardMsg::train_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.train_money)
  return train_money_;
}
inline void dealcardMsg::set_train_money(::google::protobuf::int32 value) {
  set_has_train_money();
  train_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.train_money)
}

// required int32 taste_money = 13;
inline bool dealcardMsg::has_taste_money() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dealcardMsg::set_has_taste_money() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dealcardMsg::clear_has_taste_money() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dealcardMsg::clear_taste_money() {
  taste_money_ = 0;
  clear_has_taste_money();
}
inline ::google::protobuf::int32 dealcardMsg::taste_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.taste_money)
  return taste_money_;
}
inline void dealcardMsg::set_taste_money(::google::protobuf::int32 value) {
  set_has_taste_money();
  taste_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.taste_money)
}

// required int32 lastseatid = 14;
inline bool dealcardMsg::has_lastseatid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void dealcardMsg::set_has_lastseatid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void dealcardMsg::clear_has_lastseatid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void dealcardMsg::clear_lastseatid() {
  lastseatid_ = 0;
  clear_has_lastseatid();
}
inline ::google::protobuf::int32 dealcardMsg::lastseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.lastseatid)
  return lastseatid_;
}
inline void dealcardMsg::set_lastseatid(::google::protobuf::int32 value) {
  set_has_lastseatid();
  lastseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.lastseatid)
}

// required int32 qgflag = 15;
inline bool dealcardMsg::has_qgflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void dealcardMsg::set_has_qgflag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void dealcardMsg::clear_has_qgflag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void dealcardMsg::clear_qgflag() {
  qgflag_ = 0;
  clear_has_qgflag();
}
inline ::google::protobuf::int32 dealcardMsg::qgflag() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.qgflag)
  return qgflag_;
}
inline void dealcardMsg::set_qgflag(::google::protobuf::int32 value) {
  set_has_qgflag();
  qgflag_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.qgflag)
}

// repeated .mahjong_msg.dealcardMsg.DealEnds dealends = 16;
inline int dealcardMsg::dealends_size() const {
  return dealends_.size();
}
inline void dealcardMsg::clear_dealends() {
  dealends_.Clear();
}
inline const ::mahjong_msg::dealcardMsg_DealEnds& dealcardMsg::dealends(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.dealends)
  return dealends_.Get(index);
}
inline ::mahjong_msg::dealcardMsg_DealEnds* dealcardMsg::mutable_dealends(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.dealcardMsg.dealends)
  return dealends_.Mutable(index);
}
inline ::mahjong_msg::dealcardMsg_DealEnds* dealcardMsg::add_dealends() {
  // @@protoc_insertion_point(field_add:mahjong_msg.dealcardMsg.dealends)
  return dealends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_DealEnds >&
dealcardMsg::dealends() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.dealcardMsg.dealends)
  return dealends_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_DealEnds >*
dealcardMsg::mutable_dealends() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.dealcardMsg.dealends)
  return &dealends_;
}

// optional int32 mflag = 17;
inline bool dealcardMsg::has_mflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void dealcardMsg::set_has_mflag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void dealcardMsg::clear_has_mflag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void dealcardMsg::clear_mflag() {
  mflag_ = 0;
  clear_has_mflag();
}
inline ::google::protobuf::int32 dealcardMsg::mflag() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.mflag)
  return mflag_;
}
inline void dealcardMsg::set_mflag(::google::protobuf::int32 value) {
  set_has_mflag();
  mflag_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.mflag)
}

// optional int32 qgdeal = 18;
inline bool dealcardMsg::has_qgdeal() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void dealcardMsg::set_has_qgdeal() {
  _has_bits_[0] |= 0x00020000u;
}
inline void dealcardMsg::clear_has_qgdeal() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void dealcardMsg::clear_qgdeal() {
  qgdeal_ = 0;
  clear_has_qgdeal();
}
inline ::google::protobuf::int32 dealcardMsg::qgdeal() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.qgdeal)
  return qgdeal_;
}
inline void dealcardMsg::set_qgdeal(::google::protobuf::int32 value) {
  set_has_qgdeal();
  qgdeal_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.qgdeal)
}

// repeated int32 handcards = 19;
inline int dealcardMsg::handcards_size() const {
  return handcards_.size();
}
inline void dealcardMsg::clear_handcards() {
  handcards_.Clear();
}
inline ::google::protobuf::int32 dealcardMsg::handcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.handcards)
  return handcards_.Get(index);
}
inline void dealcardMsg::set_handcards(int index, ::google::protobuf::int32 value) {
  handcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.handcards)
}
inline void dealcardMsg::add_handcards(::google::protobuf::int32 value) {
  handcards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.dealcardMsg.handcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dealcardMsg::handcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.dealcardMsg.handcards)
  return handcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dealcardMsg::mutable_handcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.dealcardMsg.handcards)
  return &handcards_;
}

// repeated .mahjong_msg.dealcardMsg.GangCard gangcards = 20;
inline int dealcardMsg::gangcards_size() const {
  return gangcards_.size();
}
inline void dealcardMsg::clear_gangcards() {
  gangcards_.Clear();
}
inline const ::mahjong_msg::dealcardMsg_GangCard& dealcardMsg::gangcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.gangcards)
  return gangcards_.Get(index);
}
inline ::mahjong_msg::dealcardMsg_GangCard* dealcardMsg::mutable_gangcards(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.dealcardMsg.gangcards)
  return gangcards_.Mutable(index);
}
inline ::mahjong_msg::dealcardMsg_GangCard* dealcardMsg::add_gangcards() {
  // @@protoc_insertion_point(field_add:mahjong_msg.dealcardMsg.gangcards)
  return gangcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_GangCard >&
dealcardMsg::gangcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.dealcardMsg.gangcards)
  return gangcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::dealcardMsg_GangCard >*
dealcardMsg::mutable_gangcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.dealcardMsg.gangcards)
  return &gangcards_;
}

// optional int32 pass_hu_count = 21;
inline bool dealcardMsg::has_pass_hu_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void dealcardMsg::set_has_pass_hu_count() {
  _has_bits_[0] |= 0x00100000u;
}
inline void dealcardMsg::clear_has_pass_hu_count() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void dealcardMsg::clear_pass_hu_count() {
  pass_hu_count_ = 0;
  clear_has_pass_hu_count();
}
inline ::google::protobuf::int32 dealcardMsg::pass_hu_count() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.pass_hu_count)
  return pass_hu_count_;
}
inline void dealcardMsg::set_pass_hu_count(::google::protobuf::int32 value) {
  set_has_pass_hu_count();
  pass_hu_count_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.pass_hu_count)
}

// optional bool tianting = 22;
inline bool dealcardMsg::has_tianting() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void dealcardMsg::set_has_tianting() {
  _has_bits_[0] |= 0x00200000u;
}
inline void dealcardMsg::clear_has_tianting() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void dealcardMsg::clear_tianting() {
  tianting_ = false;
  clear_has_tianting();
}
inline bool dealcardMsg::tianting() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.tianting)
  return tianting_;
}
inline void dealcardMsg::set_tianting(bool value) {
  set_has_tianting();
  tianting_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.tianting)
}

// optional bool haidilaoyue = 23;
inline bool dealcardMsg::has_haidilaoyue() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void dealcardMsg::set_has_haidilaoyue() {
  _has_bits_[0] |= 0x00400000u;
}
inline void dealcardMsg::clear_has_haidilaoyue() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void dealcardMsg::clear_haidilaoyue() {
  haidilaoyue_ = false;
  clear_has_haidilaoyue();
}
inline bool dealcardMsg::haidilaoyue() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.haidilaoyue)
  return haidilaoyue_;
}
inline void dealcardMsg::set_haidilaoyue(bool value) {
  set_has_haidilaoyue();
  haidilaoyue_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.haidilaoyue)
}

// optional bool miaoshouhuichun = 24;
inline bool dealcardMsg::has_miaoshouhuichun() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void dealcardMsg::set_has_miaoshouhuichun() {
  _has_bits_[0] |= 0x00800000u;
}
inline void dealcardMsg::clear_has_miaoshouhuichun() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void dealcardMsg::clear_miaoshouhuichun() {
  miaoshouhuichun_ = false;
  clear_has_miaoshouhuichun();
}
inline bool dealcardMsg::miaoshouhuichun() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.miaoshouhuichun)
  return miaoshouhuichun_;
}
inline void dealcardMsg::set_miaoshouhuichun(bool value) {
  set_has_miaoshouhuichun();
  miaoshouhuichun_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.miaoshouhuichun)
}

// optional int32 qgseatid = 25;
inline bool dealcardMsg::has_qgseatid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void dealcardMsg::set_has_qgseatid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void dealcardMsg::clear_has_qgseatid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void dealcardMsg::clear_qgseatid() {
  qgseatid_ = 0;
  clear_has_qgseatid();
}
inline ::google::protobuf::int32 dealcardMsg::qgseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.dealcardMsg.qgseatid)
  return qgseatid_;
}
inline void dealcardMsg::set_qgseatid(::google::protobuf::int32 value) {
  set_has_qgseatid();
  qgseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.dealcardMsg.qgseatid)
}

// -------------------------------------------------------------------

// gameendMsg_PlayInfo

// required uint32 uid = 1;
inline bool gameendMsg_PlayInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gameendMsg_PlayInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gameendMsg_PlayInfo::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 gameendMsg_PlayInfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.uid)
  return uid_;
}
inline void gameendMsg_PlayInfo::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.uid)
}

// required int32 seatid = 2;
inline bool gameendMsg_PlayInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gameendMsg_PlayInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gameendMsg_PlayInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.seatid)
  return seatid_;
}
inline void gameendMsg_PlayInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.seatid)
}

// required string name = 3;
inline bool gameendMsg_PlayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gameendMsg_PlayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gameendMsg_PlayInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gameendMsg_PlayInfo::name() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.name)
  return *name_;
}
inline void gameendMsg_PlayInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.name)
}
inline void gameendMsg_PlayInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.gameendMsg.PlayInfo.name)
}
inline void gameendMsg_PlayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.gameendMsg.PlayInfo.name)
}
inline ::std::string* gameendMsg_PlayInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.gameendMsg.PlayInfo.name)
  return name_;
}
inline ::std::string* gameendMsg_PlayInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gameendMsg_PlayInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.gameendMsg.PlayInfo.name)
}

// required int64 winmoney = 4;
inline bool gameendMsg_PlayInfo::has_winmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_winmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gameendMsg_PlayInfo::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gameendMsg_PlayInfo::clear_winmoney() {
  winmoney_ = GOOGLE_LONGLONG(0);
  clear_has_winmoney();
}
inline ::google::protobuf::int64 gameendMsg_PlayInfo::winmoney() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.winmoney)
  return winmoney_;
}
inline void gameendMsg_PlayInfo::set_winmoney(::google::protobuf::int64 value) {
  set_has_winmoney();
  winmoney_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.winmoney)
}

// required int32 beishu = 5;
inline bool gameendMsg_PlayInfo::has_beishu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_beishu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gameendMsg_PlayInfo::clear_has_beishu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gameendMsg_PlayInfo::clear_beishu() {
  beishu_ = 0;
  clear_has_beishu();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::beishu() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.beishu)
  return beishu_;
}
inline void gameendMsg_PlayInfo::set_beishu(::google::protobuf::int32 value) {
  set_has_beishu();
  beishu_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.beishu)
}

// required int32 total_board = 6;
inline bool gameendMsg_PlayInfo::has_total_board() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_total_board() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gameendMsg_PlayInfo::clear_has_total_board() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gameendMsg_PlayInfo::clear_total_board() {
  total_board_ = 0;
  clear_has_total_board();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::total_board() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.total_board)
  return total_board_;
}
inline void gameendMsg_PlayInfo::set_total_board(::google::protobuf::int32 value) {
  set_has_total_board();
  total_board_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.total_board)
}

// required int32 total_win = 7;
inline bool gameendMsg_PlayInfo::has_total_win() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_total_win() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gameendMsg_PlayInfo::clear_has_total_win() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gameendMsg_PlayInfo::clear_total_win() {
  total_win_ = 0;
  clear_has_total_win();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::total_win() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.total_win)
  return total_win_;
}
inline void gameendMsg_PlayInfo::set_total_win(::google::protobuf::int32 value) {
  set_has_total_win();
  total_win_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.total_win)
}

// required int64 money = 8;
inline bool gameendMsg_PlayInfo::has_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gameendMsg_PlayInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gameendMsg_PlayInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 gameendMsg_PlayInfo::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.money)
  return money_;
}
inline void gameendMsg_PlayInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.money)
}

// required int32 max_fan = 9;
inline bool gameendMsg_PlayInfo::has_max_fan() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_max_fan() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gameendMsg_PlayInfo::clear_has_max_fan() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gameendMsg_PlayInfo::clear_max_fan() {
  max_fan_ = 0;
  clear_has_max_fan();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::max_fan() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.max_fan)
  return max_fan_;
}
inline void gameendMsg_PlayInfo::set_max_fan(::google::protobuf::int32 value) {
  set_has_max_fan();
  max_fan_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.max_fan)
}

// required int32 loveliness_amt = 10;
inline bool gameendMsg_PlayInfo::has_loveliness_amt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_loveliness_amt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gameendMsg_PlayInfo::clear_has_loveliness_amt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gameendMsg_PlayInfo::clear_loveliness_amt() {
  loveliness_amt_ = 0;
  clear_has_loveliness_amt();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::loveliness_amt() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.loveliness_amt)
  return loveliness_amt_;
}
inline void gameendMsg_PlayInfo::set_loveliness_amt(::google::protobuf::int32 value) {
  set_has_loveliness_amt();
  loveliness_amt_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.loveliness_amt)
}

// required int64 total_win_money = 11;
inline bool gameendMsg_PlayInfo::has_total_win_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_total_win_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gameendMsg_PlayInfo::clear_has_total_win_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gameendMsg_PlayInfo::clear_total_win_money() {
  total_win_money_ = GOOGLE_LONGLONG(0);
  clear_has_total_win_money();
}
inline ::google::protobuf::int64 gameendMsg_PlayInfo::total_win_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.total_win_money)
  return total_win_money_;
}
inline void gameendMsg_PlayInfo::set_total_win_money(::google::protobuf::int64 value) {
  set_has_total_win_money();
  total_win_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.total_win_money)
}

// repeated int32 cards = 12;
inline int gameendMsg_PlayInfo::cards_size() const {
  return cards_.size();
}
inline void gameendMsg_PlayInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.cards)
  return cards_.Get(index);
}
inline void gameendMsg_PlayInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.cards)
}
inline void gameendMsg_PlayInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.gameendMsg.PlayInfo.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gameendMsg_PlayInfo::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.gameendMsg.PlayInfo.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gameendMsg_PlayInfo::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.gameendMsg.PlayInfo.cards)
  return &cards_;
}

// optional int32 pass_hu_count = 14;
inline bool gameendMsg_PlayInfo::has_pass_hu_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_pass_hu_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gameendMsg_PlayInfo::clear_has_pass_hu_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gameendMsg_PlayInfo::clear_pass_hu_count() {
  pass_hu_count_ = 0;
  clear_has_pass_hu_count();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::pass_hu_count() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.pass_hu_count)
  return pass_hu_count_;
}
inline void gameendMsg_PlayInfo::set_pass_hu_count(::google::protobuf::int32 value) {
  set_has_pass_hu_count();
  pass_hu_count_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.pass_hu_count)
}

// optional int32 train_money = 15;
inline bool gameendMsg_PlayInfo::has_train_money() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_train_money() {
  _has_bits_[0] |= 0x00002000u;
}
inline void gameendMsg_PlayInfo::clear_has_train_money() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void gameendMsg_PlayInfo::clear_train_money() {
  train_money_ = 0;
  clear_has_train_money();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::train_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.train_money)
  return train_money_;
}
inline void gameendMsg_PlayInfo::set_train_money(::google::protobuf::int32 value) {
  set_has_train_money();
  train_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.train_money)
}

// optional int32 taste_money = 16;
inline bool gameendMsg_PlayInfo::has_taste_money() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void gameendMsg_PlayInfo::set_has_taste_money() {
  _has_bits_[0] |= 0x00004000u;
}
inline void gameendMsg_PlayInfo::clear_has_taste_money() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void gameendMsg_PlayInfo::clear_taste_money() {
  taste_money_ = 0;
  clear_has_taste_money();
}
inline ::google::protobuf::int32 gameendMsg_PlayInfo::taste_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.PlayInfo.taste_money)
  return taste_money_;
}
inline void gameendMsg_PlayInfo::set_taste_money(::google::protobuf::int32 value) {
  set_has_taste_money();
  taste_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.PlayInfo.taste_money)
}

// -------------------------------------------------------------------

// gameendMsg_FanInfo

// required string ftype = 1;
inline bool gameendMsg_FanInfo::has_ftype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gameendMsg_FanInfo::set_has_ftype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gameendMsg_FanInfo::clear_has_ftype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gameendMsg_FanInfo::clear_ftype() {
  if (ftype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ftype_->clear();
  }
  clear_has_ftype();
}
inline const ::std::string& gameendMsg_FanInfo::ftype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.FanInfo.ftype)
  return *ftype_;
}
inline void gameendMsg_FanInfo::set_ftype(const ::std::string& value) {
  set_has_ftype();
  if (ftype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ftype_ = new ::std::string;
  }
  ftype_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.FanInfo.ftype)
}
inline void gameendMsg_FanInfo::set_ftype(const char* value) {
  set_has_ftype();
  if (ftype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ftype_ = new ::std::string;
  }
  ftype_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.gameendMsg.FanInfo.ftype)
}
inline void gameendMsg_FanInfo::set_ftype(const char* value, size_t size) {
  set_has_ftype();
  if (ftype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ftype_ = new ::std::string;
  }
  ftype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.gameendMsg.FanInfo.ftype)
}
inline ::std::string* gameendMsg_FanInfo::mutable_ftype() {
  set_has_ftype();
  if (ftype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ftype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.gameendMsg.FanInfo.ftype)
  return ftype_;
}
inline ::std::string* gameendMsg_FanInfo::release_ftype() {
  clear_has_ftype();
  if (ftype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ftype_;
    ftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void gameendMsg_FanInfo::set_allocated_ftype(::std::string* ftype) {
  if (ftype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ftype_;
  }
  if (ftype) {
    set_has_ftype();
    ftype_ = ftype;
  } else {
    clear_has_ftype();
    ftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.gameendMsg.FanInfo.ftype)
}

// required int32 beishu = 2;
inline bool gameendMsg_FanInfo::has_beishu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gameendMsg_FanInfo::set_has_beishu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gameendMsg_FanInfo::clear_has_beishu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gameendMsg_FanInfo::clear_beishu() {
  beishu_ = 0;
  clear_has_beishu();
}
inline ::google::protobuf::int32 gameendMsg_FanInfo::beishu() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.FanInfo.beishu)
  return beishu_;
}
inline void gameendMsg_FanInfo::set_beishu(::google::protobuf::int32 value) {
  set_has_beishu();
  beishu_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.FanInfo.beishu)
}

// optional int64 winmoney = 3;
inline bool gameendMsg_FanInfo::has_winmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gameendMsg_FanInfo::set_has_winmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gameendMsg_FanInfo::clear_has_winmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gameendMsg_FanInfo::clear_winmoney() {
  winmoney_ = GOOGLE_LONGLONG(0);
  clear_has_winmoney();
}
inline ::google::protobuf::int64 gameendMsg_FanInfo::winmoney() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.FanInfo.winmoney)
  return winmoney_;
}
inline void gameendMsg_FanInfo::set_winmoney(::google::protobuf::int64 value) {
  set_has_winmoney();
  winmoney_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.FanInfo.winmoney)
}

// optional int32 otype = 4;
inline bool gameendMsg_FanInfo::has_otype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gameendMsg_FanInfo::set_has_otype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gameendMsg_FanInfo::clear_has_otype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gameendMsg_FanInfo::clear_otype() {
  otype_ = 0;
  clear_has_otype();
}
inline ::google::protobuf::int32 gameendMsg_FanInfo::otype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.FanInfo.otype)
  return otype_;
}
inline void gameendMsg_FanInfo::set_otype(::google::protobuf::int32 value) {
  set_has_otype();
  otype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.FanInfo.otype)
}

// -------------------------------------------------------------------

// gameendMsg

// required int32 isliuju = 1;
inline bool gameendMsg::has_isliuju() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gameendMsg::set_has_isliuju() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gameendMsg::clear_has_isliuju() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gameendMsg::clear_isliuju() {
  isliuju_ = 0;
  clear_has_isliuju();
}
inline ::google::protobuf::int32 gameendMsg::isliuju() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.isliuju)
  return isliuju_;
}
inline void gameendMsg::set_isliuju(::google::protobuf::int32 value) {
  set_has_isliuju();
  isliuju_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.gameendMsg.isliuju)
}

// repeated .mahjong_msg.gameendMsg.PlayInfo players = 2;
inline int gameendMsg::players_size() const {
  return players_.size();
}
inline void gameendMsg::clear_players() {
  players_.Clear();
}
inline const ::mahjong_msg::gameendMsg_PlayInfo& gameendMsg::players(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.players)
  return players_.Get(index);
}
inline ::mahjong_msg::gameendMsg_PlayInfo* gameendMsg::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.gameendMsg.players)
  return players_.Mutable(index);
}
inline ::mahjong_msg::gameendMsg_PlayInfo* gameendMsg::add_players() {
  // @@protoc_insertion_point(field_add:mahjong_msg.gameendMsg.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_PlayInfo >&
gameendMsg::players() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.gameendMsg.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_PlayInfo >*
gameendMsg::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.gameendMsg.players)
  return &players_;
}

// repeated .mahjong_msg.gameendMsg.FanInfo faninfos = 3;
inline int gameendMsg::faninfos_size() const {
  return faninfos_.size();
}
inline void gameendMsg::clear_faninfos() {
  faninfos_.Clear();
}
inline const ::mahjong_msg::gameendMsg_FanInfo& gameendMsg::faninfos(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.gameendMsg.faninfos)
  return faninfos_.Get(index);
}
inline ::mahjong_msg::gameendMsg_FanInfo* gameendMsg::mutable_faninfos(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.gameendMsg.faninfos)
  return faninfos_.Mutable(index);
}
inline ::mahjong_msg::gameendMsg_FanInfo* gameendMsg::add_faninfos() {
  // @@protoc_insertion_point(field_add:mahjong_msg.gameendMsg.faninfos)
  return faninfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_FanInfo >&
gameendMsg::faninfos() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.gameendMsg.faninfos)
  return faninfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::gameendMsg_FanInfo >*
gameendMsg::mutable_faninfos() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.gameendMsg.faninfos)
  return &faninfos_;
}

// -------------------------------------------------------------------

// chatRequest

// required string text = 1;
inline bool chatRequest::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatRequest::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chatRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chatRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& chatRequest::text() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.chatRequest.text)
  return *text_;
}
inline void chatRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.chatRequest.text)
}
inline void chatRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.chatRequest.text)
}
inline void chatRequest::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.chatRequest.text)
}
inline ::std::string* chatRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.chatRequest.text)
  return text_;
}
inline ::std::string* chatRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.chatRequest.text)
}

// required int32 chatid = 2;
inline bool chatRequest::has_chatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatRequest::set_has_chatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chatRequest::clear_has_chatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chatRequest::clear_chatid() {
  chatid_ = 0;
  clear_has_chatid();
}
inline ::google::protobuf::int32 chatRequest::chatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.chatRequest.chatid)
  return chatid_;
}
inline void chatRequest::set_chatid(::google::protobuf::int32 value) {
  set_has_chatid();
  chatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.chatRequest.chatid)
}

// -------------------------------------------------------------------

// giveupMsg

// required int32 seatid = 1;
inline bool giveupMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void giveupMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void giveupMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void giveupMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 giveupMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.giveupMsg.seatid)
  return seatid_;
}
inline void giveupMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.giveupMsg.seatid)
}

// -------------------------------------------------------------------

// chatMsg

// required uint32 uid = 1;
inline bool chatMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chatMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chatMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 chatMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.chatMsg.uid)
  return uid_;
}
inline void chatMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.chatMsg.uid)
}

// required int32 seatid = 2;
inline bool chatMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chatMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chatMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 chatMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.chatMsg.seatid)
  return seatid_;
}
inline void chatMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.chatMsg.seatid)
}

// required string text = 3;
inline bool chatMsg::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chatMsg::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chatMsg::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chatMsg::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& chatMsg::text() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.chatMsg.text)
  return *text_;
}
inline void chatMsg::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.chatMsg.text)
}
inline void chatMsg::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.chatMsg.text)
}
inline void chatMsg::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.chatMsg.text)
}
inline ::std::string* chatMsg::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.chatMsg.text)
  return text_;
}
inline ::std::string* chatMsg::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void chatMsg::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.chatMsg.text)
}

// required int32 chatid = 4;
inline bool chatMsg::has_chatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chatMsg::set_has_chatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chatMsg::clear_has_chatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chatMsg::clear_chatid() {
  chatid_ = 0;
  clear_has_chatid();
}
inline ::google::protobuf::int32 chatMsg::chatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.chatMsg.chatid)
  return chatid_;
}
inline void chatMsg::set_chatid(::google::protobuf::int32 value) {
  set_has_chatid();
  chatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.chatMsg.chatid)
}

// -------------------------------------------------------------------

// normalexpresionRequest

// required int32 expressionid = 1;
inline bool normalexpresionRequest::has_expressionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void normalexpresionRequest::set_has_expressionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void normalexpresionRequest::clear_has_expressionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void normalexpresionRequest::clear_expressionid() {
  expressionid_ = 0;
  clear_has_expressionid();
}
inline ::google::protobuf::int32 normalexpresionRequest::expressionid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.normalexpresionRequest.expressionid)
  return expressionid_;
}
inline void normalexpresionRequest::set_expressionid(::google::protobuf::int32 value) {
  set_has_expressionid();
  expressionid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.normalexpresionRequest.expressionid)
}

// -------------------------------------------------------------------

// normalexpresionMsg

// required uint32 uid = 1;
inline bool normalexpresionMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void normalexpresionMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void normalexpresionMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void normalexpresionMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 normalexpresionMsg::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.normalexpresionMsg.uid)
  return uid_;
}
inline void normalexpresionMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.normalexpresionMsg.uid)
}

// required string name = 2;
inline bool normalexpresionMsg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void normalexpresionMsg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void normalexpresionMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void normalexpresionMsg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& normalexpresionMsg::name() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.normalexpresionMsg.name)
  return *name_;
}
inline void normalexpresionMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.normalexpresionMsg.name)
}
inline void normalexpresionMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.normalexpresionMsg.name)
}
inline void normalexpresionMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.normalexpresionMsg.name)
}
inline ::std::string* normalexpresionMsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.normalexpresionMsg.name)
  return name_;
}
inline ::std::string* normalexpresionMsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void normalexpresionMsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.normalexpresionMsg.name)
}

// required int32 seatid = 3;
inline bool normalexpresionMsg::has_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void normalexpresionMsg::set_has_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void normalexpresionMsg::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void normalexpresionMsg::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 normalexpresionMsg::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.normalexpresionMsg.seatid)
  return seatid_;
}
inline void normalexpresionMsg::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.normalexpresionMsg.seatid)
}

// required int32 expressionid = 4;
inline bool normalexpresionMsg::has_expressionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void normalexpresionMsg::set_has_expressionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void normalexpresionMsg::clear_has_expressionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void normalexpresionMsg::clear_expressionid() {
  expressionid_ = 0;
  clear_has_expressionid();
}
inline ::google::protobuf::int32 normalexpresionMsg::expressionid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.normalexpresionMsg.expressionid)
  return expressionid_;
}
inline void normalexpresionMsg::set_expressionid(::google::protobuf::int32 value) {
  set_has_expressionid();
  expressionid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.normalexpresionMsg.expressionid)
}

// -------------------------------------------------------------------

// expresionRequest

// required int32 targetuid = 1;
inline bool expresionRequest::has_targetuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void expresionRequest::set_has_targetuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void expresionRequest::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void expresionRequest::clear_targetuid() {
  targetuid_ = 0;
  clear_has_targetuid();
}
inline ::google::protobuf::int32 expresionRequest::targetuid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionRequest.targetuid)
  return targetuid_;
}
inline void expresionRequest::set_targetuid(::google::protobuf::int32 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionRequest.targetuid)
}

// required int32 reciveseatid = 2;
inline bool expresionRequest::has_reciveseatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void expresionRequest::set_has_reciveseatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void expresionRequest::clear_has_reciveseatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void expresionRequest::clear_reciveseatid() {
  reciveseatid_ = 0;
  clear_has_reciveseatid();
}
inline ::google::protobuf::int32 expresionRequest::reciveseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionRequest.reciveseatid)
  return reciveseatid_;
}
inline void expresionRequest::set_reciveseatid(::google::protobuf::int32 value) {
  set_has_reciveseatid();
  reciveseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionRequest.reciveseatid)
}

// required int32 expressionid = 3;
inline bool expresionRequest::has_expressionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void expresionRequest::set_has_expressionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void expresionRequest::clear_has_expressionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void expresionRequest::clear_expressionid() {
  expressionid_ = 0;
  clear_has_expressionid();
}
inline ::google::protobuf::int32 expresionRequest::expressionid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionRequest.expressionid)
  return expressionid_;
}
inline void expresionRequest::set_expressionid(::google::protobuf::int32 value) {
  set_has_expressionid();
  expressionid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionRequest.expressionid)
}

// -------------------------------------------------------------------

// expresionMsg

// required int32 sendseatid = 1;
inline bool expresionMsg::has_sendseatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void expresionMsg::set_has_sendseatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void expresionMsg::clear_has_sendseatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void expresionMsg::clear_sendseatid() {
  sendseatid_ = 0;
  clear_has_sendseatid();
}
inline ::google::protobuf::int32 expresionMsg::sendseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionMsg.sendseatid)
  return sendseatid_;
}
inline void expresionMsg::set_sendseatid(::google::protobuf::int32 value) {
  set_has_sendseatid();
  sendseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionMsg.sendseatid)
}

// required int64 money = 2;
inline bool expresionMsg::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void expresionMsg::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void expresionMsg::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void expresionMsg::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 expresionMsg::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionMsg.money)
  return money_;
}
inline void expresionMsg::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionMsg.money)
}

// required int32 taste_money = 3;
inline bool expresionMsg::has_taste_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void expresionMsg::set_has_taste_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void expresionMsg::clear_has_taste_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void expresionMsg::clear_taste_money() {
  taste_money_ = 0;
  clear_has_taste_money();
}
inline ::google::protobuf::int32 expresionMsg::taste_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionMsg.taste_money)
  return taste_money_;
}
inline void expresionMsg::set_taste_money(::google::protobuf::int32 value) {
  set_has_taste_money();
  taste_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionMsg.taste_money)
}

// required int32 reciveseatid = 4;
inline bool expresionMsg::has_reciveseatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void expresionMsg::set_has_reciveseatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void expresionMsg::clear_has_reciveseatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void expresionMsg::clear_reciveseatid() {
  reciveseatid_ = 0;
  clear_has_reciveseatid();
}
inline ::google::protobuf::int32 expresionMsg::reciveseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionMsg.reciveseatid)
  return reciveseatid_;
}
inline void expresionMsg::set_reciveseatid(::google::protobuf::int32 value) {
  set_has_reciveseatid();
  reciveseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionMsg.reciveseatid)
}

// required int32 expressionid = 5;
inline bool expresionMsg::has_expressionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void expresionMsg::set_has_expressionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void expresionMsg::clear_has_expressionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void expresionMsg::clear_expressionid() {
  expressionid_ = 0;
  clear_has_expressionid();
}
inline ::google::protobuf::int32 expresionMsg::expressionid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionMsg.expressionid)
  return expressionid_;
}
inline void expresionMsg::set_expressionid(::google::protobuf::int32 value) {
  set_has_expressionid();
  expressionid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionMsg.expressionid)
}

// required int32 tar_loveliness = 6;
inline bool expresionMsg::has_tar_loveliness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void expresionMsg::set_has_tar_loveliness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void expresionMsg::clear_has_tar_loveliness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void expresionMsg::clear_tar_loveliness() {
  tar_loveliness_ = 0;
  clear_has_tar_loveliness();
}
inline ::google::protobuf::int32 expresionMsg::tar_loveliness() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.expresionMsg.tar_loveliness)
  return tar_loveliness_;
}
inline void expresionMsg::set_tar_loveliness(::google::protobuf::int32 value) {
  set_has_tar_loveliness();
  tar_loveliness_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.expresionMsg.tar_loveliness)
}

// -------------------------------------------------------------------

// tableinfoMsg_TblPlayInfo_EatCard

// repeated int32 cards = 1;
inline int tableinfoMsg_TblPlayInfo_EatCard::cards_size() const {
  return cards_.size();
}
inline void tableinfoMsg_TblPlayInfo_EatCard::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo_EatCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard.cards)
  return cards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo_EatCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard.cards)
}
inline void tableinfoMsg_TblPlayInfo_EatCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo_EatCard::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo_EatCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// tableinfoMsg_TblPlayInfo_GangCard

// repeated int32 cards = 1;
inline int tableinfoMsg_TblPlayInfo_GangCard::cards_size() const {
  return cards_.size();
}
inline void tableinfoMsg_TblPlayInfo_GangCard::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo_GangCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.cards)
  return cards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo_GangCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.cards)
}
inline void tableinfoMsg_TblPlayInfo_GangCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo_GangCard::cards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo_GangCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.cards)
  return &cards_;
}

// required int32 type = 2;
inline bool tableinfoMsg_TblPlayInfo_GangCard::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tableinfoMsg_TblPlayInfo_GangCard::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tableinfoMsg_TblPlayInfo_GangCard::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tableinfoMsg_TblPlayInfo_GangCard::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo_GangCard::type() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.type)
  return type_;
}
inline void tableinfoMsg_TblPlayInfo_GangCard::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard.type)
}

// -------------------------------------------------------------------

// tableinfoMsg_TblPlayInfo

// required uint32 uid = 1;
inline bool tableinfoMsg_TblPlayInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tableinfoMsg_TblPlayInfo::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 tableinfoMsg_TblPlayInfo::uid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.uid)
  return uid_;
}
inline void tableinfoMsg_TblPlayInfo::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.uid)
}

// required int32 seatid = 2;
inline bool tableinfoMsg_TblPlayInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tableinfoMsg_TblPlayInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::seatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.seatid)
  return seatid_;
}
inline void tableinfoMsg_TblPlayInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.seatid)
}

// required int32 zhunbei = 3;
inline bool tableinfoMsg_TblPlayInfo::has_zhunbei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_zhunbei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_zhunbei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tableinfoMsg_TblPlayInfo::clear_zhunbei() {
  zhunbei_ = 0;
  clear_has_zhunbei();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::zhunbei() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.zhunbei)
  return zhunbei_;
}
inline void tableinfoMsg_TblPlayInfo::set_zhunbei(::google::protobuf::int32 value) {
  set_has_zhunbei();
  zhunbei_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.zhunbei)
}

// required int32 betting = 4;
inline bool tableinfoMsg_TblPlayInfo::has_betting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_betting() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_betting() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tableinfoMsg_TblPlayInfo::clear_betting() {
  betting_ = 0;
  clear_has_betting();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::betting() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.betting)
  return betting_;
}
inline void tableinfoMsg_TblPlayInfo::set_betting(::google::protobuf::int32 value) {
  set_has_betting();
  betting_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.betting)
}

// required string name = 5;
inline bool tableinfoMsg_TblPlayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tableinfoMsg_TblPlayInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tableinfoMsg_TblPlayInfo::name() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.name)
  return *name_;
}
inline void tableinfoMsg_TblPlayInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.name)
}
inline void tableinfoMsg_TblPlayInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.tableinfoMsg.TblPlayInfo.name)
}
inline void tableinfoMsg_TblPlayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.tableinfoMsg.TblPlayInfo.name)
}
inline ::std::string* tableinfoMsg_TblPlayInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.TblPlayInfo.name)
  return name_;
}
inline ::std::string* tableinfoMsg_TblPlayInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tableinfoMsg_TblPlayInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.tableinfoMsg.TblPlayInfo.name)
}

// required int32 sex = 6;
inline bool tableinfoMsg_TblPlayInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tableinfoMsg_TblPlayInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::sex() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.sex)
  return sex_;
}
inline void tableinfoMsg_TblPlayInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.sex)
}

// required string avatar = 7;
inline bool tableinfoMsg_TblPlayInfo::has_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tableinfoMsg_TblPlayInfo::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& tableinfoMsg_TblPlayInfo::avatar() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar)
  return *avatar_;
}
inline void tableinfoMsg_TblPlayInfo::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar)
}
inline void tableinfoMsg_TblPlayInfo::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar)
}
inline void tableinfoMsg_TblPlayInfo::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar)
}
inline ::std::string* tableinfoMsg_TblPlayInfo::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar)
  return avatar_;
}
inline ::std::string* tableinfoMsg_TblPlayInfo::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tableinfoMsg_TblPlayInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar)
}

// required string avatar_1 = 8;
inline bool tableinfoMsg_TblPlayInfo::has_avatar_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_avatar_1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_avatar_1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tableinfoMsg_TblPlayInfo::clear_avatar_1() {
  if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_->clear();
  }
  clear_has_avatar_1();
}
inline const ::std::string& tableinfoMsg_TblPlayInfo::avatar_1() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar_1)
  return *avatar_1_;
}
inline void tableinfoMsg_TblPlayInfo::set_avatar_1(const ::std::string& value) {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  avatar_1_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar_1)
}
inline void tableinfoMsg_TblPlayInfo::set_avatar_1(const char* value) {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  avatar_1_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar_1)
}
inline void tableinfoMsg_TblPlayInfo::set_avatar_1(const char* value, size_t size) {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  avatar_1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar_1)
}
inline ::std::string* tableinfoMsg_TblPlayInfo::mutable_avatar_1() {
  set_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar_1)
  return avatar_1_;
}
inline ::std::string* tableinfoMsg_TblPlayInfo::release_avatar_1() {
  clear_has_avatar_1();
  if (avatar_1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_1_;
    avatar_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tableinfoMsg_TblPlayInfo::set_allocated_avatar_1(::std::string* avatar_1) {
  if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_1_;
  }
  if (avatar_1) {
    set_has_avatar_1();
    avatar_1_ = avatar_1;
  } else {
    clear_has_avatar_1();
    avatar_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.tableinfoMsg.TblPlayInfo.avatar_1)
}

// required int32 max_fan = 9;
inline bool tableinfoMsg_TblPlayInfo::has_max_fan() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_max_fan() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_max_fan() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tableinfoMsg_TblPlayInfo::clear_max_fan() {
  max_fan_ = 0;
  clear_has_max_fan();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::max_fan() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.max_fan)
  return max_fan_;
}
inline void tableinfoMsg_TblPlayInfo::set_max_fan(::google::protobuf::int32 value) {
  set_has_max_fan();
  max_fan_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.max_fan)
}

// required int32 loveliness_amt = 10;
inline bool tableinfoMsg_TblPlayInfo::has_loveliness_amt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_loveliness_amt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_loveliness_amt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tableinfoMsg_TblPlayInfo::clear_loveliness_amt() {
  loveliness_amt_ = 0;
  clear_has_loveliness_amt();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::loveliness_amt() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.loveliness_amt)
  return loveliness_amt_;
}
inline void tableinfoMsg_TblPlayInfo::set_loveliness_amt(::google::protobuf::int32 value) {
  set_has_loveliness_amt();
  loveliness_amt_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.loveliness_amt)
}

// required int64 total_win_money = 11;
inline bool tableinfoMsg_TblPlayInfo::has_total_win_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_total_win_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_total_win_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tableinfoMsg_TblPlayInfo::clear_total_win_money() {
  total_win_money_ = GOOGLE_LONGLONG(0);
  clear_has_total_win_money();
}
inline ::google::protobuf::int64 tableinfoMsg_TblPlayInfo::total_win_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.total_win_money)
  return total_win_money_;
}
inline void tableinfoMsg_TblPlayInfo::set_total_win_money(::google::protobuf::int64 value) {
  set_has_total_win_money();
  total_win_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.total_win_money)
}

// required int64 money = 12;
inline bool tableinfoMsg_TblPlayInfo::has_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tableinfoMsg_TblPlayInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 tableinfoMsg_TblPlayInfo::money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.money)
  return money_;
}
inline void tableinfoMsg_TblPlayInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.money)
}

// required int32 total_board = 13;
inline bool tableinfoMsg_TblPlayInfo::has_total_board() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_total_board() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_total_board() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_total_board() {
  total_board_ = 0;
  clear_has_total_board();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::total_board() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.total_board)
  return total_board_;
}
inline void tableinfoMsg_TblPlayInfo::set_total_board(::google::protobuf::int32 value) {
  set_has_total_board();
  total_board_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.total_board)
}

// required int32 total_win = 14;
inline bool tableinfoMsg_TblPlayInfo::has_total_win() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_total_win() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_total_win() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_total_win() {
  total_win_ = 0;
  clear_has_total_win();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::total_win() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.total_win)
  return total_win_;
}
inline void tableinfoMsg_TblPlayInfo::set_total_win(::google::protobuf::int32 value) {
  set_has_total_win();
  total_win_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.total_win)
}

// required int32 vlevel = 15;
inline bool tableinfoMsg_TblPlayInfo::has_vlevel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_vlevel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_vlevel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_vlevel() {
  vlevel_ = 0;
  clear_has_vlevel();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::vlevel() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.vlevel)
  return vlevel_;
}
inline void tableinfoMsg_TblPlayInfo::set_vlevel(::google::protobuf::int32 value) {
  set_has_vlevel();
  vlevel_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.vlevel)
}

// optional int32 train_money = 16;
inline bool tableinfoMsg_TblPlayInfo::has_train_money() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_train_money() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_train_money() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_train_money() {
  train_money_ = 0;
  clear_has_train_money();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::train_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.train_money)
  return train_money_;
}
inline void tableinfoMsg_TblPlayInfo::set_train_money(::google::protobuf::int32 value) {
  set_has_train_money();
  train_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.train_money)
}

// required string ps = 25;
inline bool tableinfoMsg_TblPlayInfo::has_ps() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_ps() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_ps() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_ps() {
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_->clear();
  }
  clear_has_ps();
}
inline const ::std::string& tableinfoMsg_TblPlayInfo::ps() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.ps)
  return *ps_;
}
inline void tableinfoMsg_TblPlayInfo::set_ps(const ::std::string& value) {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  ps_->assign(value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.ps)
}
inline void tableinfoMsg_TblPlayInfo::set_ps(const char* value) {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  ps_->assign(value);
  // @@protoc_insertion_point(field_set_char:mahjong_msg.tableinfoMsg.TblPlayInfo.ps)
}
inline void tableinfoMsg_TblPlayInfo::set_ps(const char* value, size_t size) {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  ps_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mahjong_msg.tableinfoMsg.TblPlayInfo.ps)
}
inline ::std::string* tableinfoMsg_TblPlayInfo::mutable_ps() {
  set_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ps_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.TblPlayInfo.ps)
  return ps_;
}
inline ::std::string* tableinfoMsg_TblPlayInfo::release_ps() {
  clear_has_ps();
  if (ps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ps_;
    ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tableinfoMsg_TblPlayInfo::set_allocated_ps(::std::string* ps) {
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ps_;
  }
  if (ps) {
    set_has_ps();
    ps_ = ps;
  } else {
    clear_has_ps();
    ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mahjong_msg.tableinfoMsg.TblPlayInfo.ps)
}

// required int32 hpstate = 26;
inline bool tableinfoMsg_TblPlayInfo::has_hpstate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_hpstate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_hpstate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_hpstate() {
  hpstate_ = 0;
  clear_has_hpstate();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::hpstate() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.hpstate)
  return hpstate_;
}
inline void tableinfoMsg_TblPlayInfo::set_hpstate(::google::protobuf::int32 value) {
  set_has_hpstate();
  hpstate_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.hpstate)
}

// required int32 quetype = 27;
inline bool tableinfoMsg_TblPlayInfo::has_quetype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_quetype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_quetype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_quetype() {
  quetype_ = 0;
  clear_has_quetype();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::quetype() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.quetype)
  return quetype_;
}
inline void tableinfoMsg_TblPlayInfo::set_quetype(::google::protobuf::int32 value) {
  set_has_quetype();
  quetype_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.quetype)
}

// required int32 zmcount = 28;
inline bool tableinfoMsg_TblPlayInfo::has_zmcount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_zmcount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_zmcount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_zmcount() {
  zmcount_ = 0;
  clear_has_zmcount();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::zmcount() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.zmcount)
  return zmcount_;
}
inline void tableinfoMsg_TblPlayInfo::set_zmcount(::google::protobuf::int32 value) {
  set_has_zmcount();
  zmcount_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.zmcount)
}

// required int32 hpcount = 29;
inline bool tableinfoMsg_TblPlayInfo::has_hpcount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_hpcount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_hpcount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_hpcount() {
  hpcount_ = 0;
  clear_has_hpcount();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::hpcount() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.hpcount)
  return hpcount_;
}
inline void tableinfoMsg_TblPlayInfo::set_hpcount(::google::protobuf::int32 value) {
  set_has_hpcount();
  hpcount_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.hpcount)
}

// required int32 is_baoting = 30;
inline bool tableinfoMsg_TblPlayInfo::has_is_baoting() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_is_baoting() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_is_baoting() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_is_baoting() {
  is_baoting_ = 0;
  clear_has_is_baoting();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::is_baoting() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.is_baoting)
  return is_baoting_;
}
inline void tableinfoMsg_TblPlayInfo::set_is_baoting(::google::protobuf::int32 value) {
  set_has_is_baoting();
  is_baoting_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.is_baoting)
}

// required int32 pass_hu_count = 31;
inline bool tableinfoMsg_TblPlayInfo::has_pass_hu_count() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_pass_hu_count() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_pass_hu_count() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_pass_hu_count() {
  pass_hu_count_ = 0;
  clear_has_pass_hu_count();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::pass_hu_count() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.pass_hu_count)
  return pass_hu_count_;
}
inline void tableinfoMsg_TblPlayInfo::set_pass_hu_count(::google::protobuf::int32 value) {
  set_has_pass_hu_count();
  pass_hu_count_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.pass_hu_count)
}

// required int32 is_give_up = 32;
inline bool tableinfoMsg_TblPlayInfo::has_is_give_up() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_is_give_up() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_is_give_up() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_is_give_up() {
  is_give_up_ = 0;
  clear_has_is_give_up();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::is_give_up() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.is_give_up)
  return is_give_up_;
}
inline void tableinfoMsg_TblPlayInfo::set_is_give_up(::google::protobuf::int32 value) {
  set_has_is_give_up();
  is_give_up_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.is_give_up)
}

// required int32 is_quit = 33;
inline bool tableinfoMsg_TblPlayInfo::has_is_quit() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_is_quit() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_is_quit() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_is_quit() {
  is_quit_ = 0;
  clear_has_is_quit();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::is_quit() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.is_quit)
  return is_quit_;
}
inline void tableinfoMsg_TblPlayInfo::set_is_quit(::google::protobuf::int32 value) {
  set_has_is_quit();
  is_quit_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.is_quit)
}

// required int32 handlenum = 34;
inline bool tableinfoMsg_TblPlayInfo::has_handlenum() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_handlenum() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_handlenum() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_handlenum() {
  handlenum_ = 0;
  clear_has_handlenum();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::handlenum() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.handlenum)
  return handlenum_;
}
inline void tableinfoMsg_TblPlayInfo::set_handlenum(::google::protobuf::int32 value) {
  set_has_handlenum();
  handlenum_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.handlenum)
}

// optional int32 last_get_card = 35;
inline bool tableinfoMsg_TblPlayInfo::has_last_get_card() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tableinfoMsg_TblPlayInfo::set_has_last_get_card() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_has_last_get_card() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tableinfoMsg_TblPlayInfo::clear_last_get_card() {
  last_get_card_ = 0;
  clear_has_last_get_card();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::last_get_card() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.last_get_card)
  return last_get_card_;
}
inline void tableinfoMsg_TblPlayInfo::set_last_get_card(::google::protobuf::int32 value) {
  set_has_last_get_card();
  last_get_card_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.last_get_card)
}

// repeated int32 handcards = 40;
inline int tableinfoMsg_TblPlayInfo::handcards_size() const {
  return handcards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_handcards() {
  handcards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::handcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.handcards)
  return handcards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo::set_handcards(int index, ::google::protobuf::int32 value) {
  handcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.handcards)
}
inline void tableinfoMsg_TblPlayInfo::add_handcards(::google::protobuf::int32 value) {
  handcards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.handcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo::handcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.handcards)
  return handcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo::mutable_handcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.handcards)
  return &handcards_;
}

// repeated int32 outcards = 41;
inline int tableinfoMsg_TblPlayInfo::outcards_size() const {
  return outcards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_outcards() {
  outcards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::outcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.outcards)
  return outcards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo::set_outcards(int index, ::google::protobuf::int32 value) {
  outcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.outcards)
}
inline void tableinfoMsg_TblPlayInfo::add_outcards(::google::protobuf::int32 value) {
  outcards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.outcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo::outcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.outcards)
  return outcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo::mutable_outcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.outcards)
  return &outcards_;
}

// repeated int32 pengcards = 42;
inline int tableinfoMsg_TblPlayInfo::pengcards_size() const {
  return pengcards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_pengcards() {
  pengcards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::pengcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.pengcards)
  return pengcards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo::set_pengcards(int index, ::google::protobuf::int32 value) {
  pengcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.pengcards)
}
inline void tableinfoMsg_TblPlayInfo::add_pengcards(::google::protobuf::int32 value) {
  pengcards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.pengcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo::pengcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.pengcards)
  return pengcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo::mutable_pengcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.pengcards)
  return &pengcards_;
}

// repeated int32 flowercards = 43;
inline int tableinfoMsg_TblPlayInfo::flowercards_size() const {
  return flowercards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_flowercards() {
  flowercards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::flowercards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.flowercards)
  return flowercards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo::set_flowercards(int index, ::google::protobuf::int32 value) {
  flowercards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.flowercards)
}
inline void tableinfoMsg_TblPlayInfo::add_flowercards(::google::protobuf::int32 value) {
  flowercards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.flowercards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo::flowercards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.flowercards)
  return flowercards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo::mutable_flowercards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.flowercards)
  return &flowercards_;
}

// repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard eatcards = 44;
inline int tableinfoMsg_TblPlayInfo::eatcards_size() const {
  return eatcards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_eatcards() {
  eatcards_.Clear();
}
inline const ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard& tableinfoMsg_TblPlayInfo::eatcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.eatcards)
  return eatcards_.Get(index);
}
inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard* tableinfoMsg_TblPlayInfo::mutable_eatcards(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.TblPlayInfo.eatcards)
  return eatcards_.Mutable(index);
}
inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard* tableinfoMsg_TblPlayInfo::add_eatcards() {
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.eatcards)
  return eatcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard >&
tableinfoMsg_TblPlayInfo::eatcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.eatcards)
  return eatcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_EatCard >*
tableinfoMsg_TblPlayInfo::mutable_eatcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.eatcards)
  return &eatcards_;
}

// repeated int32 hucards = 45;
inline int tableinfoMsg_TblPlayInfo::hucards_size() const {
  return hucards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_hucards() {
  hucards_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::hucards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.hucards)
  return hucards_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo::set_hucards(int index, ::google::protobuf::int32 value) {
  hucards_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.hucards)
}
inline void tableinfoMsg_TblPlayInfo::add_hucards(::google::protobuf::int32 value) {
  hucards_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.hucards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo::hucards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.hucards)
  return hucards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo::mutable_hucards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.hucards)
  return &hucards_;
}

// repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard gangcards = 46;
inline int tableinfoMsg_TblPlayInfo::gangcards_size() const {
  return gangcards_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_gangcards() {
  gangcards_.Clear();
}
inline const ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard& tableinfoMsg_TblPlayInfo::gangcards(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.gangcards)
  return gangcards_.Get(index);
}
inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard* tableinfoMsg_TblPlayInfo::mutable_gangcards(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.TblPlayInfo.gangcards)
  return gangcards_.Mutable(index);
}
inline ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard* tableinfoMsg_TblPlayInfo::add_gangcards() {
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.gangcards)
  return gangcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard >&
tableinfoMsg_TblPlayInfo::gangcards() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.gangcards)
  return gangcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo_GangCard >*
tableinfoMsg_TblPlayInfo::mutable_gangcards() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.gangcards)
  return &gangcards_;
}

// repeated int32 hpinfos = 47;
inline int tableinfoMsg_TblPlayInfo::hpinfos_size() const {
  return hpinfos_.size();
}
inline void tableinfoMsg_TblPlayInfo::clear_hpinfos() {
  hpinfos_.Clear();
}
inline ::google::protobuf::int32 tableinfoMsg_TblPlayInfo::hpinfos(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.TblPlayInfo.hpinfos)
  return hpinfos_.Get(index);
}
inline void tableinfoMsg_TblPlayInfo::set_hpinfos(int index, ::google::protobuf::int32 value) {
  hpinfos_.Set(index, value);
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.TblPlayInfo.hpinfos)
}
inline void tableinfoMsg_TblPlayInfo::add_hpinfos(::google::protobuf::int32 value) {
  hpinfos_.Add(value);
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.TblPlayInfo.hpinfos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tableinfoMsg_TblPlayInfo::hpinfos() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.TblPlayInfo.hpinfos)
  return hpinfos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tableinfoMsg_TblPlayInfo::mutable_hpinfos() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.TblPlayInfo.hpinfos)
  return &hpinfos_;
}

// -------------------------------------------------------------------

// tableinfoMsg

// required uint32 state = 1;
inline bool tableinfoMsg::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tableinfoMsg::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tableinfoMsg::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tableinfoMsg::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 tableinfoMsg::state() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.state)
  return state_;
}
inline void tableinfoMsg::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.state)
}

// required int32 cd = 2;
inline bool tableinfoMsg::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tableinfoMsg::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tableinfoMsg::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tableinfoMsg::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 tableinfoMsg::cd() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.cd)
  return cd_;
}
inline void tableinfoMsg::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.cd)
}

// required int32 base_money = 3;
inline bool tableinfoMsg::has_base_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tableinfoMsg::set_has_base_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tableinfoMsg::clear_has_base_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tableinfoMsg::clear_base_money() {
  base_money_ = 0;
  clear_has_base_money();
}
inline ::google::protobuf::int32 tableinfoMsg::base_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.base_money)
  return base_money_;
}
inline void tableinfoMsg::set_base_money(::google::protobuf::int32 value) {
  set_has_base_money();
  base_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.base_money)
}

// required int32 min_money = 4;
inline bool tableinfoMsg::has_min_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tableinfoMsg::set_has_min_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tableinfoMsg::clear_has_min_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tableinfoMsg::clear_min_money() {
  min_money_ = 0;
  clear_has_min_money();
}
inline ::google::protobuf::int32 tableinfoMsg::min_money() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.min_money)
  return min_money_;
}
inline void tableinfoMsg::set_min_money(::google::protobuf::int32 value) {
  set_has_min_money();
  min_money_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.min_money)
}

// required int32 cardnums = 5;
inline bool tableinfoMsg::has_cardnums() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tableinfoMsg::set_has_cardnums() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tableinfoMsg::clear_has_cardnums() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tableinfoMsg::clear_cardnums() {
  cardnums_ = 0;
  clear_has_cardnums();
}
inline ::google::protobuf::int32 tableinfoMsg::cardnums() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.cardnums)
  return cardnums_;
}
inline void tableinfoMsg::set_cardnums(::google::protobuf::int32 value) {
  set_has_cardnums();
  cardnums_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.cardnums)
}

// required int32 robot = 6;
inline bool tableinfoMsg::has_robot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tableinfoMsg::set_has_robot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tableinfoMsg::clear_has_robot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tableinfoMsg::clear_robot() {
  robot_ = 0;
  clear_has_robot();
}
inline ::google::protobuf::int32 tableinfoMsg::robot() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.robot)
  return robot_;
}
inline void tableinfoMsg::set_robot(::google::protobuf::int32 value) {
  set_has_robot();
  robot_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.robot)
}

// required int32 magicexpressioncost = 7;
inline bool tableinfoMsg::has_magicexpressioncost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tableinfoMsg::set_has_magicexpressioncost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tableinfoMsg::clear_has_magicexpressioncost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tableinfoMsg::clear_magicexpressioncost() {
  magicexpressioncost_ = 0;
  clear_has_magicexpressioncost();
}
inline ::google::protobuf::int32 tableinfoMsg::magicexpressioncost() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.magicexpressioncost)
  return magicexpressioncost_;
}
inline void tableinfoMsg::set_magicexpressioncost(::google::protobuf::int32 value) {
  set_has_magicexpressioncost();
  magicexpressioncost_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.magicexpressioncost)
}

// required int32 dealseatid = 8;
inline bool tableinfoMsg::has_dealseatid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tableinfoMsg::set_has_dealseatid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tableinfoMsg::clear_has_dealseatid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tableinfoMsg::clear_dealseatid() {
  dealseatid_ = 0;
  clear_has_dealseatid();
}
inline ::google::protobuf::int32 tableinfoMsg::dealseatid() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.dealseatid)
  return dealseatid_;
}
inline void tableinfoMsg::set_dealseatid(::google::protobuf::int32 value) {
  set_has_dealseatid();
  dealseatid_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.dealseatid)
}

// required int32 roomfee = 9;
inline bool tableinfoMsg::has_roomfee() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tableinfoMsg::set_has_roomfee() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tableinfoMsg::clear_has_roomfee() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tableinfoMsg::clear_roomfee() {
  roomfee_ = 0;
  clear_has_roomfee();
}
inline ::google::protobuf::int32 tableinfoMsg::roomfee() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.roomfee)
  return roomfee_;
}
inline void tableinfoMsg::set_roomfee(::google::protobuf::int32 value) {
  set_has_roomfee();
  roomfee_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.roomfee)
}

// required int32 auto_giveup = 10;
inline bool tableinfoMsg::has_auto_giveup() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tableinfoMsg::set_has_auto_giveup() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tableinfoMsg::clear_has_auto_giveup() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tableinfoMsg::clear_auto_giveup() {
  auto_giveup_ = 0;
  clear_has_auto_giveup();
}
inline ::google::protobuf::int32 tableinfoMsg::auto_giveup() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.auto_giveup)
  return auto_giveup_;
}
inline void tableinfoMsg::set_auto_giveup(::google::protobuf::int32 value) {
  set_has_auto_giveup();
  auto_giveup_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.auto_giveup)
}

// required int32 round_flag = 11;
inline bool tableinfoMsg::has_round_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tableinfoMsg::set_has_round_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tableinfoMsg::clear_has_round_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tableinfoMsg::clear_round_flag() {
  round_flag_ = 0;
  clear_has_round_flag();
}
inline ::google::protobuf::int32 tableinfoMsg::round_flag() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.round_flag)
  return round_flag_;
}
inline void tableinfoMsg::set_round_flag(::google::protobuf::int32 value) {
  set_has_round_flag();
  round_flag_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.round_flag)
}

// required int32 limit_max_win = 12;
inline bool tableinfoMsg::has_limit_max_win() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tableinfoMsg::set_has_limit_max_win() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tableinfoMsg::clear_has_limit_max_win() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tableinfoMsg::clear_limit_max_win() {
  limit_max_win_ = 0;
  clear_has_limit_max_win();
}
inline ::google::protobuf::int32 tableinfoMsg::limit_max_win() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.limit_max_win)
  return limit_max_win_;
}
inline void tableinfoMsg::set_limit_max_win(::google::protobuf::int32 value) {
  set_has_limit_max_win();
  limit_max_win_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.limit_max_win)
}

// required int32 cli_hb_interval = 13;
inline bool tableinfoMsg::has_cli_hb_interval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tableinfoMsg::set_has_cli_hb_interval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tableinfoMsg::clear_has_cli_hb_interval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tableinfoMsg::clear_cli_hb_interval() {
  cli_hb_interval_ = 0;
  clear_has_cli_hb_interval();
}
inline ::google::protobuf::int32 tableinfoMsg::cli_hb_interval() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.cli_hb_interval)
  return cli_hb_interval_;
}
inline void tableinfoMsg::set_cli_hb_interval(::google::protobuf::int32 value) {
  set_has_cli_hb_interval();
  cli_hb_interval_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.cli_hb_interval)
}

// required int32 pass_hu_twice = 14;
inline bool tableinfoMsg::has_pass_hu_twice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tableinfoMsg::set_has_pass_hu_twice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tableinfoMsg::clear_has_pass_hu_twice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tableinfoMsg::clear_pass_hu_twice() {
  pass_hu_twice_ = 0;
  clear_has_pass_hu_twice();
}
inline ::google::protobuf::int32 tableinfoMsg::pass_hu_twice() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.pass_hu_twice)
  return pass_hu_twice_;
}
inline void tableinfoMsg::set_pass_hu_twice(::google::protobuf::int32 value) {
  set_has_pass_hu_twice();
  pass_hu_twice_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.pass_hu_twice)
}

// required int32 max_pass_hu = 15;
inline bool tableinfoMsg::has_max_pass_hu() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tableinfoMsg::set_has_max_pass_hu() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tableinfoMsg::clear_has_max_pass_hu() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tableinfoMsg::clear_max_pass_hu() {
  max_pass_hu_ = 0;
  clear_has_max_pass_hu();
}
inline ::google::protobuf::int32 tableinfoMsg::max_pass_hu() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.max_pass_hu)
  return max_pass_hu_;
}
inline void tableinfoMsg::set_max_pass_hu(::google::protobuf::int32 value) {
  set_has_max_pass_hu();
  max_pass_hu_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.max_pass_hu)
}

// required int32 room_id = 16;
inline bool tableinfoMsg::has_room_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tableinfoMsg::set_has_room_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tableinfoMsg::clear_has_room_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tableinfoMsg::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 tableinfoMsg::room_id() const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.room_id)
  return room_id_;
}
inline void tableinfoMsg::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:mahjong_msg.tableinfoMsg.room_id)
}

// repeated .mahjong_msg.tableinfoMsg.TblPlayInfo players = 17;
inline int tableinfoMsg::players_size() const {
  return players_.size();
}
inline void tableinfoMsg::clear_players() {
  players_.Clear();
}
inline const ::mahjong_msg::tableinfoMsg_TblPlayInfo& tableinfoMsg::players(int index) const {
  // @@protoc_insertion_point(field_get:mahjong_msg.tableinfoMsg.players)
  return players_.Get(index);
}
inline ::mahjong_msg::tableinfoMsg_TblPlayInfo* tableinfoMsg::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:mahjong_msg.tableinfoMsg.players)
  return players_.Mutable(index);
}
inline ::mahjong_msg::tableinfoMsg_TblPlayInfo* tableinfoMsg::add_players() {
  // @@protoc_insertion_point(field_add:mahjong_msg.tableinfoMsg.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo >&
tableinfoMsg::players() const {
  // @@protoc_insertion_point(field_list:mahjong_msg.tableinfoMsg.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::mahjong_msg::tableinfoMsg_TblPlayInfo >*
tableinfoMsg::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:mahjong_msg.tableinfoMsg.players)
  return &players_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mahjong_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mahjong_5fmsg_2eproto__INCLUDED
