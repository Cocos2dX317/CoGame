// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mahjong_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mahjong_msg {

namespace {

const ::google::protobuf::Descriptor* loginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* loginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* logoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* logoutMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logoutMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* getonlineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getonlineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getonlineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getonlineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* xuanqueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xuanqueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* xuanqueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  xuanqueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* huanpaiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  huanpaiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* huanpaiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  huanpaiResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* canclerobotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  canclerobotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* canclerobotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  canclerobotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifyreadyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifyreadyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* alertMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  alertMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* readyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  readyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* goreadyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  goreadyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifygamestartMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifygamestartMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadmoneyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadmoneyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* replaceflowerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  replaceflowerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifyhuanpaiMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifyhuanpaiMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifyxuanqueMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifyxuanqueMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifyxqresultMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifyxqresultMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifyxqresultMsg_XQResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifyxqresultMsg_XQResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifyhpresultMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifyhpresultMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* loginMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  loginMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* dealcardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dealcardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* dealcardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dealcardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* selfdealMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  selfdealMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* selfdealMsg_EatCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  selfdealMsg_EatCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* notifynextdealMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notifynextdealMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* dealcardMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dealcardMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* dealcardMsg_DealEnds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dealcardMsg_DealEnds_reflection_ = NULL;
const ::google::protobuf::Descriptor* dealcardMsg_GangCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dealcardMsg_GangCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* gameendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gameendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* gameendMsg_PlayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gameendMsg_PlayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* gameendMsg_FanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gameendMsg_FanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* chatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* giveupMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  giveupMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* chatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* normalexpresionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  normalexpresionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* normalexpresionMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  normalexpresionMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* expresionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  expresionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* expresionMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  expresionMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* tableinfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tableinfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* tableinfoMsg_TblPlayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tableinfoMsg_TblPlayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tableinfoMsg_TblPlayInfo_EatCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tableinfoMsg_TblPlayInfo_EatCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tableinfoMsg_TblPlayInfo_GangCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tableinfoMsg_TblPlayInfo_GangCard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mahjong_5fmsg_2eproto() {
  protobuf_AddDesc_mahjong_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mahjong_msg.proto");
  GOOGLE_CHECK(file != NULL);
  loginRequest_descriptor_ = file->message_type(0);
  static const int loginRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, skey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, min_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, room_id_),
  };
  loginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginRequest_descriptor_,
      loginRequest::default_instance_,
      loginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginRequest));
  loginResponse_descriptor_ = file->message_type(1);
  static const int loginResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginResponse, vid_),
  };
  loginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginResponse_descriptor_,
      loginResponse::default_instance_,
      loginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginResponse));
  logoutRequest_descriptor_ = file->message_type(2);
  static const int logoutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutRequest, uid_),
  };
  logoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logoutRequest_descriptor_,
      logoutRequest::default_instance_,
      logoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logoutRequest));
  logoutMsg_descriptor_ = file->message_type(3);
  static const int logoutMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutMsg, logout_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutMsg, alertstr_),
  };
  logoutMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logoutMsg_descriptor_,
      logoutMsg::default_instance_,
      logoutMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logoutMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logoutMsg));
  getonlineRequest_descriptor_ = file->message_type(4);
  static const int getonlineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineRequest, uid_),
  };
  getonlineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getonlineRequest_descriptor_,
      getonlineRequest::default_instance_,
      getonlineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getonlineRequest));
  getonlineResponse_descriptor_ = file->message_type(5);
  static const int getonlineResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineResponse, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineResponse, activecount_),
  };
  getonlineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getonlineResponse_descriptor_,
      getonlineResponse::default_instance_,
      getonlineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getonlineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getonlineResponse));
  xuanqueRequest_descriptor_ = file->message_type(6);
  static const int xuanqueRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xuanqueRequest, quetype_),
  };
  xuanqueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xuanqueRequest_descriptor_,
      xuanqueRequest::default_instance_,
      xuanqueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xuanqueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xuanqueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xuanqueRequest));
  xuanqueResponse_descriptor_ = file->message_type(7);
  static const int xuanqueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xuanqueResponse, uid_),
  };
  xuanqueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      xuanqueResponse_descriptor_,
      xuanqueResponse::default_instance_,
      xuanqueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xuanqueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(xuanqueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(xuanqueResponse));
  huanpaiRequest_descriptor_ = file->message_type(8);
  static const int huanpaiRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiRequest, card_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiRequest, card_index_),
  };
  huanpaiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      huanpaiRequest_descriptor_,
      huanpaiRequest::default_instance_,
      huanpaiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(huanpaiRequest));
  huanpaiResponse_descriptor_ = file->message_type(9);
  static const int huanpaiResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiResponse, uid_),
  };
  huanpaiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      huanpaiResponse_descriptor_,
      huanpaiResponse::default_instance_,
      huanpaiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(huanpaiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(huanpaiResponse));
  canclerobotRequest_descriptor_ = file->message_type(10);
  static const int canclerobotRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canclerobotRequest, uid_),
  };
  canclerobotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      canclerobotRequest_descriptor_,
      canclerobotRequest::default_instance_,
      canclerobotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canclerobotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canclerobotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(canclerobotRequest));
  canclerobotResponse_descriptor_ = file->message_type(11);
  static const int canclerobotResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canclerobotResponse, uid_),
  };
  canclerobotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      canclerobotResponse_descriptor_,
      canclerobotResponse::default_instance_,
      canclerobotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canclerobotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canclerobotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(canclerobotResponse));
  notifyreadyMsg_descriptor_ = file->message_type(12);
  static const int notifyreadyMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyreadyMsg, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyreadyMsg, flag_),
  };
  notifyreadyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifyreadyMsg_descriptor_,
      notifyreadyMsg::default_instance_,
      notifyreadyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyreadyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyreadyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifyreadyMsg));
  alertMsg_descriptor_ = file->message_type(13);
  static const int alertMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alertMsg, alertstr_),
  };
  alertMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      alertMsg_descriptor_,
      alertMsg::default_instance_,
      alertMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alertMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(alertMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(alertMsg));
  readyRequest_descriptor_ = file->message_type(14);
  static const int readyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readyRequest, uid_),
  };
  readyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      readyRequest_descriptor_,
      readyRequest::default_instance_,
      readyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(readyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(readyRequest));
  goreadyMsg_descriptor_ = file->message_type(15);
  static const int goreadyMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goreadyMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goreadyMsg, uid_),
  };
  goreadyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      goreadyMsg_descriptor_,
      goreadyMsg::default_instance_,
      goreadyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goreadyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(goreadyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(goreadyMsg));
  notifygamestartMsg_descriptor_ = file->message_type(16);
  static const int notifygamestartMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, bseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, buid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, p1_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, p2_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, train_money_),
  };
  notifygamestartMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifygamestartMsg_descriptor_,
      notifygamestartMsg::default_instance_,
      notifygamestartMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifygamestartMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifygamestartMsg));
  broadmoneyMsg_descriptor_ = file->message_type(17);
  static const int broadmoneyMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadmoneyMsg, players_money_),
  };
  broadmoneyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadmoneyMsg_descriptor_,
      broadmoneyMsg::default_instance_,
      broadmoneyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadmoneyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadmoneyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadmoneyMsg));
  replaceflowerMsg_descriptor_ = file->message_type(18);
  static const int replaceflowerMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replaceflowerMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replaceflowerMsg, take_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replaceflowerMsg, flower_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replaceflowerMsg, start_game_),
  };
  replaceflowerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      replaceflowerMsg_descriptor_,
      replaceflowerMsg::default_instance_,
      replaceflowerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replaceflowerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replaceflowerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(replaceflowerMsg));
  notifyhuanpaiMsg_descriptor_ = file->message_type(19);
  static const int notifyhuanpaiMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhuanpaiMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhuanpaiMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhuanpaiMsg, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhuanpaiMsg, hpinfos_),
  };
  notifyhuanpaiMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifyhuanpaiMsg_descriptor_,
      notifyhuanpaiMsg::default_instance_,
      notifyhuanpaiMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhuanpaiMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhuanpaiMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifyhuanpaiMsg));
  notifyxuanqueMsg_descriptor_ = file->message_type(20);
  static const int notifyxuanqueMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxuanqueMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxuanqueMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxuanqueMsg, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxuanqueMsg, quetype_),
  };
  notifyxuanqueMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifyxuanqueMsg_descriptor_,
      notifyxuanqueMsg::default_instance_,
      notifyxuanqueMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxuanqueMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxuanqueMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifyxuanqueMsg));
  notifyxqresultMsg_descriptor_ = file->message_type(21);
  static const int notifyxqresultMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg, xq_result_),
  };
  notifyxqresultMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifyxqresultMsg_descriptor_,
      notifyxqresultMsg::default_instance_,
      notifyxqresultMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifyxqresultMsg));
  notifyxqresultMsg_XQResult_descriptor_ = notifyxqresultMsg_descriptor_->nested_type(0);
  static const int notifyxqresultMsg_XQResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg_XQResult, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg_XQResult, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg_XQResult, quetype_),
  };
  notifyxqresultMsg_XQResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifyxqresultMsg_XQResult_descriptor_,
      notifyxqresultMsg_XQResult::default_instance_,
      notifyxqresultMsg_XQResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg_XQResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyxqresultMsg_XQResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifyxqresultMsg_XQResult));
  notifyhpresultMsg_descriptor_ = file->message_type(22);
  static const int notifyhpresultMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhpresultMsg, hpinfos_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhpresultMsg, hpinfos_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhpresultMsg, getinfos_),
  };
  notifyhpresultMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifyhpresultMsg_descriptor_,
      notifyhpresultMsg::default_instance_,
      notifyhpresultMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhpresultMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifyhpresultMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifyhpresultMsg));
  loginMsg_descriptor_ = file->message_type(23);
  static const int loginMsg_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, betting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, avatar_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, max_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, loveliness_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, total_win_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, train_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, taste_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, total_board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, vlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, ps_),
  };
  loginMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      loginMsg_descriptor_,
      loginMsg::default_instance_,
      loginMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(loginMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(loginMsg));
  dealcardRequest_descriptor_ = file->message_type(24);
  static const int dealcardRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardRequest, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardRequest, cardv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardRequest, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardRequest, index_),
  };
  dealcardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dealcardRequest_descriptor_,
      dealcardRequest::default_instance_,
      dealcardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dealcardRequest));
  dealcardResponse_descriptor_ = file->message_type(25);
  static const int dealcardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardResponse, uid_),
  };
  dealcardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dealcardResponse_descriptor_,
      dealcardResponse::default_instance_,
      dealcardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dealcardResponse));
  selfdealMsg_descriptor_ = file->message_type(26);
  static const int selfdealMsg_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, ftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, cardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, t_cardv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, cardv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, dealinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, eatcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, train_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, taste_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, pengcv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, other_t_cardv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, other_cardv_),
  };
  selfdealMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      selfdealMsg_descriptor_,
      selfdealMsg::default_instance_,
      selfdealMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(selfdealMsg));
  selfdealMsg_EatCard_descriptor_ = selfdealMsg_descriptor_->nested_type(0);
  static const int selfdealMsg_EatCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg_EatCard, cards_),
  };
  selfdealMsg_EatCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      selfdealMsg_EatCard_descriptor_,
      selfdealMsg_EatCard::default_instance_,
      selfdealMsg_EatCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg_EatCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(selfdealMsg_EatCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(selfdealMsg_EatCard));
  notifynextdealMsg_descriptor_ = file->message_type(27);
  static const int notifynextdealMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifynextdealMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifynextdealMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifynextdealMsg, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifynextdealMsg, cd_),
  };
  notifynextdealMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notifynextdealMsg_descriptor_,
      notifynextdealMsg::default_instance_,
      notifynextdealMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifynextdealMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notifynextdealMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notifynextdealMsg));
  dealcardMsg_descriptor_ = file->message_type(28);
  static const int dealcardMsg_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, dealcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, cardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, cardv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, otype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, zmcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, hpcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, train_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, taste_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, lastseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, qgflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, dealends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, mflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, qgdeal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, handcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, gangcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, pass_hu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, tianting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, haidilaoyue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, miaoshouhuichun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, qgseatid_),
  };
  dealcardMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dealcardMsg_descriptor_,
      dealcardMsg::default_instance_,
      dealcardMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dealcardMsg));
  dealcardMsg_DealEnds_descriptor_ = dealcardMsg_descriptor_->nested_type(0);
  static const int dealcardMsg_DealEnds_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, beishu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, money_),
  };
  dealcardMsg_DealEnds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dealcardMsg_DealEnds_descriptor_,
      dealcardMsg_DealEnds::default_instance_,
      dealcardMsg_DealEnds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_DealEnds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dealcardMsg_DealEnds));
  dealcardMsg_GangCard_descriptor_ = dealcardMsg_descriptor_->nested_type(1);
  static const int dealcardMsg_GangCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_GangCard, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_GangCard, type_),
  };
  dealcardMsg_GangCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dealcardMsg_GangCard_descriptor_,
      dealcardMsg_GangCard::default_instance_,
      dealcardMsg_GangCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_GangCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dealcardMsg_GangCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dealcardMsg_GangCard));
  gameendMsg_descriptor_ = file->message_type(29);
  static const int gameendMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg, isliuju_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg, faninfos_),
  };
  gameendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gameendMsg_descriptor_,
      gameendMsg::default_instance_,
      gameendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gameendMsg));
  gameendMsg_PlayInfo_descriptor_ = gameendMsg_descriptor_->nested_type(0);
  static const int gameendMsg_PlayInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, beishu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, total_board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, max_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, loveliness_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, total_win_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, pass_hu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, train_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, taste_money_),
  };
  gameendMsg_PlayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gameendMsg_PlayInfo_descriptor_,
      gameendMsg_PlayInfo::default_instance_,
      gameendMsg_PlayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_PlayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gameendMsg_PlayInfo));
  gameendMsg_FanInfo_descriptor_ = gameendMsg_descriptor_->nested_type(1);
  static const int gameendMsg_FanInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_FanInfo, ftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_FanInfo, beishu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_FanInfo, winmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_FanInfo, otype_),
  };
  gameendMsg_FanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gameendMsg_FanInfo_descriptor_,
      gameendMsg_FanInfo::default_instance_,
      gameendMsg_FanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_FanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gameendMsg_FanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gameendMsg_FanInfo));
  chatRequest_descriptor_ = file->message_type(30);
  static const int chatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatRequest, chatid_),
  };
  chatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatRequest_descriptor_,
      chatRequest::default_instance_,
      chatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatRequest));
  giveupMsg_descriptor_ = file->message_type(31);
  static const int giveupMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(giveupMsg, seatid_),
  };
  giveupMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      giveupMsg_descriptor_,
      giveupMsg::default_instance_,
      giveupMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(giveupMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(giveupMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(giveupMsg));
  chatMsg_descriptor_ = file->message_type(32);
  static const int chatMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatMsg, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatMsg, chatid_),
  };
  chatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatMsg_descriptor_,
      chatMsg::default_instance_,
      chatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatMsg));
  normalexpresionRequest_descriptor_ = file->message_type(33);
  static const int normalexpresionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionRequest, expressionid_),
  };
  normalexpresionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      normalexpresionRequest_descriptor_,
      normalexpresionRequest::default_instance_,
      normalexpresionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(normalexpresionRequest));
  normalexpresionMsg_descriptor_ = file->message_type(34);
  static const int normalexpresionMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionMsg, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionMsg, expressionid_),
  };
  normalexpresionMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      normalexpresionMsg_descriptor_,
      normalexpresionMsg::default_instance_,
      normalexpresionMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(normalexpresionMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(normalexpresionMsg));
  expresionRequest_descriptor_ = file->message_type(35);
  static const int expresionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionRequest, targetuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionRequest, reciveseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionRequest, expressionid_),
  };
  expresionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      expresionRequest_descriptor_,
      expresionRequest::default_instance_,
      expresionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(expresionRequest));
  expresionMsg_descriptor_ = file->message_type(36);
  static const int expresionMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, sendseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, taste_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, reciveseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, expressionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, tar_loveliness_),
  };
  expresionMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      expresionMsg_descriptor_,
      expresionMsg::default_instance_,
      expresionMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(expresionMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(expresionMsg));
  tableinfoMsg_descriptor_ = file->message_type(37);
  static const int tableinfoMsg_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, min_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, cardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, magicexpressioncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, dealseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, roomfee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, auto_giveup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, round_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, limit_max_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, cli_hb_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, pass_hu_twice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, max_pass_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, players_),
  };
  tableinfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tableinfoMsg_descriptor_,
      tableinfoMsg::default_instance_,
      tableinfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tableinfoMsg));
  tableinfoMsg_TblPlayInfo_descriptor_ = tableinfoMsg_descriptor_->nested_type(0);
  static const int tableinfoMsg_TblPlayInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, zhunbei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, betting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, avatar_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, max_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, loveliness_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, total_win_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, total_board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, vlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, train_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, ps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, hpstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, quetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, zmcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, hpcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, is_baoting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, pass_hu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, is_give_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, is_quit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, handlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, last_get_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, handcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, outcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, pengcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, flowercards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, eatcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, hucards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, gangcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, hpinfos_),
  };
  tableinfoMsg_TblPlayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tableinfoMsg_TblPlayInfo_descriptor_,
      tableinfoMsg_TblPlayInfo::default_instance_,
      tableinfoMsg_TblPlayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tableinfoMsg_TblPlayInfo));
  tableinfoMsg_TblPlayInfo_EatCard_descriptor_ = tableinfoMsg_TblPlayInfo_descriptor_->nested_type(0);
  static const int tableinfoMsg_TblPlayInfo_EatCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_EatCard, cards_),
  };
  tableinfoMsg_TblPlayInfo_EatCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tableinfoMsg_TblPlayInfo_EatCard_descriptor_,
      tableinfoMsg_TblPlayInfo_EatCard::default_instance_,
      tableinfoMsg_TblPlayInfo_EatCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_EatCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_EatCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tableinfoMsg_TblPlayInfo_EatCard));
  tableinfoMsg_TblPlayInfo_GangCard_descriptor_ = tableinfoMsg_TblPlayInfo_descriptor_->nested_type(1);
  static const int tableinfoMsg_TblPlayInfo_GangCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_GangCard, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_GangCard, type_),
  };
  tableinfoMsg_TblPlayInfo_GangCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tableinfoMsg_TblPlayInfo_GangCard_descriptor_,
      tableinfoMsg_TblPlayInfo_GangCard::default_instance_,
      tableinfoMsg_TblPlayInfo_GangCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_GangCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tableinfoMsg_TblPlayInfo_GangCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tableinfoMsg_TblPlayInfo_GangCard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mahjong_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginRequest_descriptor_, &loginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginResponse_descriptor_, &loginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logoutRequest_descriptor_, &logoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logoutMsg_descriptor_, &logoutMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getonlineRequest_descriptor_, &getonlineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getonlineResponse_descriptor_, &getonlineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xuanqueRequest_descriptor_, &xuanqueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    xuanqueResponse_descriptor_, &xuanqueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    huanpaiRequest_descriptor_, &huanpaiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    huanpaiResponse_descriptor_, &huanpaiResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    canclerobotRequest_descriptor_, &canclerobotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    canclerobotResponse_descriptor_, &canclerobotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifyreadyMsg_descriptor_, &notifyreadyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    alertMsg_descriptor_, &alertMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    readyRequest_descriptor_, &readyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    goreadyMsg_descriptor_, &goreadyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifygamestartMsg_descriptor_, &notifygamestartMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadmoneyMsg_descriptor_, &broadmoneyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    replaceflowerMsg_descriptor_, &replaceflowerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifyhuanpaiMsg_descriptor_, &notifyhuanpaiMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifyxuanqueMsg_descriptor_, &notifyxuanqueMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifyxqresultMsg_descriptor_, &notifyxqresultMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifyxqresultMsg_XQResult_descriptor_, &notifyxqresultMsg_XQResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifyhpresultMsg_descriptor_, &notifyhpresultMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    loginMsg_descriptor_, &loginMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dealcardRequest_descriptor_, &dealcardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dealcardResponse_descriptor_, &dealcardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    selfdealMsg_descriptor_, &selfdealMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    selfdealMsg_EatCard_descriptor_, &selfdealMsg_EatCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notifynextdealMsg_descriptor_, &notifynextdealMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dealcardMsg_descriptor_, &dealcardMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dealcardMsg_DealEnds_descriptor_, &dealcardMsg_DealEnds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dealcardMsg_GangCard_descriptor_, &dealcardMsg_GangCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gameendMsg_descriptor_, &gameendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gameendMsg_PlayInfo_descriptor_, &gameendMsg_PlayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gameendMsg_FanInfo_descriptor_, &gameendMsg_FanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatRequest_descriptor_, &chatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    giveupMsg_descriptor_, &giveupMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatMsg_descriptor_, &chatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    normalexpresionRequest_descriptor_, &normalexpresionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    normalexpresionMsg_descriptor_, &normalexpresionMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    expresionRequest_descriptor_, &expresionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    expresionMsg_descriptor_, &expresionMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tableinfoMsg_descriptor_, &tableinfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tableinfoMsg_TblPlayInfo_descriptor_, &tableinfoMsg_TblPlayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tableinfoMsg_TblPlayInfo_EatCard_descriptor_, &tableinfoMsg_TblPlayInfo_EatCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tableinfoMsg_TblPlayInfo_GangCard_descriptor_, &tableinfoMsg_TblPlayInfo_GangCard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mahjong_5fmsg_2eproto() {
  delete loginRequest::default_instance_;
  delete loginRequest_reflection_;
  delete loginResponse::default_instance_;
  delete loginResponse_reflection_;
  delete logoutRequest::default_instance_;
  delete logoutRequest_reflection_;
  delete logoutMsg::default_instance_;
  delete logoutMsg_reflection_;
  delete getonlineRequest::default_instance_;
  delete getonlineRequest_reflection_;
  delete getonlineResponse::default_instance_;
  delete getonlineResponse_reflection_;
  delete xuanqueRequest::default_instance_;
  delete xuanqueRequest_reflection_;
  delete xuanqueResponse::default_instance_;
  delete xuanqueResponse_reflection_;
  delete huanpaiRequest::default_instance_;
  delete huanpaiRequest_reflection_;
  delete huanpaiResponse::default_instance_;
  delete huanpaiResponse_reflection_;
  delete canclerobotRequest::default_instance_;
  delete canclerobotRequest_reflection_;
  delete canclerobotResponse::default_instance_;
  delete canclerobotResponse_reflection_;
  delete notifyreadyMsg::default_instance_;
  delete notifyreadyMsg_reflection_;
  delete alertMsg::default_instance_;
  delete alertMsg_reflection_;
  delete readyRequest::default_instance_;
  delete readyRequest_reflection_;
  delete goreadyMsg::default_instance_;
  delete goreadyMsg_reflection_;
  delete notifygamestartMsg::default_instance_;
  delete notifygamestartMsg_reflection_;
  delete broadmoneyMsg::default_instance_;
  delete broadmoneyMsg_reflection_;
  delete replaceflowerMsg::default_instance_;
  delete replaceflowerMsg_reflection_;
  delete notifyhuanpaiMsg::default_instance_;
  delete notifyhuanpaiMsg_reflection_;
  delete notifyxuanqueMsg::default_instance_;
  delete notifyxuanqueMsg_reflection_;
  delete notifyxqresultMsg::default_instance_;
  delete notifyxqresultMsg_reflection_;
  delete notifyxqresultMsg_XQResult::default_instance_;
  delete notifyxqresultMsg_XQResult_reflection_;
  delete notifyhpresultMsg::default_instance_;
  delete notifyhpresultMsg_reflection_;
  delete loginMsg::default_instance_;
  delete loginMsg_reflection_;
  delete dealcardRequest::default_instance_;
  delete dealcardRequest_reflection_;
  delete dealcardResponse::default_instance_;
  delete dealcardResponse_reflection_;
  delete selfdealMsg::default_instance_;
  delete selfdealMsg_reflection_;
  delete selfdealMsg_EatCard::default_instance_;
  delete selfdealMsg_EatCard_reflection_;
  delete notifynextdealMsg::default_instance_;
  delete notifynextdealMsg_reflection_;
  delete dealcardMsg::default_instance_;
  delete dealcardMsg_reflection_;
  delete dealcardMsg_DealEnds::default_instance_;
  delete dealcardMsg_DealEnds_reflection_;
  delete dealcardMsg_GangCard::default_instance_;
  delete dealcardMsg_GangCard_reflection_;
  delete gameendMsg::default_instance_;
  delete gameendMsg_reflection_;
  delete gameendMsg_PlayInfo::default_instance_;
  delete gameendMsg_PlayInfo_reflection_;
  delete gameendMsg_FanInfo::default_instance_;
  delete gameendMsg_FanInfo_reflection_;
  delete chatRequest::default_instance_;
  delete chatRequest_reflection_;
  delete giveupMsg::default_instance_;
  delete giveupMsg_reflection_;
  delete chatMsg::default_instance_;
  delete chatMsg_reflection_;
  delete normalexpresionRequest::default_instance_;
  delete normalexpresionRequest_reflection_;
  delete normalexpresionMsg::default_instance_;
  delete normalexpresionMsg_reflection_;
  delete expresionRequest::default_instance_;
  delete expresionRequest_reflection_;
  delete expresionMsg::default_instance_;
  delete expresionMsg_reflection_;
  delete tableinfoMsg::default_instance_;
  delete tableinfoMsg_reflection_;
  delete tableinfoMsg_TblPlayInfo::default_instance_;
  delete tableinfoMsg_TblPlayInfo_reflection_;
  delete tableinfoMsg_TblPlayInfo_EatCard::default_instance_;
  delete tableinfoMsg_TblPlayInfo_EatCard_reflection_;
  delete tableinfoMsg_TblPlayInfo_GangCard::default_instance_;
  delete tableinfoMsg_TblPlayInfo_GangCard_reflection_;
}

void protobuf_AddDesc_mahjong_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021mahjong_msg.proto\022\013mahjong_msg\"e\n\014logi"
    "nRequest\022\014\n\004skey\030\001 \002(\t\022\017\n\007version\030\002 \002(\t\022"
    "\022\n\nbase_money\030\003 \001(\005\022\021\n\tmin_money\030\004 \001(\005\022\017"
    "\n\007room_id\030\005 \001(\005\"\034\n\rloginResponse\022\013\n\003vid\030"
    "\001 \002(\005\"\034\n\rlogoutRequest\022\013\n\003uid\030\001 \001(\r\"O\n\tl"
    "ogoutMsg\022\013\n\003uid\030\001 \002(\r\022\016\n\006seatid\030\002 \002(\005\022\023\n"
    "\013logout_type\030\003 \002(\005\022\020\n\010alertStr\030\004 \002(\t\"\037\n\020"
    "getonlineRequest\022\013\n\003uid\030\001 \001(\r\"8\n\021getonli"
    "neResponse\022\016\n\006online\030\001 \002(\r\022\023\n\013activecoun"
    "t\030\002 \002(\r\"!\n\016xuanqueRequest\022\017\n\007quetype\030\001 \002"
    "(\005\"\036\n\017xuanqueResponse\022\013\n\003uid\030\001 \001(\r\"8\n\016hu"
    "anpaiRequest\022\022\n\ncard_value\030\001 \003(\005\022\022\n\ncard"
    "_index\030\002 \003(\005\"\036\n\017huanpaiResponse\022\013\n\003uid\030\001"
    " \001(\r\"!\n\022canclerobotRequest\022\013\n\003uid\030\001 \001(\r\""
    "\"\n\023canclerobotResponse\022\013\n\003uid\030\001 \001(\r\"*\n\016n"
    "otifyreadyMsg\022\n\n\002cd\030\001 \002(\005\022\014\n\004flag\030\002 \002(\005\""
    "\034\n\010alertMsg\022\020\n\010alertStr\030\001 \002(\t\"\033\n\014readyRe"
    "quest\022\013\n\003uid\030\001 \001(\r\")\n\ngoreadyMsg\022\016\n\006seat"
    "id\030\001 \002(\005\022\013\n\003uid\030\002 \002(\005\"\207\001\n\022notifygamestar"
    "tMsg\022\016\n\006seatid\030\001 \002(\005\022\017\n\007bseatid\030\002 \002(\005\022\014\n"
    "\004buid\030\003 \002(\r\022\016\n\006p1_num\030\004 \002(\005\022\016\n\006p2_num\030\005 "
    "\002(\005\022\r\n\005cards\030\006 \003(\005\022\023\n\013train_money\030\007 \001(\005\""
    "&\n\rbroadmoneyMsg\022\025\n\rplayers_money\030\001 \003(\005\""
    "`\n\020replaceflowerMsg\022\016\n\006seatid\030\001 \002(\005\022\022\n\nt"
    "ake_cards\030\002 \003(\005\022\024\n\014flower_cards\030\003 \003(\005\022\022\n"
    "\nstart_game\030\004 \001(\005\"N\n\020notifyhuanpaiMsg\022\016\n"
    "\006seatid\030\001 \002(\005\022\r\n\005state\030\002 \002(\r\022\n\n\002cd\030\003 \002(\005"
    "\022\017\n\007hpinfos\030\004 \003(\005\"N\n\020notifyxuanqueMsg\022\016\n"
    "\006seatid\030\001 \002(\005\022\r\n\005state\030\002 \002(\r\022\n\n\002cd\030\003 \002(\005"
    "\022\017\n\007quetype\030\004 \002(\005\"\211\001\n\021notifyxqresultMsg\022"
    ":\n\txq_result\030\001 \003(\0132\'.mahjong_msg.notifyx"
    "qresultMsg.XQResult\0328\n\010XQResult\022\016\n\006seati"
    "d\030\001 \002(\005\022\013\n\003uid\030\002 \002(\r\022\017\n\007quetype\030\003 \002(\005\"S\n"
    "\021notifyhpresultMsg\022\025\n\rhpinfos_index\030\001 \003("
    "\005\022\025\n\rhpinfos_value\030\002 \003(\005\022\020\n\010getinfos\030\003 \003"
    "(\005\"\247\002\n\010loginMsg\022\016\n\006seatid\030\002 \002(\005\022\017\n\007betti"
    "ng\030\003 \002(\005\022\014\n\004name\030\004 \002(\t\022\013\n\003sex\030\005 \002(\005\022\016\n\006a"
    "vatar\030\006 \002(\t\022\020\n\010avatar_1\030\007 \002(\t\022\017\n\007max_fan"
    "\030\010 \002(\005\022\026\n\016loveliness_amt\030\t \002(\005\022\027\n\017total_"
    "win_money\030\n \002(\003\022\r\n\005money\030\013 \002(\003\022\023\n\013train_"
    "money\030\014 \002(\003\022\023\n\013taste_money\030\r \002(\003\022\023\n\013tota"
    "l_board\030\016 \002(\005\022\021\n\ttotal_win\030\017 \002(\005\022\016\n\006vlev"
    "el\030\020 \002(\005\022\n\n\002ps\030\021 \002(\t\"N\n\017dealcardRequest\022"
    "\r\n\005dtype\030\001 \002(\005\022\r\n\005cardv\030\002 \002(\005\022\016\n\006seatid\030"
    "\003 \002(\005\022\r\n\005index\030\004 \002(\005\"\037\n\020dealcardResponse"
    "\022\013\n\003uid\030\001 \001(\r\"\334\002\n\013selfdealMsg\022\016\n\006seatid\030"
    "\001 \002(\005\022\r\n\005ftype\030\002 \002(\005\022\r\n\005money\030\003 \002(\003\022\020\n\010c"
    "ardnums\030\004 \002(\005\022\n\n\002cd\030\005 \002(\005\022\017\n\007t_cardv\030\006 \002"
    "(\005\022\r\n\005cardv\030\007 \002(\005\022\021\n\tdealinfos\030\010 \003(\005\022\r\n\005"
    "cards\030\t \003(\005\0222\n\010eatcards\030\n \003(\0132 .mahjong_"
    "msg.selfdealMsg.EatCard\022\013\n\003uid\030\013 \002(\r\022\023\n\013"
    "train_money\030\014 \002(\005\022\023\n\013taste_money\030\r \002(\005\022\016"
    "\n\006pengcv\030\016 \001(\005\022\025\n\rother_t_cardv\030\017 \001(\005\022\023\n"
    "\013other_cardv\030\020 \001(\005\032\030\n\007EatCard\022\r\n\005cards\030\001"
    " \003(\005\"K\n\021notifynextdealMsg\022\013\n\003uid\030\001 \002(\r\022\016"
    "\n\006seatid\030\002 \002(\005\022\r\n\005robot\030\003 \002(\005\022\n\n\002cd\030\004 \002("
    "\005\"\223\005\n\013dealcardMsg\022\021\n\tdealcards\030\001 \003(\005\022\013\n\003"
    "uid\030\002 \002(\r\022\016\n\006seatid\030\003 \002(\005\022\020\n\010cardnums\030\004 "
    "\002(\005\022\r\n\005cardv\030\005 \002(\005\022\r\n\005index\030\006 \002(\005\022\r\n\005dty"
    "pe\030\007 \002(\005\022\r\n\005otype\030\010 \002(\005\022\017\n\007zmcount\030\t \002(\005"
    "\022\017\n\007hpcount\030\n \002(\005\022\r\n\005money\030\013 \002(\003\022\023\n\013trai"
    "n_money\030\014 \002(\005\022\023\n\013taste_money\030\r \002(\005\022\022\n\nla"
    "stseatid\030\016 \002(\005\022\016\n\006qgflag\030\017 \002(\005\0223\n\010dealen"
    "ds\030\020 \003(\0132!.mahjong_msg.dealcardMsg.DealE"
    "nds\022\r\n\005mflag\030\021 \001(\005\022\016\n\006qgdeal\030\022 \001(\005\022\021\n\tha"
    "ndcards\030\023 \003(\005\0224\n\tgangcards\030\024 \003(\0132!.mahjo"
    "ng_msg.dealcardMsg.GangCard\022\025\n\rpass_hu_c"
    "ount\030\025 \001(\005\022\020\n\010tianting\030\026 \001(\010\022\023\n\013haidilao"
    "yue\030\027 \001(\010\022\027\n\017miaoshouhuichun\030\030 \001(\010\022\020\n\010qg"
    "seatid\030\031 \001(\005\032X\n\010DealEnds\022\013\n\003uid\030\001 \002(\r\022\016\n"
    "\006seatid\030\002 \002(\005\022\016\n\006beishu\030\003 \002(\005\022\020\n\010winmone"
    "y\030\004 \002(\003\022\r\n\005money\030\005 \002(\003\032\'\n\010GangCard\022\r\n\005ca"
    "rds\030\001 \003(\005\022\014\n\004type\030\002 \002(\005\"\361\003\n\ngameendMsg\022\017"
    "\n\007isliuju\030\001 \002(\005\0221\n\007players\030\002 \003(\0132 .mahjo"
    "ng_msg.gameendMsg.PlayInfo\0221\n\010faninfos\030\003"
    " \003(\0132\037.mahjong_msg.gameendMsg.FanInfo\032\240\002"
    "\n\010PlayInfo\022\013\n\003uid\030\001 \002(\r\022\016\n\006seatid\030\002 \002(\005\022"
    "\014\n\004name\030\003 \002(\t\022\020\n\010winmoney\030\004 \002(\003\022\016\n\006beish"
    "u\030\005 \002(\005\022\023\n\013total_board\030\006 \002(\005\022\021\n\ttotal_wi"
    "n\030\007 \002(\005\022\r\n\005money\030\010 \002(\003\022\017\n\007max_fan\030\t \002(\005\022"
    "\026\n\016loveliness_amt\030\n \002(\005\022\027\n\017total_win_mon"
    "ey\030\013 \002(\003\022\r\n\005cards\030\014 \003(\005\022\025\n\rpass_hu_count"
    "\030\016 \001(\005\022\023\n\013train_money\030\017 \001(\005\022\023\n\013taste_mon"
    "ey\030\020 \001(\005\032I\n\007FanInfo\022\r\n\005ftype\030\001 \002(\t\022\016\n\006be"
    "ishu\030\002 \002(\005\022\020\n\010winmoney\030\003 \001(\003\022\r\n\005otype\030\004 "
    "\001(\005\"+\n\013chatRequest\022\014\n\004text\030\001 \002(\t\022\016\n\006chat"
    "id\030\002 \002(\005\"\033\n\tgiveupMsg\022\016\n\006seatid\030\001 \002(\005\"D\n"
    "\007chatMsg\022\013\n\003uid\030\001 \002(\r\022\016\n\006seatid\030\002 \002(\005\022\014\n"
    "\004text\030\003 \002(\t\022\016\n\006chatid\030\004 \002(\005\".\n\026normalexp"
    "resionRequest\022\024\n\014expressionid\030\001 \002(\005\"U\n\022n"
    "ormalexpresionMsg\022\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002"
    " \002(\t\022\016\n\006seatid\030\003 \002(\005\022\024\n\014expressionid\030\004 \002"
    "(\005\"Q\n\020expresionRequest\022\021\n\ttargetuid\030\001 \002("
    "\005\022\024\n\014reciveseatid\030\002 \002(\005\022\024\n\014expressionid\030"
    "\003 \002(\005\"\212\001\n\014expresionMsg\022\022\n\nsendseatid\030\001 \002"
    "(\005\022\r\n\005money\030\002 \002(\003\022\023\n\013taste_money\030\003 \002(\005\022\024"
    "\n\014reciveseatid\030\004 \002(\005\022\024\n\014expressionid\030\005 \002"
    "(\005\022\026\n\016tar_loveliness\030\006 \002(\005\"\253\t\n\014tableinfo"
    "Msg\022\r\n\005state\030\001 \002(\r\022\n\n\002cd\030\002 \002(\005\022\022\n\nbase_m"
    "oney\030\003 \002(\005\022\021\n\tmin_money\030\004 \002(\005\022\020\n\010cardnum"
    "s\030\005 \002(\005\022\r\n\005robot\030\006 \002(\005\022\033\n\023magicexpressio"
    "ncost\030\007 \002(\005\022\022\n\ndealseatid\030\010 \002(\005\022\017\n\007roomf"
    "ee\030\t \002(\005\022\023\n\013auto_giveup\030\n \002(\005\022\022\n\nround_f"
    "lag\030\013 \002(\005\022\025\n\rlimit_max_win\030\014 \002(\005\022\027\n\017cli_"
    "hb_interval\030\r \002(\005\022\025\n\rpass_hu_twice\030\016 \002(\005"
    "\022\023\n\013max_pass_hu\030\017 \002(\005\022\017\n\007room_id\030\020 \002(\005\0226"
    "\n\007players\030\021 \003(\0132%.mahjong_msg.tableinfoM"
    "sg.TblPlayInfo\032\247\006\n\013TblPlayInfo\022\013\n\003uid\030\001 "
    "\002(\r\022\016\n\006seatid\030\002 \002(\005\022\017\n\007zhunbei\030\003 \002(\005\022\017\n\007"
    "betting\030\004 \002(\005\022\014\n\004name\030\005 \002(\t\022\013\n\003sex\030\006 \002(\005"
    "\022\016\n\006avatar\030\007 \002(\t\022\020\n\010avatar_1\030\010 \002(\t\022\017\n\007ma"
    "x_fan\030\t \002(\005\022\026\n\016loveliness_amt\030\n \002(\005\022\027\n\017t"
    "otal_win_money\030\013 \002(\003\022\r\n\005money\030\014 \002(\003\022\023\n\013t"
    "otal_board\030\r \002(\005\022\021\n\ttotal_win\030\016 \002(\005\022\016\n\006v"
    "level\030\017 \002(\005\022\023\n\013train_money\030\020 \001(\005\022\n\n\002ps\030\031"
    " \002(\t\022\017\n\007hpstate\030\032 \002(\005\022\017\n\007quetype\030\033 \002(\005\022\017"
    "\n\007zmcount\030\034 \002(\005\022\017\n\007hpcount\030\035 \002(\005\022\022\n\nis_b"
    "aoting\030\036 \002(\005\022\025\n\rpass_hu_count\030\037 \002(\005\022\022\n\ni"
    "s_give_up\030  \002(\005\022\017\n\007is_quit\030! \002(\005\022\021\n\thand"
    "lenum\030\" \002(\005\022\025\n\rlast_get_card\030# \001(\005\022\021\n\tha"
    "ndcards\030( \003(\005\022\020\n\010outcards\030) \003(\005\022\021\n\tpengc"
    "ards\030* \003(\005\022\023\n\013flowercards\030+ \003(\005\022\?\n\010eatca"
    "rds\030, \003(\0132-.mahjong_msg.tableinfoMsg.Tbl"
    "PlayInfo.EatCard\022\017\n\007hucards\030- \003(\005\022A\n\tgan"
    "gcards\030. \003(\0132..mahjong_msg.tableinfoMsg."
    "TblPlayInfo.GangCard\022\017\n\007hpinfos\030/ \003(\005\032\030\n"
    "\007EatCard\022\r\n\005cards\030\001 \003(\005\032\'\n\010GangCard\022\r\n\005c"
    "ards\030\001 \003(\005\022\014\n\004type\030\002 \002(\005", 5104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mahjong_msg.proto", &protobuf_RegisterTypes);
  loginRequest::default_instance_ = new loginRequest();
  loginResponse::default_instance_ = new loginResponse();
  logoutRequest::default_instance_ = new logoutRequest();
  logoutMsg::default_instance_ = new logoutMsg();
  getonlineRequest::default_instance_ = new getonlineRequest();
  getonlineResponse::default_instance_ = new getonlineResponse();
  xuanqueRequest::default_instance_ = new xuanqueRequest();
  xuanqueResponse::default_instance_ = new xuanqueResponse();
  huanpaiRequest::default_instance_ = new huanpaiRequest();
  huanpaiResponse::default_instance_ = new huanpaiResponse();
  canclerobotRequest::default_instance_ = new canclerobotRequest();
  canclerobotResponse::default_instance_ = new canclerobotResponse();
  notifyreadyMsg::default_instance_ = new notifyreadyMsg();
  alertMsg::default_instance_ = new alertMsg();
  readyRequest::default_instance_ = new readyRequest();
  goreadyMsg::default_instance_ = new goreadyMsg();
  notifygamestartMsg::default_instance_ = new notifygamestartMsg();
  broadmoneyMsg::default_instance_ = new broadmoneyMsg();
  replaceflowerMsg::default_instance_ = new replaceflowerMsg();
  notifyhuanpaiMsg::default_instance_ = new notifyhuanpaiMsg();
  notifyxuanqueMsg::default_instance_ = new notifyxuanqueMsg();
  notifyxqresultMsg::default_instance_ = new notifyxqresultMsg();
  notifyxqresultMsg_XQResult::default_instance_ = new notifyxqresultMsg_XQResult();
  notifyhpresultMsg::default_instance_ = new notifyhpresultMsg();
  loginMsg::default_instance_ = new loginMsg();
  dealcardRequest::default_instance_ = new dealcardRequest();
  dealcardResponse::default_instance_ = new dealcardResponse();
  selfdealMsg::default_instance_ = new selfdealMsg();
  selfdealMsg_EatCard::default_instance_ = new selfdealMsg_EatCard();
  notifynextdealMsg::default_instance_ = new notifynextdealMsg();
  dealcardMsg::default_instance_ = new dealcardMsg();
  dealcardMsg_DealEnds::default_instance_ = new dealcardMsg_DealEnds();
  dealcardMsg_GangCard::default_instance_ = new dealcardMsg_GangCard();
  gameendMsg::default_instance_ = new gameendMsg();
  gameendMsg_PlayInfo::default_instance_ = new gameendMsg_PlayInfo();
  gameendMsg_FanInfo::default_instance_ = new gameendMsg_FanInfo();
  chatRequest::default_instance_ = new chatRequest();
  giveupMsg::default_instance_ = new giveupMsg();
  chatMsg::default_instance_ = new chatMsg();
  normalexpresionRequest::default_instance_ = new normalexpresionRequest();
  normalexpresionMsg::default_instance_ = new normalexpresionMsg();
  expresionRequest::default_instance_ = new expresionRequest();
  expresionMsg::default_instance_ = new expresionMsg();
  tableinfoMsg::default_instance_ = new tableinfoMsg();
  tableinfoMsg_TblPlayInfo::default_instance_ = new tableinfoMsg_TblPlayInfo();
  tableinfoMsg_TblPlayInfo_EatCard::default_instance_ = new tableinfoMsg_TblPlayInfo_EatCard();
  tableinfoMsg_TblPlayInfo_GangCard::default_instance_ = new tableinfoMsg_TblPlayInfo_GangCard();
  loginRequest::default_instance_->InitAsDefaultInstance();
  loginResponse::default_instance_->InitAsDefaultInstance();
  logoutRequest::default_instance_->InitAsDefaultInstance();
  logoutMsg::default_instance_->InitAsDefaultInstance();
  getonlineRequest::default_instance_->InitAsDefaultInstance();
  getonlineResponse::default_instance_->InitAsDefaultInstance();
  xuanqueRequest::default_instance_->InitAsDefaultInstance();
  xuanqueResponse::default_instance_->InitAsDefaultInstance();
  huanpaiRequest::default_instance_->InitAsDefaultInstance();
  huanpaiResponse::default_instance_->InitAsDefaultInstance();
  canclerobotRequest::default_instance_->InitAsDefaultInstance();
  canclerobotResponse::default_instance_->InitAsDefaultInstance();
  notifyreadyMsg::default_instance_->InitAsDefaultInstance();
  alertMsg::default_instance_->InitAsDefaultInstance();
  readyRequest::default_instance_->InitAsDefaultInstance();
  goreadyMsg::default_instance_->InitAsDefaultInstance();
  notifygamestartMsg::default_instance_->InitAsDefaultInstance();
  broadmoneyMsg::default_instance_->InitAsDefaultInstance();
  replaceflowerMsg::default_instance_->InitAsDefaultInstance();
  notifyhuanpaiMsg::default_instance_->InitAsDefaultInstance();
  notifyxuanqueMsg::default_instance_->InitAsDefaultInstance();
  notifyxqresultMsg::default_instance_->InitAsDefaultInstance();
  notifyxqresultMsg_XQResult::default_instance_->InitAsDefaultInstance();
  notifyhpresultMsg::default_instance_->InitAsDefaultInstance();
  loginMsg::default_instance_->InitAsDefaultInstance();
  dealcardRequest::default_instance_->InitAsDefaultInstance();
  dealcardResponse::default_instance_->InitAsDefaultInstance();
  selfdealMsg::default_instance_->InitAsDefaultInstance();
  selfdealMsg_EatCard::default_instance_->InitAsDefaultInstance();
  notifynextdealMsg::default_instance_->InitAsDefaultInstance();
  dealcardMsg::default_instance_->InitAsDefaultInstance();
  dealcardMsg_DealEnds::default_instance_->InitAsDefaultInstance();
  dealcardMsg_GangCard::default_instance_->InitAsDefaultInstance();
  gameendMsg::default_instance_->InitAsDefaultInstance();
  gameendMsg_PlayInfo::default_instance_->InitAsDefaultInstance();
  gameendMsg_FanInfo::default_instance_->InitAsDefaultInstance();
  chatRequest::default_instance_->InitAsDefaultInstance();
  giveupMsg::default_instance_->InitAsDefaultInstance();
  chatMsg::default_instance_->InitAsDefaultInstance();
  normalexpresionRequest::default_instance_->InitAsDefaultInstance();
  normalexpresionMsg::default_instance_->InitAsDefaultInstance();
  expresionRequest::default_instance_->InitAsDefaultInstance();
  expresionMsg::default_instance_->InitAsDefaultInstance();
  tableinfoMsg::default_instance_->InitAsDefaultInstance();
  tableinfoMsg_TblPlayInfo::default_instance_->InitAsDefaultInstance();
  tableinfoMsg_TblPlayInfo_EatCard::default_instance_->InitAsDefaultInstance();
  tableinfoMsg_TblPlayInfo_GangCard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mahjong_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mahjong_5fmsg_2eproto {
  StaticDescriptorInitializer_mahjong_5fmsg_2eproto() {
    protobuf_AddDesc_mahjong_5fmsg_2eproto();
  }
} static_descriptor_initializer_mahjong_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int loginRequest::kSkeyFieldNumber;
const int loginRequest::kVersionFieldNumber;
const int loginRequest::kBaseMoneyFieldNumber;
const int loginRequest::kMinMoneyFieldNumber;
const int loginRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

loginRequest::loginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.loginRequest)
}

void loginRequest::InitAsDefaultInstance() {
}

loginRequest::loginRequest(const loginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.loginRequest)
}

void loginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_money_ = 0;
  min_money_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginRequest::~loginRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.loginRequest)
  SharedDtor();
}

void loginRequest::SharedDtor() {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void loginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginRequest_descriptor_;
}

const loginRequest& loginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

loginRequest* loginRequest::default_instance_ = NULL;

loginRequest* loginRequest::New() const {
  return new loginRequest;
}

void loginRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<loginRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(base_money_, room_id_);
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skey_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.loginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string skey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skey().data(), this->skey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_base_money;
        break;
      }

      // optional int32 base_money = 3;
      case 3: {
        if (tag == 24) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_money;
        break;
      }

      // optional int32 min_money = 4;
      case 4: {
        if (tag == 32) {
         parse_min_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_money_)));
          set_has_min_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 5;
      case 5: {
        if (tag == 40) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.loginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.loginRequest)
  return false;
#undef DO_
}

void loginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.loginRequest)
  // required string skey = 1;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->skey(), output);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 base_money = 3;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->base_money(), output);
  }

  // optional int32 min_money = 4;
  if (has_min_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_money(), output);
  }

  // optional int32 room_id = 5;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.loginRequest)
}

::google::protobuf::uint8* loginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.loginRequest)
  // required string skey = 1;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->skey(), target);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 base_money = 3;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->base_money(), target);
  }

  // optional int32 min_money = 4;
  if (has_min_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_money(), target);
  }

  // optional int32 room_id = 5;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.loginRequest)
  return target;
}

int loginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string skey = 1;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skey());
    }

    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 base_money = 3;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // optional int32 min_money = 4;
    if (has_min_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_money());
    }

    // optional int32 room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginRequest::MergeFrom(const loginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skey()) {
      set_skey(from.skey());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_min_money()) {
      set_min_money(from.min_money());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginRequest::CopyFrom(const loginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void loginRequest::Swap(loginRequest* other) {
  if (other != this) {
    std::swap(skey_, other->skey_);
    std::swap(version_, other->version_);
    std::swap(base_money_, other->base_money_);
    std::swap(min_money_, other->min_money_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginRequest_descriptor_;
  metadata.reflection = loginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loginResponse::kVidFieldNumber;
#endif  // !_MSC_VER

loginResponse::loginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.loginResponse)
}

void loginResponse::InitAsDefaultInstance() {
}

loginResponse::loginResponse(const loginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.loginResponse)
}

void loginResponse::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginResponse::~loginResponse() {
  // @@protoc_insertion_point(destructor:mahjong_msg.loginResponse)
  SharedDtor();
}

void loginResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void loginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginResponse_descriptor_;
}

const loginResponse& loginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

loginResponse* loginResponse::default_instance_ = NULL;

loginResponse* loginResponse::New() const {
  return new loginResponse;
}

void loginResponse::Clear() {
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.loginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.loginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.loginResponse)
  return false;
#undef DO_
}

void loginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.loginResponse)
  // required int32 vid = 1;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.loginResponse)
}

::google::protobuf::uint8* loginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.loginResponse)
  // required int32 vid = 1;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.loginResponse)
  return target;
}

int loginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginResponse::MergeFrom(const loginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vid()) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginResponse::CopyFrom(const loginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void loginResponse::Swap(loginResponse* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginResponse_descriptor_;
  metadata.reflection = loginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int logoutRequest::kUidFieldNumber;
#endif  // !_MSC_VER

logoutRequest::logoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.logoutRequest)
}

void logoutRequest::InitAsDefaultInstance() {
}

logoutRequest::logoutRequest(const logoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.logoutRequest)
}

void logoutRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logoutRequest::~logoutRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.logoutRequest)
  SharedDtor();
}

void logoutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void logoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logoutRequest_descriptor_;
}

const logoutRequest& logoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

logoutRequest* logoutRequest::default_instance_ = NULL;

logoutRequest* logoutRequest::New() const {
  return new logoutRequest;
}

void logoutRequest::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.logoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.logoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.logoutRequest)
  return false;
#undef DO_
}

void logoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.logoutRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.logoutRequest)
}

::google::protobuf::uint8* logoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.logoutRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.logoutRequest)
  return target;
}

int logoutRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logoutRequest::MergeFrom(const logoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logoutRequest::CopyFrom(const logoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logoutRequest::IsInitialized() const {

  return true;
}

void logoutRequest::Swap(logoutRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logoutRequest_descriptor_;
  metadata.reflection = logoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int logoutMsg::kUidFieldNumber;
const int logoutMsg::kSeatidFieldNumber;
const int logoutMsg::kLogoutTypeFieldNumber;
const int logoutMsg::kAlertStrFieldNumber;
#endif  // !_MSC_VER

logoutMsg::logoutMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.logoutMsg)
}

void logoutMsg::InitAsDefaultInstance() {
}

logoutMsg::logoutMsg(const logoutMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.logoutMsg)
}

void logoutMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  logout_type_ = 0;
  alertstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logoutMsg::~logoutMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.logoutMsg)
  SharedDtor();
}

void logoutMsg::SharedDtor() {
  if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alertstr_;
  }
  if (this != default_instance_) {
  }
}

void logoutMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logoutMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logoutMsg_descriptor_;
}

const logoutMsg& logoutMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

logoutMsg* logoutMsg::default_instance_ = NULL;

logoutMsg* logoutMsg::New() const {
  return new logoutMsg;
}

void logoutMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<logoutMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, seatid_);
    logout_type_ = 0;
    if (has_alertstr()) {
      if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alertstr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logoutMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.logoutMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_logout_type;
        break;
      }

      // required int32 logout_type = 3;
      case 3: {
        if (tag == 24) {
         parse_logout_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_type_)));
          set_has_logout_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alertStr;
        break;
      }

      // required string alertStr = 4;
      case 4: {
        if (tag == 34) {
         parse_alertStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alertstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alertstr().data(), this->alertstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alertstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.logoutMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.logoutMsg)
  return false;
#undef DO_
}

void logoutMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.logoutMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required int32 logout_type = 3;
  if (has_logout_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logout_type(), output);
  }

  // required string alertStr = 4;
  if (has_alertstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alertstr().data(), this->alertstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alertstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alertstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.logoutMsg)
}

::google::protobuf::uint8* logoutMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.logoutMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required int32 logout_type = 3;
  if (has_logout_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logout_type(), target);
  }

  // required string alertStr = 4;
  if (has_alertstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alertstr().data(), this->alertstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alertstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alertstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.logoutMsg)
  return target;
}

int logoutMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 logout_type = 3;
    if (has_logout_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_type());
    }

    // required string alertStr = 4;
    if (has_alertstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alertstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logoutMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logoutMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logoutMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logoutMsg::MergeFrom(const logoutMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_logout_type()) {
      set_logout_type(from.logout_type());
    }
    if (from.has_alertstr()) {
      set_alertstr(from.alertstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logoutMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logoutMsg::CopyFrom(const logoutMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logoutMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void logoutMsg::Swap(logoutMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(logout_type_, other->logout_type_);
    std::swap(alertstr_, other->alertstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logoutMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logoutMsg_descriptor_;
  metadata.reflection = logoutMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getonlineRequest::kUidFieldNumber;
#endif  // !_MSC_VER

getonlineRequest::getonlineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.getonlineRequest)
}

void getonlineRequest::InitAsDefaultInstance() {
}

getonlineRequest::getonlineRequest(const getonlineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.getonlineRequest)
}

void getonlineRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getonlineRequest::~getonlineRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.getonlineRequest)
  SharedDtor();
}

void getonlineRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getonlineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getonlineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getonlineRequest_descriptor_;
}

const getonlineRequest& getonlineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

getonlineRequest* getonlineRequest::default_instance_ = NULL;

getonlineRequest* getonlineRequest::New() const {
  return new getonlineRequest;
}

void getonlineRequest::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getonlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.getonlineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.getonlineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.getonlineRequest)
  return false;
#undef DO_
}

void getonlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.getonlineRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.getonlineRequest)
}

::google::protobuf::uint8* getonlineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.getonlineRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.getonlineRequest)
  return target;
}

int getonlineRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getonlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getonlineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getonlineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getonlineRequest::MergeFrom(const getonlineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getonlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getonlineRequest::CopyFrom(const getonlineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getonlineRequest::IsInitialized() const {

  return true;
}

void getonlineRequest::Swap(getonlineRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getonlineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getonlineRequest_descriptor_;
  metadata.reflection = getonlineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getonlineResponse::kOnlineFieldNumber;
const int getonlineResponse::kActivecountFieldNumber;
#endif  // !_MSC_VER

getonlineResponse::getonlineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.getonlineResponse)
}

void getonlineResponse::InitAsDefaultInstance() {
}

getonlineResponse::getonlineResponse(const getonlineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.getonlineResponse)
}

void getonlineResponse::SharedCtor() {
  _cached_size_ = 0;
  online_ = 0u;
  activecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getonlineResponse::~getonlineResponse() {
  // @@protoc_insertion_point(destructor:mahjong_msg.getonlineResponse)
  SharedDtor();
}

void getonlineResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getonlineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getonlineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getonlineResponse_descriptor_;
}

const getonlineResponse& getonlineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

getonlineResponse* getonlineResponse::default_instance_ = NULL;

getonlineResponse* getonlineResponse::New() const {
  return new getonlineResponse;
}

void getonlineResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<getonlineResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(online_, activecount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getonlineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.getonlineResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activecount;
        break;
      }

      // required uint32 activecount = 2;
      case 2: {
        if (tag == 16) {
         parse_activecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activecount_)));
          set_has_activecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.getonlineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.getonlineResponse)
  return false;
#undef DO_
}

void getonlineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.getonlineResponse)
  // required uint32 online = 1;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online(), output);
  }

  // required uint32 activecount = 2;
  if (has_activecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.getonlineResponse)
}

::google::protobuf::uint8* getonlineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.getonlineResponse)
  // required uint32 online = 1;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->online(), target);
  }

  // required uint32 activecount = 2;
  if (has_activecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.getonlineResponse)
  return target;
}

int getonlineResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online = 1;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

    // required uint32 activecount = 2;
    if (has_activecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getonlineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getonlineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getonlineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getonlineResponse::MergeFrom(const getonlineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_activecount()) {
      set_activecount(from.activecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getonlineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getonlineResponse::CopyFrom(const getonlineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getonlineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void getonlineResponse::Swap(getonlineResponse* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(activecount_, other->activecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getonlineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getonlineResponse_descriptor_;
  metadata.reflection = getonlineResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xuanqueRequest::kQuetypeFieldNumber;
#endif  // !_MSC_VER

xuanqueRequest::xuanqueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.xuanqueRequest)
}

void xuanqueRequest::InitAsDefaultInstance() {
}

xuanqueRequest::xuanqueRequest(const xuanqueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.xuanqueRequest)
}

void xuanqueRequest::SharedCtor() {
  _cached_size_ = 0;
  quetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xuanqueRequest::~xuanqueRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.xuanqueRequest)
  SharedDtor();
}

void xuanqueRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xuanqueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xuanqueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xuanqueRequest_descriptor_;
}

const xuanqueRequest& xuanqueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

xuanqueRequest* xuanqueRequest::default_instance_ = NULL;

xuanqueRequest* xuanqueRequest::New() const {
  return new xuanqueRequest;
}

void xuanqueRequest::Clear() {
  quetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xuanqueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.xuanqueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quetype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quetype_)));
          set_has_quetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.xuanqueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.xuanqueRequest)
  return false;
#undef DO_
}

void xuanqueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.xuanqueRequest)
  // required int32 quetype = 1;
  if (has_quetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.xuanqueRequest)
}

::google::protobuf::uint8* xuanqueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.xuanqueRequest)
  // required int32 quetype = 1;
  if (has_quetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.xuanqueRequest)
  return target;
}

int xuanqueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quetype = 1;
    if (has_quetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xuanqueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xuanqueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xuanqueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xuanqueRequest::MergeFrom(const xuanqueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quetype()) {
      set_quetype(from.quetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xuanqueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xuanqueRequest::CopyFrom(const xuanqueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xuanqueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void xuanqueRequest::Swap(xuanqueRequest* other) {
  if (other != this) {
    std::swap(quetype_, other->quetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xuanqueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xuanqueRequest_descriptor_;
  metadata.reflection = xuanqueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int xuanqueResponse::kUidFieldNumber;
#endif  // !_MSC_VER

xuanqueResponse::xuanqueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.xuanqueResponse)
}

void xuanqueResponse::InitAsDefaultInstance() {
}

xuanqueResponse::xuanqueResponse(const xuanqueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.xuanqueResponse)
}

void xuanqueResponse::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

xuanqueResponse::~xuanqueResponse() {
  // @@protoc_insertion_point(destructor:mahjong_msg.xuanqueResponse)
  SharedDtor();
}

void xuanqueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void xuanqueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* xuanqueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return xuanqueResponse_descriptor_;
}

const xuanqueResponse& xuanqueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

xuanqueResponse* xuanqueResponse::default_instance_ = NULL;

xuanqueResponse* xuanqueResponse::New() const {
  return new xuanqueResponse;
}

void xuanqueResponse::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool xuanqueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.xuanqueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.xuanqueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.xuanqueResponse)
  return false;
#undef DO_
}

void xuanqueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.xuanqueResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.xuanqueResponse)
}

::google::protobuf::uint8* xuanqueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.xuanqueResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.xuanqueResponse)
  return target;
}

int xuanqueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void xuanqueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const xuanqueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const xuanqueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void xuanqueResponse::MergeFrom(const xuanqueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void xuanqueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void xuanqueResponse::CopyFrom(const xuanqueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool xuanqueResponse::IsInitialized() const {

  return true;
}

void xuanqueResponse::Swap(xuanqueResponse* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata xuanqueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = xuanqueResponse_descriptor_;
  metadata.reflection = xuanqueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int huanpaiRequest::kCardValueFieldNumber;
const int huanpaiRequest::kCardIndexFieldNumber;
#endif  // !_MSC_VER

huanpaiRequest::huanpaiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.huanpaiRequest)
}

void huanpaiRequest::InitAsDefaultInstance() {
}

huanpaiRequest::huanpaiRequest(const huanpaiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.huanpaiRequest)
}

void huanpaiRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

huanpaiRequest::~huanpaiRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.huanpaiRequest)
  SharedDtor();
}

void huanpaiRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void huanpaiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* huanpaiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return huanpaiRequest_descriptor_;
}

const huanpaiRequest& huanpaiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

huanpaiRequest* huanpaiRequest::default_instance_ = NULL;

huanpaiRequest* huanpaiRequest::New() const {
  return new huanpaiRequest;
}

void huanpaiRequest::Clear() {
  card_value_.Clear();
  card_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool huanpaiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.huanpaiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card_value = 1;
      case 1: {
        if (tag == 8) {
         parse_card_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card_value;
        if (input->ExpectTag(16)) goto parse_card_index;
        break;
      }

      // repeated int32 card_index = 2;
      case 2: {
        if (tag == 16) {
         parse_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card_index())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_index;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.huanpaiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.huanpaiRequest)
  return false;
#undef DO_
}

void huanpaiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.huanpaiRequest)
  // repeated int32 card_value = 1;
  for (int i = 0; i < this->card_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card_value(i), output);
  }

  // repeated int32 card_index = 2;
  for (int i = 0; i < this->card_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.huanpaiRequest)
}

::google::protobuf::uint8* huanpaiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.huanpaiRequest)
  // repeated int32 card_value = 1;
  for (int i = 0; i < this->card_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card_value(i), target);
  }

  // repeated int32 card_index = 2;
  for (int i = 0; i < this->card_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.huanpaiRequest)
  return target;
}

int huanpaiRequest::ByteSize() const {
  int total_size = 0;

  // repeated int32 card_value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_value(i));
    }
    total_size += 1 * this->card_value_size() + data_size;
  }

  // repeated int32 card_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_index(i));
    }
    total_size += 1 * this->card_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void huanpaiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const huanpaiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const huanpaiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void huanpaiRequest::MergeFrom(const huanpaiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_value_.MergeFrom(from.card_value_);
  card_index_.MergeFrom(from.card_index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void huanpaiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void huanpaiRequest::CopyFrom(const huanpaiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool huanpaiRequest::IsInitialized() const {

  return true;
}

void huanpaiRequest::Swap(huanpaiRequest* other) {
  if (other != this) {
    card_value_.Swap(&other->card_value_);
    card_index_.Swap(&other->card_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata huanpaiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = huanpaiRequest_descriptor_;
  metadata.reflection = huanpaiRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int huanpaiResponse::kUidFieldNumber;
#endif  // !_MSC_VER

huanpaiResponse::huanpaiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.huanpaiResponse)
}

void huanpaiResponse::InitAsDefaultInstance() {
}

huanpaiResponse::huanpaiResponse(const huanpaiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.huanpaiResponse)
}

void huanpaiResponse::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

huanpaiResponse::~huanpaiResponse() {
  // @@protoc_insertion_point(destructor:mahjong_msg.huanpaiResponse)
  SharedDtor();
}

void huanpaiResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void huanpaiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* huanpaiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return huanpaiResponse_descriptor_;
}

const huanpaiResponse& huanpaiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

huanpaiResponse* huanpaiResponse::default_instance_ = NULL;

huanpaiResponse* huanpaiResponse::New() const {
  return new huanpaiResponse;
}

void huanpaiResponse::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool huanpaiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.huanpaiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.huanpaiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.huanpaiResponse)
  return false;
#undef DO_
}

void huanpaiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.huanpaiResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.huanpaiResponse)
}

::google::protobuf::uint8* huanpaiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.huanpaiResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.huanpaiResponse)
  return target;
}

int huanpaiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void huanpaiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const huanpaiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const huanpaiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void huanpaiResponse::MergeFrom(const huanpaiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void huanpaiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void huanpaiResponse::CopyFrom(const huanpaiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool huanpaiResponse::IsInitialized() const {

  return true;
}

void huanpaiResponse::Swap(huanpaiResponse* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata huanpaiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = huanpaiResponse_descriptor_;
  metadata.reflection = huanpaiResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int canclerobotRequest::kUidFieldNumber;
#endif  // !_MSC_VER

canclerobotRequest::canclerobotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.canclerobotRequest)
}

void canclerobotRequest::InitAsDefaultInstance() {
}

canclerobotRequest::canclerobotRequest(const canclerobotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.canclerobotRequest)
}

void canclerobotRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

canclerobotRequest::~canclerobotRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.canclerobotRequest)
  SharedDtor();
}

void canclerobotRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void canclerobotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* canclerobotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return canclerobotRequest_descriptor_;
}

const canclerobotRequest& canclerobotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

canclerobotRequest* canclerobotRequest::default_instance_ = NULL;

canclerobotRequest* canclerobotRequest::New() const {
  return new canclerobotRequest;
}

void canclerobotRequest::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool canclerobotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.canclerobotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.canclerobotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.canclerobotRequest)
  return false;
#undef DO_
}

void canclerobotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.canclerobotRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.canclerobotRequest)
}

::google::protobuf::uint8* canclerobotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.canclerobotRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.canclerobotRequest)
  return target;
}

int canclerobotRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void canclerobotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const canclerobotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const canclerobotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void canclerobotRequest::MergeFrom(const canclerobotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void canclerobotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void canclerobotRequest::CopyFrom(const canclerobotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool canclerobotRequest::IsInitialized() const {

  return true;
}

void canclerobotRequest::Swap(canclerobotRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata canclerobotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = canclerobotRequest_descriptor_;
  metadata.reflection = canclerobotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int canclerobotResponse::kUidFieldNumber;
#endif  // !_MSC_VER

canclerobotResponse::canclerobotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.canclerobotResponse)
}

void canclerobotResponse::InitAsDefaultInstance() {
}

canclerobotResponse::canclerobotResponse(const canclerobotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.canclerobotResponse)
}

void canclerobotResponse::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

canclerobotResponse::~canclerobotResponse() {
  // @@protoc_insertion_point(destructor:mahjong_msg.canclerobotResponse)
  SharedDtor();
}

void canclerobotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void canclerobotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* canclerobotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return canclerobotResponse_descriptor_;
}

const canclerobotResponse& canclerobotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

canclerobotResponse* canclerobotResponse::default_instance_ = NULL;

canclerobotResponse* canclerobotResponse::New() const {
  return new canclerobotResponse;
}

void canclerobotResponse::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool canclerobotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.canclerobotResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.canclerobotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.canclerobotResponse)
  return false;
#undef DO_
}

void canclerobotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.canclerobotResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.canclerobotResponse)
}

::google::protobuf::uint8* canclerobotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.canclerobotResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.canclerobotResponse)
  return target;
}

int canclerobotResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void canclerobotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const canclerobotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const canclerobotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void canclerobotResponse::MergeFrom(const canclerobotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void canclerobotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void canclerobotResponse::CopyFrom(const canclerobotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool canclerobotResponse::IsInitialized() const {

  return true;
}

void canclerobotResponse::Swap(canclerobotResponse* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata canclerobotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = canclerobotResponse_descriptor_;
  metadata.reflection = canclerobotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifyreadyMsg::kCdFieldNumber;
const int notifyreadyMsg::kFlagFieldNumber;
#endif  // !_MSC_VER

notifyreadyMsg::notifyreadyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifyreadyMsg)
}

void notifyreadyMsg::InitAsDefaultInstance() {
}

notifyreadyMsg::notifyreadyMsg(const notifyreadyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifyreadyMsg)
}

void notifyreadyMsg::SharedCtor() {
  _cached_size_ = 0;
  cd_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifyreadyMsg::~notifyreadyMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifyreadyMsg)
  SharedDtor();
}

void notifyreadyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifyreadyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifyreadyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyreadyMsg_descriptor_;
}

const notifyreadyMsg& notifyreadyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifyreadyMsg* notifyreadyMsg::default_instance_ = NULL;

notifyreadyMsg* notifyreadyMsg::New() const {
  return new notifyreadyMsg;
}

void notifyreadyMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notifyreadyMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cd_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifyreadyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifyreadyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifyreadyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifyreadyMsg)
  return false;
#undef DO_
}

void notifyreadyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifyreadyMsg)
  // required int32 cd = 1;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cd(), output);
  }

  // required int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifyreadyMsg)
}

::google::protobuf::uint8* notifyreadyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifyreadyMsg)
  // required int32 cd = 1;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cd(), target);
  }

  // required int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifyreadyMsg)
  return target;
}

int notifyreadyMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cd = 1;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifyreadyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifyreadyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifyreadyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifyreadyMsg::MergeFrom(const notifyreadyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifyreadyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyreadyMsg::CopyFrom(const notifyreadyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyreadyMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void notifyreadyMsg::Swap(notifyreadyMsg* other) {
  if (other != this) {
    std::swap(cd_, other->cd_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifyreadyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifyreadyMsg_descriptor_;
  metadata.reflection = notifyreadyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int alertMsg::kAlertStrFieldNumber;
#endif  // !_MSC_VER

alertMsg::alertMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.alertMsg)
}

void alertMsg::InitAsDefaultInstance() {
}

alertMsg::alertMsg(const alertMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.alertMsg)
}

void alertMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alertstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

alertMsg::~alertMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.alertMsg)
  SharedDtor();
}

void alertMsg::SharedDtor() {
  if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alertstr_;
  }
  if (this != default_instance_) {
  }
}

void alertMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* alertMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return alertMsg_descriptor_;
}

const alertMsg& alertMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

alertMsg* alertMsg::default_instance_ = NULL;

alertMsg* alertMsg::New() const {
  return new alertMsg;
}

void alertMsg::Clear() {
  if (has_alertstr()) {
    if (alertstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      alertstr_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool alertMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.alertMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string alertStr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alertstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alertstr().data(), this->alertstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alertstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.alertMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.alertMsg)
  return false;
#undef DO_
}

void alertMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.alertMsg)
  // required string alertStr = 1;
  if (has_alertstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alertstr().data(), this->alertstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alertstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alertstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.alertMsg)
}

::google::protobuf::uint8* alertMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.alertMsg)
  // required string alertStr = 1;
  if (has_alertstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alertstr().data(), this->alertstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alertstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alertstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.alertMsg)
  return target;
}

int alertMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string alertStr = 1;
    if (has_alertstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alertstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void alertMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const alertMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const alertMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void alertMsg::MergeFrom(const alertMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alertstr()) {
      set_alertstr(from.alertstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void alertMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void alertMsg::CopyFrom(const alertMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool alertMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void alertMsg::Swap(alertMsg* other) {
  if (other != this) {
    std::swap(alertstr_, other->alertstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata alertMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = alertMsg_descriptor_;
  metadata.reflection = alertMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int readyRequest::kUidFieldNumber;
#endif  // !_MSC_VER

readyRequest::readyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.readyRequest)
}

void readyRequest::InitAsDefaultInstance() {
}

readyRequest::readyRequest(const readyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.readyRequest)
}

void readyRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

readyRequest::~readyRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.readyRequest)
  SharedDtor();
}

void readyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void readyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* readyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return readyRequest_descriptor_;
}

const readyRequest& readyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

readyRequest* readyRequest::default_instance_ = NULL;

readyRequest* readyRequest::New() const {
  return new readyRequest;
}

void readyRequest::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool readyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.readyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.readyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.readyRequest)
  return false;
#undef DO_
}

void readyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.readyRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.readyRequest)
}

::google::protobuf::uint8* readyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.readyRequest)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.readyRequest)
  return target;
}

int readyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void readyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const readyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const readyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void readyRequest::MergeFrom(const readyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void readyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void readyRequest::CopyFrom(const readyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool readyRequest::IsInitialized() const {

  return true;
}

void readyRequest::Swap(readyRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata readyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = readyRequest_descriptor_;
  metadata.reflection = readyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int goreadyMsg::kSeatidFieldNumber;
const int goreadyMsg::kUidFieldNumber;
#endif  // !_MSC_VER

goreadyMsg::goreadyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.goreadyMsg)
}

void goreadyMsg::InitAsDefaultInstance() {
}

goreadyMsg::goreadyMsg(const goreadyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.goreadyMsg)
}

void goreadyMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

goreadyMsg::~goreadyMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.goreadyMsg)
  SharedDtor();
}

void goreadyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void goreadyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* goreadyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return goreadyMsg_descriptor_;
}

const goreadyMsg& goreadyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

goreadyMsg* goreadyMsg::default_instance_ = NULL;

goreadyMsg* goreadyMsg::New() const {
  return new goreadyMsg;
}

void goreadyMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<goreadyMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seatid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool goreadyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.goreadyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.goreadyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.goreadyMsg)
  return false;
#undef DO_
}

void goreadyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.goreadyMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.goreadyMsg)
}

::google::protobuf::uint8* goreadyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.goreadyMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.goreadyMsg)
  return target;
}

int goreadyMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void goreadyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const goreadyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const goreadyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void goreadyMsg::MergeFrom(const goreadyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void goreadyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void goreadyMsg::CopyFrom(const goreadyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool goreadyMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void goreadyMsg::Swap(goreadyMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata goreadyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = goreadyMsg_descriptor_;
  metadata.reflection = goreadyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifygamestartMsg::kSeatidFieldNumber;
const int notifygamestartMsg::kBseatidFieldNumber;
const int notifygamestartMsg::kBuidFieldNumber;
const int notifygamestartMsg::kP1NumFieldNumber;
const int notifygamestartMsg::kP2NumFieldNumber;
const int notifygamestartMsg::kCardsFieldNumber;
const int notifygamestartMsg::kTrainMoneyFieldNumber;
#endif  // !_MSC_VER

notifygamestartMsg::notifygamestartMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifygamestartMsg)
}

void notifygamestartMsg::InitAsDefaultInstance() {
}

notifygamestartMsg::notifygamestartMsg(const notifygamestartMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifygamestartMsg)
}

void notifygamestartMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  bseatid_ = 0;
  buid_ = 0u;
  p1_num_ = 0;
  p2_num_ = 0;
  train_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifygamestartMsg::~notifygamestartMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifygamestartMsg)
  SharedDtor();
}

void notifygamestartMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifygamestartMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifygamestartMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifygamestartMsg_descriptor_;
}

const notifygamestartMsg& notifygamestartMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifygamestartMsg* notifygamestartMsg::default_instance_ = NULL;

notifygamestartMsg* notifygamestartMsg::New() const {
  return new notifygamestartMsg;
}

void notifygamestartMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notifygamestartMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(seatid_, p1_num_);
    ZR_(p2_num_, train_money_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifygamestartMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifygamestartMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bseatid;
        break;
      }

      // required int32 bseatid = 2;
      case 2: {
        if (tag == 16) {
         parse_bseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bseatid_)));
          set_has_bseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buid;
        break;
      }

      // required uint32 buid = 3;
      case 3: {
        if (tag == 24) {
         parse_buid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buid_)));
          set_has_buid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_p1_num;
        break;
      }

      // required int32 p1_num = 4;
      case 4: {
        if (tag == 32) {
         parse_p1_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p1_num_)));
          set_has_p1_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_p2_num;
        break;
      }

      // required int32 p2_num = 5;
      case 5: {
        if (tag == 40) {
         parse_p2_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p2_num_)));
          set_has_p2_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 6;
      case 6: {
        if (tag == 48) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_cards())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cards;
        if (input->ExpectTag(56)) goto parse_train_money;
        break;
      }

      // optional int32 train_money = 7;
      case 7: {
        if (tag == 56) {
         parse_train_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_money_)));
          set_has_train_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifygamestartMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifygamestartMsg)
  return false;
#undef DO_
}

void notifygamestartMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifygamestartMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required int32 bseatid = 2;
  if (has_bseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bseatid(), output);
  }

  // required uint32 buid = 3;
  if (has_buid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buid(), output);
  }

  // required int32 p1_num = 4;
  if (has_p1_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->p1_num(), output);
  }

  // required int32 p2_num = 5;
  if (has_p2_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->p2_num(), output);
  }

  // repeated int32 cards = 6;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->cards(i), output);
  }

  // optional int32 train_money = 7;
  if (has_train_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->train_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifygamestartMsg)
}

::google::protobuf::uint8* notifygamestartMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifygamestartMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required int32 bseatid = 2;
  if (has_bseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bseatid(), target);
  }

  // required uint32 buid = 3;
  if (has_buid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buid(), target);
  }

  // required int32 p1_num = 4;
  if (has_p1_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->p1_num(), target);
  }

  // required int32 p2_num = 5;
  if (has_p2_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->p2_num(), target);
  }

  // repeated int32 cards = 6;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->cards(i), target);
  }

  // optional int32 train_money = 7;
  if (has_train_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->train_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifygamestartMsg)
  return target;
}

int notifygamestartMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 bseatid = 2;
    if (has_bseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bseatid());
    }

    // required uint32 buid = 3;
    if (has_buid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buid());
    }

    // required int32 p1_num = 4;
    if (has_p1_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p1_num());
    }

    // required int32 p2_num = 5;
    if (has_p2_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p2_num());
    }

    // optional int32 train_money = 7;
    if (has_train_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_money());
    }

  }
  // repeated int32 cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifygamestartMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifygamestartMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifygamestartMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifygamestartMsg::MergeFrom(const notifygamestartMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_bseatid()) {
      set_bseatid(from.bseatid());
    }
    if (from.has_buid()) {
      set_buid(from.buid());
    }
    if (from.has_p1_num()) {
      set_p1_num(from.p1_num());
    }
    if (from.has_p2_num()) {
      set_p2_num(from.p2_num());
    }
    if (from.has_train_money()) {
      set_train_money(from.train_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifygamestartMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifygamestartMsg::CopyFrom(const notifygamestartMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifygamestartMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void notifygamestartMsg::Swap(notifygamestartMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(bseatid_, other->bseatid_);
    std::swap(buid_, other->buid_);
    std::swap(p1_num_, other->p1_num_);
    std::swap(p2_num_, other->p2_num_);
    cards_.Swap(&other->cards_);
    std::swap(train_money_, other->train_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifygamestartMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifygamestartMsg_descriptor_;
  metadata.reflection = notifygamestartMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadmoneyMsg::kPlayersMoneyFieldNumber;
#endif  // !_MSC_VER

broadmoneyMsg::broadmoneyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.broadmoneyMsg)
}

void broadmoneyMsg::InitAsDefaultInstance() {
}

broadmoneyMsg::broadmoneyMsg(const broadmoneyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.broadmoneyMsg)
}

void broadmoneyMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadmoneyMsg::~broadmoneyMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.broadmoneyMsg)
  SharedDtor();
}

void broadmoneyMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void broadmoneyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadmoneyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadmoneyMsg_descriptor_;
}

const broadmoneyMsg& broadmoneyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

broadmoneyMsg* broadmoneyMsg::default_instance_ = NULL;

broadmoneyMsg* broadmoneyMsg::New() const {
  return new broadmoneyMsg;
}

void broadmoneyMsg::Clear() {
  players_money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadmoneyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.broadmoneyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 players_money = 1;
      case 1: {
        if (tag == 8) {
         parse_players_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_players_money())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_players_money())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_players_money;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.broadmoneyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.broadmoneyMsg)
  return false;
#undef DO_
}

void broadmoneyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.broadmoneyMsg)
  // repeated int32 players_money = 1;
  for (int i = 0; i < this->players_money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->players_money(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.broadmoneyMsg)
}

::google::protobuf::uint8* broadmoneyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.broadmoneyMsg)
  // repeated int32 players_money = 1;
  for (int i = 0; i < this->players_money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->players_money(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.broadmoneyMsg)
  return target;
}

int broadmoneyMsg::ByteSize() const {
  int total_size = 0;

  // repeated int32 players_money = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->players_money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->players_money(i));
    }
    total_size += 1 * this->players_money_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadmoneyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadmoneyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadmoneyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadmoneyMsg::MergeFrom(const broadmoneyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_money_.MergeFrom(from.players_money_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadmoneyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadmoneyMsg::CopyFrom(const broadmoneyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadmoneyMsg::IsInitialized() const {

  return true;
}

void broadmoneyMsg::Swap(broadmoneyMsg* other) {
  if (other != this) {
    players_money_.Swap(&other->players_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadmoneyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadmoneyMsg_descriptor_;
  metadata.reflection = broadmoneyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int replaceflowerMsg::kSeatidFieldNumber;
const int replaceflowerMsg::kTakeCardsFieldNumber;
const int replaceflowerMsg::kFlowerCardsFieldNumber;
const int replaceflowerMsg::kStartGameFieldNumber;
#endif  // !_MSC_VER

replaceflowerMsg::replaceflowerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.replaceflowerMsg)
}

void replaceflowerMsg::InitAsDefaultInstance() {
}

replaceflowerMsg::replaceflowerMsg(const replaceflowerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.replaceflowerMsg)
}

void replaceflowerMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  start_game_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

replaceflowerMsg::~replaceflowerMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.replaceflowerMsg)
  SharedDtor();
}

void replaceflowerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void replaceflowerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* replaceflowerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return replaceflowerMsg_descriptor_;
}

const replaceflowerMsg& replaceflowerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

replaceflowerMsg* replaceflowerMsg::default_instance_ = NULL;

replaceflowerMsg* replaceflowerMsg::New() const {
  return new replaceflowerMsg;
}

void replaceflowerMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<replaceflowerMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seatid_, start_game_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  take_cards_.Clear();
  flower_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool replaceflowerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.replaceflowerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_take_cards;
        break;
      }

      // repeated int32 take_cards = 2;
      case 2: {
        if (tag == 16) {
         parse_take_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_take_cards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_take_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_take_cards;
        if (input->ExpectTag(24)) goto parse_flower_cards;
        break;
      }

      // repeated int32 flower_cards = 3;
      case 3: {
        if (tag == 24) {
         parse_flower_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_flower_cards())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flower_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flower_cards;
        if (input->ExpectTag(32)) goto parse_start_game;
        break;
      }

      // optional int32 start_game = 4;
      case 4: {
        if (tag == 32) {
         parse_start_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_game_)));
          set_has_start_game();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.replaceflowerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.replaceflowerMsg)
  return false;
#undef DO_
}

void replaceflowerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.replaceflowerMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // repeated int32 take_cards = 2;
  for (int i = 0; i < this->take_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->take_cards(i), output);
  }

  // repeated int32 flower_cards = 3;
  for (int i = 0; i < this->flower_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->flower_cards(i), output);
  }

  // optional int32 start_game = 4;
  if (has_start_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_game(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.replaceflowerMsg)
}

::google::protobuf::uint8* replaceflowerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.replaceflowerMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // repeated int32 take_cards = 2;
  for (int i = 0; i < this->take_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->take_cards(i), target);
  }

  // repeated int32 flower_cards = 3;
  for (int i = 0; i < this->flower_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->flower_cards(i), target);
  }

  // optional int32 start_game = 4;
  if (has_start_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_game(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.replaceflowerMsg)
  return target;
}

int replaceflowerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 start_game = 4;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_game());
    }

  }
  // repeated int32 take_cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->take_cards(i));
    }
    total_size += 1 * this->take_cards_size() + data_size;
  }

  // repeated int32 flower_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->flower_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->flower_cards(i));
    }
    total_size += 1 * this->flower_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void replaceflowerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const replaceflowerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const replaceflowerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void replaceflowerMsg::MergeFrom(const replaceflowerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  take_cards_.MergeFrom(from.take_cards_);
  flower_cards_.MergeFrom(from.flower_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_start_game()) {
      set_start_game(from.start_game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void replaceflowerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void replaceflowerMsg::CopyFrom(const replaceflowerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool replaceflowerMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void replaceflowerMsg::Swap(replaceflowerMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    take_cards_.Swap(&other->take_cards_);
    flower_cards_.Swap(&other->flower_cards_);
    std::swap(start_game_, other->start_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata replaceflowerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = replaceflowerMsg_descriptor_;
  metadata.reflection = replaceflowerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifyhuanpaiMsg::kSeatidFieldNumber;
const int notifyhuanpaiMsg::kStateFieldNumber;
const int notifyhuanpaiMsg::kCdFieldNumber;
const int notifyhuanpaiMsg::kHpinfosFieldNumber;
#endif  // !_MSC_VER

notifyhuanpaiMsg::notifyhuanpaiMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifyhuanpaiMsg)
}

void notifyhuanpaiMsg::InitAsDefaultInstance() {
}

notifyhuanpaiMsg::notifyhuanpaiMsg(const notifyhuanpaiMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifyhuanpaiMsg)
}

void notifyhuanpaiMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  state_ = 0u;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifyhuanpaiMsg::~notifyhuanpaiMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifyhuanpaiMsg)
  SharedDtor();
}

void notifyhuanpaiMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifyhuanpaiMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifyhuanpaiMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyhuanpaiMsg_descriptor_;
}

const notifyhuanpaiMsg& notifyhuanpaiMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifyhuanpaiMsg* notifyhuanpaiMsg::default_instance_ = NULL;

notifyhuanpaiMsg* notifyhuanpaiMsg::New() const {
  return new notifyhuanpaiMsg;
}

void notifyhuanpaiMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notifyhuanpaiMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(seatid_, state_);
    cd_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hpinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifyhuanpaiMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifyhuanpaiMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // required int32 cd = 3;
      case 3: {
        if (tag == 24) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hpinfos;
        break;
      }

      // repeated int32 hpinfos = 4;
      case 4: {
        if (tag == 32) {
         parse_hpinfos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_hpinfos())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hpinfos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hpinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifyhuanpaiMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifyhuanpaiMsg)
  return false;
#undef DO_
}

void notifyhuanpaiMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifyhuanpaiMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // required int32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd(), output);
  }

  // repeated int32 hpinfos = 4;
  for (int i = 0; i < this->hpinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->hpinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifyhuanpaiMsg)
}

::google::protobuf::uint8* notifyhuanpaiMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifyhuanpaiMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // required int32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd(), target);
  }

  // repeated int32 hpinfos = 4;
  for (int i = 0; i < this->hpinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->hpinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifyhuanpaiMsg)
  return target;
}

int notifyhuanpaiMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required int32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  // repeated int32 hpinfos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hpinfos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hpinfos(i));
    }
    total_size += 1 * this->hpinfos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifyhuanpaiMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifyhuanpaiMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifyhuanpaiMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifyhuanpaiMsg::MergeFrom(const notifyhuanpaiMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  hpinfos_.MergeFrom(from.hpinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifyhuanpaiMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyhuanpaiMsg::CopyFrom(const notifyhuanpaiMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyhuanpaiMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void notifyhuanpaiMsg::Swap(notifyhuanpaiMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(state_, other->state_);
    std::swap(cd_, other->cd_);
    hpinfos_.Swap(&other->hpinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifyhuanpaiMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifyhuanpaiMsg_descriptor_;
  metadata.reflection = notifyhuanpaiMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifyxuanqueMsg::kSeatidFieldNumber;
const int notifyxuanqueMsg::kStateFieldNumber;
const int notifyxuanqueMsg::kCdFieldNumber;
const int notifyxuanqueMsg::kQuetypeFieldNumber;
#endif  // !_MSC_VER

notifyxuanqueMsg::notifyxuanqueMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifyxuanqueMsg)
}

void notifyxuanqueMsg::InitAsDefaultInstance() {
}

notifyxuanqueMsg::notifyxuanqueMsg(const notifyxuanqueMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifyxuanqueMsg)
}

void notifyxuanqueMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  state_ = 0u;
  cd_ = 0;
  quetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifyxuanqueMsg::~notifyxuanqueMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifyxuanqueMsg)
  SharedDtor();
}

void notifyxuanqueMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifyxuanqueMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifyxuanqueMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyxuanqueMsg_descriptor_;
}

const notifyxuanqueMsg& notifyxuanqueMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifyxuanqueMsg* notifyxuanqueMsg::default_instance_ = NULL;

notifyxuanqueMsg* notifyxuanqueMsg::New() const {
  return new notifyxuanqueMsg;
}

void notifyxuanqueMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notifyxuanqueMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seatid_, quetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifyxuanqueMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifyxuanqueMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // required int32 cd = 3;
      case 3: {
        if (tag == 24) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quetype;
        break;
      }

      // required int32 quetype = 4;
      case 4: {
        if (tag == 32) {
         parse_quetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quetype_)));
          set_has_quetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifyxuanqueMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifyxuanqueMsg)
  return false;
#undef DO_
}

void notifyxuanqueMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifyxuanqueMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // required int32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd(), output);
  }

  // required int32 quetype = 4;
  if (has_quetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifyxuanqueMsg)
}

::google::protobuf::uint8* notifyxuanqueMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifyxuanqueMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // required int32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd(), target);
  }

  // required int32 quetype = 4;
  if (has_quetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifyxuanqueMsg)
  return target;
}

int notifyxuanqueMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required int32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 quetype = 4;
    if (has_quetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifyxuanqueMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifyxuanqueMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifyxuanqueMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifyxuanqueMsg::MergeFrom(const notifyxuanqueMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_quetype()) {
      set_quetype(from.quetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifyxuanqueMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyxuanqueMsg::CopyFrom(const notifyxuanqueMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyxuanqueMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void notifyxuanqueMsg::Swap(notifyxuanqueMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(state_, other->state_);
    std::swap(cd_, other->cd_);
    std::swap(quetype_, other->quetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifyxuanqueMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifyxuanqueMsg_descriptor_;
  metadata.reflection = notifyxuanqueMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifyxqresultMsg_XQResult::kSeatidFieldNumber;
const int notifyxqresultMsg_XQResult::kUidFieldNumber;
const int notifyxqresultMsg_XQResult::kQuetypeFieldNumber;
#endif  // !_MSC_VER

notifyxqresultMsg_XQResult::notifyxqresultMsg_XQResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifyxqresultMsg.XQResult)
}

void notifyxqresultMsg_XQResult::InitAsDefaultInstance() {
}

notifyxqresultMsg_XQResult::notifyxqresultMsg_XQResult(const notifyxqresultMsg_XQResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifyxqresultMsg.XQResult)
}

void notifyxqresultMsg_XQResult::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  uid_ = 0u;
  quetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifyxqresultMsg_XQResult::~notifyxqresultMsg_XQResult() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifyxqresultMsg.XQResult)
  SharedDtor();
}

void notifyxqresultMsg_XQResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifyxqresultMsg_XQResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifyxqresultMsg_XQResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyxqresultMsg_XQResult_descriptor_;
}

const notifyxqresultMsg_XQResult& notifyxqresultMsg_XQResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifyxqresultMsg_XQResult* notifyxqresultMsg_XQResult::default_instance_ = NULL;

notifyxqresultMsg_XQResult* notifyxqresultMsg_XQResult::New() const {
  return new notifyxqresultMsg_XQResult;
}

void notifyxqresultMsg_XQResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notifyxqresultMsg_XQResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seatid_, quetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifyxqresultMsg_XQResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifyxqresultMsg.XQResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quetype;
        break;
      }

      // required int32 quetype = 3;
      case 3: {
        if (tag == 24) {
         parse_quetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quetype_)));
          set_has_quetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifyxqresultMsg.XQResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifyxqresultMsg.XQResult)
  return false;
#undef DO_
}

void notifyxqresultMsg_XQResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifyxqresultMsg.XQResult)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required int32 quetype = 3;
  if (has_quetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifyxqresultMsg.XQResult)
}

::google::protobuf::uint8* notifyxqresultMsg_XQResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifyxqresultMsg.XQResult)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required int32 quetype = 3;
  if (has_quetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifyxqresultMsg.XQResult)
  return target;
}

int notifyxqresultMsg_XQResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 quetype = 3;
    if (has_quetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifyxqresultMsg_XQResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifyxqresultMsg_XQResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifyxqresultMsg_XQResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifyxqresultMsg_XQResult::MergeFrom(const notifyxqresultMsg_XQResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_quetype()) {
      set_quetype(from.quetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifyxqresultMsg_XQResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyxqresultMsg_XQResult::CopyFrom(const notifyxqresultMsg_XQResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyxqresultMsg_XQResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void notifyxqresultMsg_XQResult::Swap(notifyxqresultMsg_XQResult* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(uid_, other->uid_);
    std::swap(quetype_, other->quetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifyxqresultMsg_XQResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifyxqresultMsg_XQResult_descriptor_;
  metadata.reflection = notifyxqresultMsg_XQResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int notifyxqresultMsg::kXqResultFieldNumber;
#endif  // !_MSC_VER

notifyxqresultMsg::notifyxqresultMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifyxqresultMsg)
}

void notifyxqresultMsg::InitAsDefaultInstance() {
}

notifyxqresultMsg::notifyxqresultMsg(const notifyxqresultMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifyxqresultMsg)
}

void notifyxqresultMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifyxqresultMsg::~notifyxqresultMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifyxqresultMsg)
  SharedDtor();
}

void notifyxqresultMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifyxqresultMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifyxqresultMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyxqresultMsg_descriptor_;
}

const notifyxqresultMsg& notifyxqresultMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifyxqresultMsg* notifyxqresultMsg::default_instance_ = NULL;

notifyxqresultMsg* notifyxqresultMsg::New() const {
  return new notifyxqresultMsg;
}

void notifyxqresultMsg::Clear() {
  xq_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifyxqresultMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifyxqresultMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mahjong_msg.notifyxqresultMsg.XQResult xq_result = 1;
      case 1: {
        if (tag == 10) {
         parse_xq_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xq_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_xq_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifyxqresultMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifyxqresultMsg)
  return false;
#undef DO_
}

void notifyxqresultMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifyxqresultMsg)
  // repeated .mahjong_msg.notifyxqresultMsg.XQResult xq_result = 1;
  for (int i = 0; i < this->xq_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xq_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifyxqresultMsg)
}

::google::protobuf::uint8* notifyxqresultMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifyxqresultMsg)
  // repeated .mahjong_msg.notifyxqresultMsg.XQResult xq_result = 1;
  for (int i = 0; i < this->xq_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xq_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifyxqresultMsg)
  return target;
}

int notifyxqresultMsg::ByteSize() const {
  int total_size = 0;

  // repeated .mahjong_msg.notifyxqresultMsg.XQResult xq_result = 1;
  total_size += 1 * this->xq_result_size();
  for (int i = 0; i < this->xq_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xq_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifyxqresultMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifyxqresultMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifyxqresultMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifyxqresultMsg::MergeFrom(const notifyxqresultMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  xq_result_.MergeFrom(from.xq_result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifyxqresultMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyxqresultMsg::CopyFrom(const notifyxqresultMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyxqresultMsg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->xq_result())) return false;
  return true;
}

void notifyxqresultMsg::Swap(notifyxqresultMsg* other) {
  if (other != this) {
    xq_result_.Swap(&other->xq_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifyxqresultMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifyxqresultMsg_descriptor_;
  metadata.reflection = notifyxqresultMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifyhpresultMsg::kHpinfosIndexFieldNumber;
const int notifyhpresultMsg::kHpinfosValueFieldNumber;
const int notifyhpresultMsg::kGetinfosFieldNumber;
#endif  // !_MSC_VER

notifyhpresultMsg::notifyhpresultMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifyhpresultMsg)
}

void notifyhpresultMsg::InitAsDefaultInstance() {
}

notifyhpresultMsg::notifyhpresultMsg(const notifyhpresultMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifyhpresultMsg)
}

void notifyhpresultMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifyhpresultMsg::~notifyhpresultMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifyhpresultMsg)
  SharedDtor();
}

void notifyhpresultMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifyhpresultMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifyhpresultMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifyhpresultMsg_descriptor_;
}

const notifyhpresultMsg& notifyhpresultMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifyhpresultMsg* notifyhpresultMsg::default_instance_ = NULL;

notifyhpresultMsg* notifyhpresultMsg::New() const {
  return new notifyhpresultMsg;
}

void notifyhpresultMsg::Clear() {
  hpinfos_index_.Clear();
  hpinfos_value_.Clear();
  getinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifyhpresultMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifyhpresultMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 hpinfos_index = 1;
      case 1: {
        if (tag == 8) {
         parse_hpinfos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_hpinfos_index())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hpinfos_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_hpinfos_index;
        if (input->ExpectTag(16)) goto parse_hpinfos_value;
        break;
      }

      // repeated int32 hpinfos_value = 2;
      case 2: {
        if (tag == 16) {
         parse_hpinfos_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hpinfos_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hpinfos_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hpinfos_value;
        if (input->ExpectTag(24)) goto parse_getinfos;
        break;
      }

      // repeated int32 getinfos = 3;
      case 3: {
        if (tag == 24) {
         parse_getinfos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_getinfos())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getinfos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_getinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifyhpresultMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifyhpresultMsg)
  return false;
#undef DO_
}

void notifyhpresultMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifyhpresultMsg)
  // repeated int32 hpinfos_index = 1;
  for (int i = 0; i < this->hpinfos_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->hpinfos_index(i), output);
  }

  // repeated int32 hpinfos_value = 2;
  for (int i = 0; i < this->hpinfos_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hpinfos_value(i), output);
  }

  // repeated int32 getinfos = 3;
  for (int i = 0; i < this->getinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->getinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifyhpresultMsg)
}

::google::protobuf::uint8* notifyhpresultMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifyhpresultMsg)
  // repeated int32 hpinfos_index = 1;
  for (int i = 0; i < this->hpinfos_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->hpinfos_index(i), target);
  }

  // repeated int32 hpinfos_value = 2;
  for (int i = 0; i < this->hpinfos_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->hpinfos_value(i), target);
  }

  // repeated int32 getinfos = 3;
  for (int i = 0; i < this->getinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->getinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifyhpresultMsg)
  return target;
}

int notifyhpresultMsg::ByteSize() const {
  int total_size = 0;

  // repeated int32 hpinfos_index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hpinfos_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hpinfos_index(i));
    }
    total_size += 1 * this->hpinfos_index_size() + data_size;
  }

  // repeated int32 hpinfos_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hpinfos_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hpinfos_value(i));
    }
    total_size += 1 * this->hpinfos_value_size() + data_size;
  }

  // repeated int32 getinfos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->getinfos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getinfos(i));
    }
    total_size += 1 * this->getinfos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifyhpresultMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifyhpresultMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifyhpresultMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifyhpresultMsg::MergeFrom(const notifyhpresultMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  hpinfos_index_.MergeFrom(from.hpinfos_index_);
  hpinfos_value_.MergeFrom(from.hpinfos_value_);
  getinfos_.MergeFrom(from.getinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifyhpresultMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyhpresultMsg::CopyFrom(const notifyhpresultMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyhpresultMsg::IsInitialized() const {

  return true;
}

void notifyhpresultMsg::Swap(notifyhpresultMsg* other) {
  if (other != this) {
    hpinfos_index_.Swap(&other->hpinfos_index_);
    hpinfos_value_.Swap(&other->hpinfos_value_);
    getinfos_.Swap(&other->getinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifyhpresultMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifyhpresultMsg_descriptor_;
  metadata.reflection = notifyhpresultMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int loginMsg::kSeatidFieldNumber;
const int loginMsg::kBettingFieldNumber;
const int loginMsg::kNameFieldNumber;
const int loginMsg::kSexFieldNumber;
const int loginMsg::kAvatarFieldNumber;
const int loginMsg::kAvatar1FieldNumber;
const int loginMsg::kMaxFanFieldNumber;
const int loginMsg::kLovelinessAmtFieldNumber;
const int loginMsg::kTotalWinMoneyFieldNumber;
const int loginMsg::kMoneyFieldNumber;
const int loginMsg::kTrainMoneyFieldNumber;
const int loginMsg::kTasteMoneyFieldNumber;
const int loginMsg::kTotalBoardFieldNumber;
const int loginMsg::kTotalWinFieldNumber;
const int loginMsg::kVlevelFieldNumber;
const int loginMsg::kPsFieldNumber;
#endif  // !_MSC_VER

loginMsg::loginMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.loginMsg)
}

void loginMsg::InitAsDefaultInstance() {
}

loginMsg::loginMsg(const loginMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.loginMsg)
}

void loginMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seatid_ = 0;
  betting_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_fan_ = 0;
  loveliness_amt_ = 0;
  total_win_money_ = GOOGLE_LONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  train_money_ = GOOGLE_LONGLONG(0);
  taste_money_ = GOOGLE_LONGLONG(0);
  total_board_ = 0;
  total_win_ = 0;
  vlevel_ = 0;
  ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

loginMsg::~loginMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.loginMsg)
  SharedDtor();
}

void loginMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_1_;
  }
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ps_;
  }
  if (this != default_instance_) {
  }
}

void loginMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* loginMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return loginMsg_descriptor_;
}

const loginMsg& loginMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

loginMsg* loginMsg::default_instance_ = NULL;

loginMsg* loginMsg::New() const {
  return new loginMsg;
}

void loginMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<loginMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(seatid_, betting_);
    ZR_(sex_, max_fan_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_avatar_1()) {
      if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_1_->clear();
      }
    }
    loveliness_amt_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(total_win_money_, money_);
    ZR_(total_board_, vlevel_);
    if (has_ps()) {
      if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ps_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool loginMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.loginMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_betting;
        break;
      }

      // required int32 betting = 3;
      case 3: {
        if (tag == 24) {
         parse_betting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betting_)));
          set_has_betting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // required int32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // required string avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar_1;
        break;
      }

      // required string avatar_1 = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_1().data(), this->avatar_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_fan;
        break;
      }

      // required int32 max_fan = 8;
      case 8: {
        if (tag == 64) {
         parse_max_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_fan_)));
          set_has_max_fan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_loveliness_amt;
        break;
      }

      // required int32 loveliness_amt = 9;
      case 9: {
        if (tag == 72) {
         parse_loveliness_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loveliness_amt_)));
          set_has_loveliness_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_win_money;
        break;
      }

      // required int64 total_win_money = 10;
      case 10: {
        if (tag == 80) {
         parse_total_win_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_win_money_)));
          set_has_total_win_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // required int64 money = 11;
      case 11: {
        if (tag == 88) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_train_money;
        break;
      }

      // required int64 train_money = 12;
      case 12: {
        if (tag == 96) {
         parse_train_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &train_money_)));
          set_has_train_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_taste_money;
        break;
      }

      // required int64 taste_money = 13;
      case 13: {
        if (tag == 104) {
         parse_taste_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taste_money_)));
          set_has_taste_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_total_board;
        break;
      }

      // required int32 total_board = 14;
      case 14: {
        if (tag == 112) {
         parse_total_board:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_board_)));
          set_has_total_board();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_total_win;
        break;
      }

      // required int32 total_win = 15;
      case 15: {
        if (tag == 120) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_vlevel;
        break;
      }

      // required int32 vlevel = 16;
      case 16: {
        if (tag == 128) {
         parse_vlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vlevel_)));
          set_has_vlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ps;
        break;
      }

      // required string ps = 17;
      case 17: {
        if (tag == 138) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ps().data(), this->ps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.loginMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.loginMsg)
  return false;
#undef DO_
}

void loginMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.loginMsg)
  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required int32 betting = 3;
  if (has_betting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->betting(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // required string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar(), output);
  }

  // required string avatar_1 = 7;
  if (has_avatar_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_1().data(), this->avatar_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar_1(), output);
  }

  // required int32 max_fan = 8;
  if (has_max_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_fan(), output);
  }

  // required int32 loveliness_amt = 9;
  if (has_loveliness_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->loveliness_amt(), output);
  }

  // required int64 total_win_money = 10;
  if (has_total_win_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->total_win_money(), output);
  }

  // required int64 money = 11;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->money(), output);
  }

  // required int64 train_money = 12;
  if (has_train_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->train_money(), output);
  }

  // required int64 taste_money = 13;
  if (has_taste_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->taste_money(), output);
  }

  // required int32 total_board = 14;
  if (has_total_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->total_board(), output);
  }

  // required int32 total_win = 15;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->total_win(), output);
  }

  // required int32 vlevel = 16;
  if (has_vlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->vlevel(), output);
  }

  // required string ps = 17;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->ps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.loginMsg)
}

::google::protobuf::uint8* loginMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.loginMsg)
  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required int32 betting = 3;
  if (has_betting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->betting(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // required string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // required string avatar_1 = 7;
  if (has_avatar_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_1().data(), this->avatar_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar_1(), target);
  }

  // required int32 max_fan = 8;
  if (has_max_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_fan(), target);
  }

  // required int32 loveliness_amt = 9;
  if (has_loveliness_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->loveliness_amt(), target);
  }

  // required int64 total_win_money = 10;
  if (has_total_win_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->total_win_money(), target);
  }

  // required int64 money = 11;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->money(), target);
  }

  // required int64 train_money = 12;
  if (has_train_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->train_money(), target);
  }

  // required int64 taste_money = 13;
  if (has_taste_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->taste_money(), target);
  }

  // required int32 total_board = 14;
  if (has_total_board()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->total_board(), target);
  }

  // required int32 total_win = 15;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->total_win(), target);
  }

  // required int32 vlevel = 16;
  if (has_vlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->vlevel(), target);
  }

  // required string ps = 17;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.loginMsg)
  return target;
}

int loginMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 betting = 3;
    if (has_betting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betting());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // required string avatar_1 = 7;
    if (has_avatar_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_1());
    }

    // required int32 max_fan = 8;
    if (has_max_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_fan());
    }

    // required int32 loveliness_amt = 9;
    if (has_loveliness_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loveliness_amt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 total_win_money = 10;
    if (has_total_win_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_win_money());
    }

    // required int64 money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int64 train_money = 12;
    if (has_train_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->train_money());
    }

    // required int64 taste_money = 13;
    if (has_taste_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taste_money());
    }

    // required int32 total_board = 14;
    if (has_total_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_board());
    }

    // required int32 total_win = 15;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_win());
    }

    // required int32 vlevel = 16;
    if (has_vlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vlevel());
    }

    // required string ps = 17;
    if (has_ps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void loginMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const loginMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const loginMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void loginMsg::MergeFrom(const loginMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_betting()) {
      set_betting(from.betting());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_avatar_1()) {
      set_avatar_1(from.avatar_1());
    }
    if (from.has_max_fan()) {
      set_max_fan(from.max_fan());
    }
    if (from.has_loveliness_amt()) {
      set_loveliness_amt(from.loveliness_amt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_win_money()) {
      set_total_win_money(from.total_win_money());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_train_money()) {
      set_train_money(from.train_money());
    }
    if (from.has_taste_money()) {
      set_taste_money(from.taste_money());
    }
    if (from.has_total_board()) {
      set_total_board(from.total_board());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_vlevel()) {
      set_vlevel(from.vlevel());
    }
    if (from.has_ps()) {
      set_ps(from.ps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void loginMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginMsg::CopyFrom(const loginMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void loginMsg::Swap(loginMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(betting_, other->betting_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(avatar_1_, other->avatar_1_);
    std::swap(max_fan_, other->max_fan_);
    std::swap(loveliness_amt_, other->loveliness_amt_);
    std::swap(total_win_money_, other->total_win_money_);
    std::swap(money_, other->money_);
    std::swap(train_money_, other->train_money_);
    std::swap(taste_money_, other->taste_money_);
    std::swap(total_board_, other->total_board_);
    std::swap(total_win_, other->total_win_);
    std::swap(vlevel_, other->vlevel_);
    std::swap(ps_, other->ps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata loginMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = loginMsg_descriptor_;
  metadata.reflection = loginMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dealcardRequest::kDtypeFieldNumber;
const int dealcardRequest::kCardvFieldNumber;
const int dealcardRequest::kSeatidFieldNumber;
const int dealcardRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

dealcardRequest::dealcardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.dealcardRequest)
}

void dealcardRequest::InitAsDefaultInstance() {
}

dealcardRequest::dealcardRequest(const dealcardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.dealcardRequest)
}

void dealcardRequest::SharedCtor() {
  _cached_size_ = 0;
  dtype_ = 0;
  cardv_ = 0;
  seatid_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dealcardRequest::~dealcardRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.dealcardRequest)
  SharedDtor();
}

void dealcardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dealcardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dealcardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dealcardRequest_descriptor_;
}

const dealcardRequest& dealcardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

dealcardRequest* dealcardRequest::default_instance_ = NULL;

dealcardRequest* dealcardRequest::New() const {
  return new dealcardRequest;
}

void dealcardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dealcardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dtype_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dealcardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.dealcardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtype_)));
          set_has_dtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cardv;
        break;
      }

      // required int32 cardv = 2;
      case 2: {
        if (tag == 16) {
         parse_cardv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardv_)));
          set_has_cardv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 3;
      case 3: {
        if (tag == 24) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.dealcardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.dealcardRequest)
  return false;
#undef DO_
}

void dealcardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.dealcardRequest)
  // required int32 dtype = 1;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dtype(), output);
  }

  // required int32 cardv = 2;
  if (has_cardv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cardv(), output);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.dealcardRequest)
}

::google::protobuf::uint8* dealcardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.dealcardRequest)
  // required int32 dtype = 1;
  if (has_dtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dtype(), target);
  }

  // required int32 cardv = 2;
  if (has_cardv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cardv(), target);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.dealcardRequest)
  return target;
}

int dealcardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dtype = 1;
    if (has_dtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtype());
    }

    // required int32 cardv = 2;
    if (has_cardv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardv());
    }

    // required int32 seatid = 3;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dealcardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dealcardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dealcardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dealcardRequest::MergeFrom(const dealcardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dtype()) {
      set_dtype(from.dtype());
    }
    if (from.has_cardv()) {
      set_cardv(from.cardv());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dealcardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dealcardRequest::CopyFrom(const dealcardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dealcardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void dealcardRequest::Swap(dealcardRequest* other) {
  if (other != this) {
    std::swap(dtype_, other->dtype_);
    std::swap(cardv_, other->cardv_);
    std::swap(seatid_, other->seatid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dealcardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dealcardRequest_descriptor_;
  metadata.reflection = dealcardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dealcardResponse::kUidFieldNumber;
#endif  // !_MSC_VER

dealcardResponse::dealcardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.dealcardResponse)
}

void dealcardResponse::InitAsDefaultInstance() {
}

dealcardResponse::dealcardResponse(const dealcardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.dealcardResponse)
}

void dealcardResponse::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dealcardResponse::~dealcardResponse() {
  // @@protoc_insertion_point(destructor:mahjong_msg.dealcardResponse)
  SharedDtor();
}

void dealcardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dealcardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dealcardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dealcardResponse_descriptor_;
}

const dealcardResponse& dealcardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

dealcardResponse* dealcardResponse::default_instance_ = NULL;

dealcardResponse* dealcardResponse::New() const {
  return new dealcardResponse;
}

void dealcardResponse::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dealcardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.dealcardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.dealcardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.dealcardResponse)
  return false;
#undef DO_
}

void dealcardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.dealcardResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.dealcardResponse)
}

::google::protobuf::uint8* dealcardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.dealcardResponse)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.dealcardResponse)
  return target;
}

int dealcardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dealcardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dealcardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dealcardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dealcardResponse::MergeFrom(const dealcardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dealcardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dealcardResponse::CopyFrom(const dealcardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dealcardResponse::IsInitialized() const {

  return true;
}

void dealcardResponse::Swap(dealcardResponse* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dealcardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dealcardResponse_descriptor_;
  metadata.reflection = dealcardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int selfdealMsg_EatCard::kCardsFieldNumber;
#endif  // !_MSC_VER

selfdealMsg_EatCard::selfdealMsg_EatCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.selfdealMsg.EatCard)
}

void selfdealMsg_EatCard::InitAsDefaultInstance() {
}

selfdealMsg_EatCard::selfdealMsg_EatCard(const selfdealMsg_EatCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.selfdealMsg.EatCard)
}

void selfdealMsg_EatCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

selfdealMsg_EatCard::~selfdealMsg_EatCard() {
  // @@protoc_insertion_point(destructor:mahjong_msg.selfdealMsg.EatCard)
  SharedDtor();
}

void selfdealMsg_EatCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void selfdealMsg_EatCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* selfdealMsg_EatCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return selfdealMsg_EatCard_descriptor_;
}

const selfdealMsg_EatCard& selfdealMsg_EatCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

selfdealMsg_EatCard* selfdealMsg_EatCard::default_instance_ = NULL;

selfdealMsg_EatCard* selfdealMsg_EatCard::New() const {
  return new selfdealMsg_EatCard;
}

void selfdealMsg_EatCard::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool selfdealMsg_EatCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.selfdealMsg.EatCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.selfdealMsg.EatCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.selfdealMsg.EatCard)
  return false;
#undef DO_
}

void selfdealMsg_EatCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.selfdealMsg.EatCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.selfdealMsg.EatCard)
}

::google::protobuf::uint8* selfdealMsg_EatCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.selfdealMsg.EatCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.selfdealMsg.EatCard)
  return target;
}

int selfdealMsg_EatCard::ByteSize() const {
  int total_size = 0;

  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void selfdealMsg_EatCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const selfdealMsg_EatCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const selfdealMsg_EatCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void selfdealMsg_EatCard::MergeFrom(const selfdealMsg_EatCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void selfdealMsg_EatCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void selfdealMsg_EatCard::CopyFrom(const selfdealMsg_EatCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool selfdealMsg_EatCard::IsInitialized() const {

  return true;
}

void selfdealMsg_EatCard::Swap(selfdealMsg_EatCard* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata selfdealMsg_EatCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = selfdealMsg_EatCard_descriptor_;
  metadata.reflection = selfdealMsg_EatCard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int selfdealMsg::kSeatidFieldNumber;
const int selfdealMsg::kFtypeFieldNumber;
const int selfdealMsg::kMoneyFieldNumber;
const int selfdealMsg::kCardnumsFieldNumber;
const int selfdealMsg::kCdFieldNumber;
const int selfdealMsg::kTCardvFieldNumber;
const int selfdealMsg::kCardvFieldNumber;
const int selfdealMsg::kDealinfosFieldNumber;
const int selfdealMsg::kCardsFieldNumber;
const int selfdealMsg::kEatcardsFieldNumber;
const int selfdealMsg::kUidFieldNumber;
const int selfdealMsg::kTrainMoneyFieldNumber;
const int selfdealMsg::kTasteMoneyFieldNumber;
const int selfdealMsg::kPengcvFieldNumber;
const int selfdealMsg::kOtherTCardvFieldNumber;
const int selfdealMsg::kOtherCardvFieldNumber;
#endif  // !_MSC_VER

selfdealMsg::selfdealMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.selfdealMsg)
}

void selfdealMsg::InitAsDefaultInstance() {
}

selfdealMsg::selfdealMsg(const selfdealMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.selfdealMsg)
}

void selfdealMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  ftype_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  cardnums_ = 0;
  cd_ = 0;
  t_cardv_ = 0;
  cardv_ = 0;
  uid_ = 0u;
  train_money_ = 0;
  taste_money_ = 0;
  pengcv_ = 0;
  other_t_cardv_ = 0;
  other_cardv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

selfdealMsg::~selfdealMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.selfdealMsg)
  SharedDtor();
}

void selfdealMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void selfdealMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* selfdealMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return selfdealMsg_descriptor_;
}

const selfdealMsg& selfdealMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

selfdealMsg* selfdealMsg::default_instance_ = NULL;

selfdealMsg* selfdealMsg::New() const {
  return new selfdealMsg;
}

void selfdealMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<selfdealMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(seatid_, cardv_);
  }
  if (_has_bits_[8 / 32] & 64512) {
    ZR_(uid_, other_cardv_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dealinfos_.Clear();
  cards_.Clear();
  eatcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool selfdealMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.selfdealMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ftype;
        break;
      }

      // required int32 ftype = 2;
      case 2: {
        if (tag == 16) {
         parse_ftype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ftype_)));
          set_has_ftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // required int64 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cardnums;
        break;
      }

      // required int32 cardnums = 4;
      case 4: {
        if (tag == 32) {
         parse_cardnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnums_)));
          set_has_cardnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cd;
        break;
      }

      // required int32 cd = 5;
      case 5: {
        if (tag == 40) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_t_cardv;
        break;
      }

      // required int32 t_cardv = 6;
      case 6: {
        if (tag == 48) {
         parse_t_cardv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_cardv_)));
          set_has_t_cardv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cardv;
        break;
      }

      // required int32 cardv = 7;
      case 7: {
        if (tag == 56) {
         parse_cardv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardv_)));
          set_has_cardv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dealinfos;
        break;
      }

      // repeated int32 dealinfos = 8;
      case 8: {
        if (tag == 64) {
         parse_dealinfos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dealinfos())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dealinfos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dealinfos;
        if (input->ExpectTag(72)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 9;
      case 9: {
        if (tag == 72) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cards())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cards;
        if (input->ExpectTag(82)) goto parse_eatcards;
        break;
      }

      // repeated .mahjong_msg.selfdealMsg.EatCard eatcards = 10;
      case 10: {
        if (tag == 82) {
         parse_eatcards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eatcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_eatcards;
        if (input->ExpectTag(88)) goto parse_uid;
        break;
      }

      // required uint32 uid = 11;
      case 11: {
        if (tag == 88) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_train_money;
        break;
      }

      // required int32 train_money = 12;
      case 12: {
        if (tag == 96) {
         parse_train_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_money_)));
          set_has_train_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_taste_money;
        break;
      }

      // required int32 taste_money = 13;
      case 13: {
        if (tag == 104) {
         parse_taste_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taste_money_)));
          set_has_taste_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pengcv;
        break;
      }

      // optional int32 pengcv = 14;
      case 14: {
        if (tag == 112) {
         parse_pengcv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pengcv_)));
          set_has_pengcv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_other_t_cardv;
        break;
      }

      // optional int32 other_t_cardv = 15;
      case 15: {
        if (tag == 120) {
         parse_other_t_cardv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_t_cardv_)));
          set_has_other_t_cardv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_other_cardv;
        break;
      }

      // optional int32 other_cardv = 16;
      case 16: {
        if (tag == 128) {
         parse_other_cardv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_cardv_)));
          set_has_other_cardv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.selfdealMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.selfdealMsg)
  return false;
#undef DO_
}

void selfdealMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.selfdealMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // required int32 ftype = 2;
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ftype(), output);
  }

  // required int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // required int32 cardnums = 4;
  if (has_cardnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardnums(), output);
  }

  // required int32 cd = 5;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cd(), output);
  }

  // required int32 t_cardv = 6;
  if (has_t_cardv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->t_cardv(), output);
  }

  // required int32 cardv = 7;
  if (has_cardv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cardv(), output);
  }

  // repeated int32 dealinfos = 8;
  for (int i = 0; i < this->dealinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dealinfos(i), output);
  }

  // repeated int32 cards = 9;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cards(i), output);
  }

  // repeated .mahjong_msg.selfdealMsg.EatCard eatcards = 10;
  for (int i = 0; i < this->eatcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->eatcards(i), output);
  }

  // required uint32 uid = 11;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uid(), output);
  }

  // required int32 train_money = 12;
  if (has_train_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->train_money(), output);
  }

  // required int32 taste_money = 13;
  if (has_taste_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->taste_money(), output);
  }

  // optional int32 pengcv = 14;
  if (has_pengcv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pengcv(), output);
  }

  // optional int32 other_t_cardv = 15;
  if (has_other_t_cardv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->other_t_cardv(), output);
  }

  // optional int32 other_cardv = 16;
  if (has_other_cardv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->other_cardv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.selfdealMsg)
}

::google::protobuf::uint8* selfdealMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.selfdealMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // required int32 ftype = 2;
  if (has_ftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ftype(), target);
  }

  // required int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // required int32 cardnums = 4;
  if (has_cardnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardnums(), target);
  }

  // required int32 cd = 5;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cd(), target);
  }

  // required int32 t_cardv = 6;
  if (has_t_cardv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->t_cardv(), target);
  }

  // required int32 cardv = 7;
  if (has_cardv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cardv(), target);
  }

  // repeated int32 dealinfos = 8;
  for (int i = 0; i < this->dealinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dealinfos(i), target);
  }

  // repeated int32 cards = 9;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cards(i), target);
  }

  // repeated .mahjong_msg.selfdealMsg.EatCard eatcards = 10;
  for (int i = 0; i < this->eatcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->eatcards(i), target);
  }

  // required uint32 uid = 11;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uid(), target);
  }

  // required int32 train_money = 12;
  if (has_train_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->train_money(), target);
  }

  // required int32 taste_money = 13;
  if (has_taste_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->taste_money(), target);
  }

  // optional int32 pengcv = 14;
  if (has_pengcv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pengcv(), target);
  }

  // optional int32 other_t_cardv = 15;
  if (has_other_t_cardv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->other_t_cardv(), target);
  }

  // optional int32 other_cardv = 16;
  if (has_other_cardv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->other_cardv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.selfdealMsg)
  return target;
}

int selfdealMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 ftype = 2;
    if (has_ftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ftype());
    }

    // required int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int32 cardnums = 4;
    if (has_cardnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnums());
    }

    // required int32 cd = 5;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 t_cardv = 6;
    if (has_t_cardv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_cardv());
    }

    // required int32 cardv = 7;
    if (has_cardv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardv());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required uint32 uid = 11;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 train_money = 12;
    if (has_train_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_money());
    }

    // required int32 taste_money = 13;
    if (has_taste_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taste_money());
    }

    // optional int32 pengcv = 14;
    if (has_pengcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pengcv());
    }

    // optional int32 other_t_cardv = 15;
    if (has_other_t_cardv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_t_cardv());
    }

    // optional int32 other_cardv = 16;
    if (has_other_cardv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_cardv());
    }

  }
  // repeated int32 dealinfos = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dealinfos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dealinfos(i));
    }
    total_size += 1 * this->dealinfos_size() + data_size;
  }

  // repeated int32 cards = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated .mahjong_msg.selfdealMsg.EatCard eatcards = 10;
  total_size += 1 * this->eatcards_size();
  for (int i = 0; i < this->eatcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eatcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void selfdealMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const selfdealMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const selfdealMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void selfdealMsg::MergeFrom(const selfdealMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dealinfos_.MergeFrom(from.dealinfos_);
  cards_.MergeFrom(from.cards_);
  eatcards_.MergeFrom(from.eatcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ftype()) {
      set_ftype(from.ftype());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_cardnums()) {
      set_cardnums(from.cardnums());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_t_cardv()) {
      set_t_cardv(from.t_cardv());
    }
    if (from.has_cardv()) {
      set_cardv(from.cardv());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_train_money()) {
      set_train_money(from.train_money());
    }
    if (from.has_taste_money()) {
      set_taste_money(from.taste_money());
    }
    if (from.has_pengcv()) {
      set_pengcv(from.pengcv());
    }
    if (from.has_other_t_cardv()) {
      set_other_t_cardv(from.other_t_cardv());
    }
    if (from.has_other_cardv()) {
      set_other_cardv(from.other_cardv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void selfdealMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void selfdealMsg::CopyFrom(const selfdealMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool selfdealMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001c7f) != 0x00001c7f) return false;

  return true;
}

void selfdealMsg::Swap(selfdealMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(ftype_, other->ftype_);
    std::swap(money_, other->money_);
    std::swap(cardnums_, other->cardnums_);
    std::swap(cd_, other->cd_);
    std::swap(t_cardv_, other->t_cardv_);
    std::swap(cardv_, other->cardv_);
    dealinfos_.Swap(&other->dealinfos_);
    cards_.Swap(&other->cards_);
    eatcards_.Swap(&other->eatcards_);
    std::swap(uid_, other->uid_);
    std::swap(train_money_, other->train_money_);
    std::swap(taste_money_, other->taste_money_);
    std::swap(pengcv_, other->pengcv_);
    std::swap(other_t_cardv_, other->other_t_cardv_);
    std::swap(other_cardv_, other->other_cardv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata selfdealMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = selfdealMsg_descriptor_;
  metadata.reflection = selfdealMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notifynextdealMsg::kUidFieldNumber;
const int notifynextdealMsg::kSeatidFieldNumber;
const int notifynextdealMsg::kRobotFieldNumber;
const int notifynextdealMsg::kCdFieldNumber;
#endif  // !_MSC_VER

notifynextdealMsg::notifynextdealMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.notifynextdealMsg)
}

void notifynextdealMsg::InitAsDefaultInstance() {
}

notifynextdealMsg::notifynextdealMsg(const notifynextdealMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.notifynextdealMsg)
}

void notifynextdealMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  robot_ = 0;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notifynextdealMsg::~notifynextdealMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.notifynextdealMsg)
  SharedDtor();
}

void notifynextdealMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notifynextdealMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notifynextdealMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notifynextdealMsg_descriptor_;
}

const notifynextdealMsg& notifynextdealMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

notifynextdealMsg* notifynextdealMsg::default_instance_ = NULL;

notifynextdealMsg* notifynextdealMsg::New() const {
  return new notifynextdealMsg;
}

void notifynextdealMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<notifynextdealMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, cd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notifynextdealMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.notifynextdealMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_robot;
        break;
      }

      // required int32 robot = 3;
      case 3: {
        if (tag == 24) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cd;
        break;
      }

      // required int32 cd = 4;
      case 4: {
        if (tag == 32) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.notifynextdealMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.notifynextdealMsg)
  return false;
#undef DO_
}

void notifynextdealMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.notifynextdealMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required int32 robot = 3;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robot(), output);
  }

  // required int32 cd = 4;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.notifynextdealMsg)
}

::google::protobuf::uint8* notifynextdealMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.notifynextdealMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required int32 robot = 3;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robot(), target);
  }

  // required int32 cd = 4;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.notifynextdealMsg)
  return target;
}

int notifynextdealMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 robot = 3;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot());
    }

    // required int32 cd = 4;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notifynextdealMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notifynextdealMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notifynextdealMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notifynextdealMsg::MergeFrom(const notifynextdealMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notifynextdealMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifynextdealMsg::CopyFrom(const notifynextdealMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifynextdealMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void notifynextdealMsg::Swap(notifynextdealMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(robot_, other->robot_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notifynextdealMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notifynextdealMsg_descriptor_;
  metadata.reflection = notifynextdealMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dealcardMsg_DealEnds::kUidFieldNumber;
const int dealcardMsg_DealEnds::kSeatidFieldNumber;
const int dealcardMsg_DealEnds::kBeishuFieldNumber;
const int dealcardMsg_DealEnds::kWinmoneyFieldNumber;
const int dealcardMsg_DealEnds::kMoneyFieldNumber;
#endif  // !_MSC_VER

dealcardMsg_DealEnds::dealcardMsg_DealEnds()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.dealcardMsg.DealEnds)
}

void dealcardMsg_DealEnds::InitAsDefaultInstance() {
}

dealcardMsg_DealEnds::dealcardMsg_DealEnds(const dealcardMsg_DealEnds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.dealcardMsg.DealEnds)
}

void dealcardMsg_DealEnds::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  beishu_ = 0;
  winmoney_ = GOOGLE_LONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dealcardMsg_DealEnds::~dealcardMsg_DealEnds() {
  // @@protoc_insertion_point(destructor:mahjong_msg.dealcardMsg.DealEnds)
  SharedDtor();
}

void dealcardMsg_DealEnds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dealcardMsg_DealEnds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dealcardMsg_DealEnds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dealcardMsg_DealEnds_descriptor_;
}

const dealcardMsg_DealEnds& dealcardMsg_DealEnds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

dealcardMsg_DealEnds* dealcardMsg_DealEnds::default_instance_ = NULL;

dealcardMsg_DealEnds* dealcardMsg_DealEnds::New() const {
  return new dealcardMsg_DealEnds;
}

void dealcardMsg_DealEnds::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dealcardMsg_DealEnds*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, beishu_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dealcardMsg_DealEnds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.dealcardMsg.DealEnds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_beishu;
        break;
      }

      // required int32 beishu = 3;
      case 3: {
        if (tag == 24) {
         parse_beishu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beishu_)));
          set_has_beishu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_winmoney;
        break;
      }

      // required int64 winmoney = 4;
      case 4: {
        if (tag == 32) {
         parse_winmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // required int64 money = 5;
      case 5: {
        if (tag == 40) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.dealcardMsg.DealEnds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.dealcardMsg.DealEnds)
  return false;
#undef DO_
}

void dealcardMsg_DealEnds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.dealcardMsg.DealEnds)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required int32 beishu = 3;
  if (has_beishu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beishu(), output);
  }

  // required int64 winmoney = 4;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winmoney(), output);
  }

  // required int64 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.dealcardMsg.DealEnds)
}

::google::protobuf::uint8* dealcardMsg_DealEnds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.dealcardMsg.DealEnds)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required int32 beishu = 3;
  if (has_beishu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beishu(), target);
  }

  // required int64 winmoney = 4;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->winmoney(), target);
  }

  // required int64 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.dealcardMsg.DealEnds)
  return target;
}

int dealcardMsg_DealEnds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 beishu = 3;
    if (has_beishu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beishu());
    }

    // required int64 winmoney = 4;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winmoney());
    }

    // required int64 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dealcardMsg_DealEnds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dealcardMsg_DealEnds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dealcardMsg_DealEnds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dealcardMsg_DealEnds::MergeFrom(const dealcardMsg_DealEnds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_beishu()) {
      set_beishu(from.beishu());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dealcardMsg_DealEnds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dealcardMsg_DealEnds::CopyFrom(const dealcardMsg_DealEnds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dealcardMsg_DealEnds::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void dealcardMsg_DealEnds::Swap(dealcardMsg_DealEnds* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(beishu_, other->beishu_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dealcardMsg_DealEnds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dealcardMsg_DealEnds_descriptor_;
  metadata.reflection = dealcardMsg_DealEnds_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dealcardMsg_GangCard::kCardsFieldNumber;
const int dealcardMsg_GangCard::kTypeFieldNumber;
#endif  // !_MSC_VER

dealcardMsg_GangCard::dealcardMsg_GangCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.dealcardMsg.GangCard)
}

void dealcardMsg_GangCard::InitAsDefaultInstance() {
}

dealcardMsg_GangCard::dealcardMsg_GangCard(const dealcardMsg_GangCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.dealcardMsg.GangCard)
}

void dealcardMsg_GangCard::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dealcardMsg_GangCard::~dealcardMsg_GangCard() {
  // @@protoc_insertion_point(destructor:mahjong_msg.dealcardMsg.GangCard)
  SharedDtor();
}

void dealcardMsg_GangCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dealcardMsg_GangCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dealcardMsg_GangCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dealcardMsg_GangCard_descriptor_;
}

const dealcardMsg_GangCard& dealcardMsg_GangCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

dealcardMsg_GangCard* dealcardMsg_GangCard::default_instance_ = NULL;

dealcardMsg_GangCard* dealcardMsg_GangCard::New() const {
  return new dealcardMsg_GangCard;
}

void dealcardMsg_GangCard::Clear() {
  type_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dealcardMsg_GangCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.dealcardMsg.GangCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.dealcardMsg.GangCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.dealcardMsg.GangCard)
  return false;
#undef DO_
}

void dealcardMsg_GangCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.dealcardMsg.GangCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.dealcardMsg.GangCard)
}

::google::protobuf::uint8* dealcardMsg_GangCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.dealcardMsg.GangCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.dealcardMsg.GangCard)
  return target;
}

int dealcardMsg_GangCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dealcardMsg_GangCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dealcardMsg_GangCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dealcardMsg_GangCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dealcardMsg_GangCard::MergeFrom(const dealcardMsg_GangCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dealcardMsg_GangCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dealcardMsg_GangCard::CopyFrom(const dealcardMsg_GangCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dealcardMsg_GangCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void dealcardMsg_GangCard::Swap(dealcardMsg_GangCard* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dealcardMsg_GangCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dealcardMsg_GangCard_descriptor_;
  metadata.reflection = dealcardMsg_GangCard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dealcardMsg::kDealcardsFieldNumber;
const int dealcardMsg::kUidFieldNumber;
const int dealcardMsg::kSeatidFieldNumber;
const int dealcardMsg::kCardnumsFieldNumber;
const int dealcardMsg::kCardvFieldNumber;
const int dealcardMsg::kIndexFieldNumber;
const int dealcardMsg::kDtypeFieldNumber;
const int dealcardMsg::kOtypeFieldNumber;
const int dealcardMsg::kZmcountFieldNumber;
const int dealcardMsg::kHpcountFieldNumber;
const int dealcardMsg::kMoneyFieldNumber;
const int dealcardMsg::kTrainMoneyFieldNumber;
const int dealcardMsg::kTasteMoneyFieldNumber;
const int dealcardMsg::kLastseatidFieldNumber;
const int dealcardMsg::kQgflagFieldNumber;
const int dealcardMsg::kDealendsFieldNumber;
const int dealcardMsg::kMflagFieldNumber;
const int dealcardMsg::kQgdealFieldNumber;
const int dealcardMsg::kHandcardsFieldNumber;
const int dealcardMsg::kGangcardsFieldNumber;
const int dealcardMsg::kPassHuCountFieldNumber;
const int dealcardMsg::kTiantingFieldNumber;
const int dealcardMsg::kHaidilaoyueFieldNumber;
const int dealcardMsg::kMiaoshouhuichunFieldNumber;
const int dealcardMsg::kQgseatidFieldNumber;
#endif  // !_MSC_VER

dealcardMsg::dealcardMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.dealcardMsg)
}

void dealcardMsg::InitAsDefaultInstance() {
}

dealcardMsg::dealcardMsg(const dealcardMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.dealcardMsg)
}

void dealcardMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  cardnums_ = 0;
  cardv_ = 0;
  index_ = 0;
  dtype_ = 0;
  otype_ = 0;
  zmcount_ = 0;
  hpcount_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  train_money_ = 0;
  taste_money_ = 0;
  lastseatid_ = 0;
  qgflag_ = 0;
  mflag_ = 0;
  qgdeal_ = 0;
  pass_hu_count_ = 0;
  tianting_ = false;
  haidilaoyue_ = false;
  miaoshouhuichun_ = false;
  qgseatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dealcardMsg::~dealcardMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.dealcardMsg)
  SharedDtor();
}

void dealcardMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dealcardMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dealcardMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dealcardMsg_descriptor_;
}

const dealcardMsg& dealcardMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

dealcardMsg* dealcardMsg::default_instance_ = NULL;

dealcardMsg* dealcardMsg::New() const {
  return new dealcardMsg;
}

void dealcardMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dealcardMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(uid_, otype_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(zmcount_, lastseatid_);
    qgflag_ = 0;
  }
  if (_has_bits_[16 / 32] & 15925248) {
    ZR_(qgdeal_, pass_hu_count_);
    ZR_(tianting_, miaoshouhuichun_);
    mflag_ = 0;
  }
  qgseatid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  dealcards_.Clear();
  dealends_.Clear();
  handcards_.Clear();
  gangcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dealcardMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.dealcardMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dealcards = 1;
      case 1: {
        if (tag == 8) {
         parse_dealcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_dealcards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dealcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dealcards;
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 3;
      case 3: {
        if (tag == 24) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cardnums;
        break;
      }

      // required int32 cardnums = 4;
      case 4: {
        if (tag == 32) {
         parse_cardnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnums_)));
          set_has_cardnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cardv;
        break;
      }

      // required int32 cardv = 5;
      case 5: {
        if (tag == 40) {
         parse_cardv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardv_)));
          set_has_cardv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }

      // required int32 index = 6;
      case 6: {
        if (tag == 48) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dtype;
        break;
      }

      // required int32 dtype = 7;
      case 7: {
        if (tag == 56) {
         parse_dtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtype_)));
          set_has_dtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_otype;
        break;
      }

      // required int32 otype = 8;
      case 8: {
        if (tag == 64) {
         parse_otype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otype_)));
          set_has_otype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_zmcount;
        break;
      }

      // required int32 zmcount = 9;
      case 9: {
        if (tag == 72) {
         parse_zmcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zmcount_)));
          set_has_zmcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hpcount;
        break;
      }

      // required int32 hpcount = 10;
      case 10: {
        if (tag == 80) {
         parse_hpcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpcount_)));
          set_has_hpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // required int64 money = 11;
      case 11: {
        if (tag == 88) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_train_money;
        break;
      }

      // required int32 train_money = 12;
      case 12: {
        if (tag == 96) {
         parse_train_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_money_)));
          set_has_train_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_taste_money;
        break;
      }

      // required int32 taste_money = 13;
      case 13: {
        if (tag == 104) {
         parse_taste_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taste_money_)));
          set_has_taste_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lastseatid;
        break;
      }

      // required int32 lastseatid = 14;
      case 14: {
        if (tag == 112) {
         parse_lastseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastseatid_)));
          set_has_lastseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_qgflag;
        break;
      }

      // required int32 qgflag = 15;
      case 15: {
        if (tag == 120) {
         parse_qgflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qgflag_)));
          set_has_qgflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_dealends;
        break;
      }

      // repeated .mahjong_msg.dealcardMsg.DealEnds dealends = 16;
      case 16: {
        if (tag == 130) {
         parse_dealends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dealends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_dealends;
        if (input->ExpectTag(136)) goto parse_mflag;
        break;
      }

      // optional int32 mflag = 17;
      case 17: {
        if (tag == 136) {
         parse_mflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mflag_)));
          set_has_mflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_qgdeal;
        break;
      }

      // optional int32 qgdeal = 18;
      case 18: {
        if (tag == 144) {
         parse_qgdeal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qgdeal_)));
          set_has_qgdeal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_handcards;
        break;
      }

      // repeated int32 handcards = 19;
      case 19: {
        if (tag == 152) {
         parse_handcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_handcards())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_handcards;
        if (input->ExpectTag(162)) goto parse_gangcards;
        break;
      }

      // repeated .mahjong_msg.dealcardMsg.GangCard gangcards = 20;
      case 20: {
        if (tag == 162) {
         parse_gangcards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_gangcards;
        if (input->ExpectTag(168)) goto parse_pass_hu_count;
        break;
      }

      // optional int32 pass_hu_count = 21;
      case 21: {
        if (tag == 168) {
         parse_pass_hu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_hu_count_)));
          set_has_pass_hu_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_tianting;
        break;
      }

      // optional bool tianting = 22;
      case 22: {
        if (tag == 176) {
         parse_tianting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tianting_)));
          set_has_tianting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_haidilaoyue;
        break;
      }

      // optional bool haidilaoyue = 23;
      case 23: {
        if (tag == 184) {
         parse_haidilaoyue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haidilaoyue_)));
          set_has_haidilaoyue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_miaoshouhuichun;
        break;
      }

      // optional bool miaoshouhuichun = 24;
      case 24: {
        if (tag == 192) {
         parse_miaoshouhuichun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &miaoshouhuichun_)));
          set_has_miaoshouhuichun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_qgseatid;
        break;
      }

      // optional int32 qgseatid = 25;
      case 25: {
        if (tag == 200) {
         parse_qgseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qgseatid_)));
          set_has_qgseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.dealcardMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.dealcardMsg)
  return false;
#undef DO_
}

void dealcardMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.dealcardMsg)
  // repeated int32 dealcards = 1;
  for (int i = 0; i < this->dealcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->dealcards(i), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // required int32 cardnums = 4;
  if (has_cardnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardnums(), output);
  }

  // required int32 cardv = 5;
  if (has_cardv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardv(), output);
  }

  // required int32 index = 6;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->index(), output);
  }

  // required int32 dtype = 7;
  if (has_dtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dtype(), output);
  }

  // required int32 otype = 8;
  if (has_otype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->otype(), output);
  }

  // required int32 zmcount = 9;
  if (has_zmcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zmcount(), output);
  }

  // required int32 hpcount = 10;
  if (has_hpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hpcount(), output);
  }

  // required int64 money = 11;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->money(), output);
  }

  // required int32 train_money = 12;
  if (has_train_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->train_money(), output);
  }

  // required int32 taste_money = 13;
  if (has_taste_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->taste_money(), output);
  }

  // required int32 lastseatid = 14;
  if (has_lastseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lastseatid(), output);
  }

  // required int32 qgflag = 15;
  if (has_qgflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->qgflag(), output);
  }

  // repeated .mahjong_msg.dealcardMsg.DealEnds dealends = 16;
  for (int i = 0; i < this->dealends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dealends(i), output);
  }

  // optional int32 mflag = 17;
  if (has_mflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->mflag(), output);
  }

  // optional int32 qgdeal = 18;
  if (has_qgdeal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->qgdeal(), output);
  }

  // repeated int32 handcards = 19;
  for (int i = 0; i < this->handcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->handcards(i), output);
  }

  // repeated .mahjong_msg.dealcardMsg.GangCard gangcards = 20;
  for (int i = 0; i < this->gangcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gangcards(i), output);
  }

  // optional int32 pass_hu_count = 21;
  if (has_pass_hu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pass_hu_count(), output);
  }

  // optional bool tianting = 22;
  if (has_tianting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->tianting(), output);
  }

  // optional bool haidilaoyue = 23;
  if (has_haidilaoyue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->haidilaoyue(), output);
  }

  // optional bool miaoshouhuichun = 24;
  if (has_miaoshouhuichun()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->miaoshouhuichun(), output);
  }

  // optional int32 qgseatid = 25;
  if (has_qgseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->qgseatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.dealcardMsg)
}

::google::protobuf::uint8* dealcardMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.dealcardMsg)
  // repeated int32 dealcards = 1;
  for (int i = 0; i < this->dealcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->dealcards(i), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // required int32 cardnums = 4;
  if (has_cardnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardnums(), target);
  }

  // required int32 cardv = 5;
  if (has_cardv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardv(), target);
  }

  // required int32 index = 6;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->index(), target);
  }

  // required int32 dtype = 7;
  if (has_dtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dtype(), target);
  }

  // required int32 otype = 8;
  if (has_otype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->otype(), target);
  }

  // required int32 zmcount = 9;
  if (has_zmcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zmcount(), target);
  }

  // required int32 hpcount = 10;
  if (has_hpcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hpcount(), target);
  }

  // required int64 money = 11;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->money(), target);
  }

  // required int32 train_money = 12;
  if (has_train_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->train_money(), target);
  }

  // required int32 taste_money = 13;
  if (has_taste_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->taste_money(), target);
  }

  // required int32 lastseatid = 14;
  if (has_lastseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lastseatid(), target);
  }

  // required int32 qgflag = 15;
  if (has_qgflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->qgflag(), target);
  }

  // repeated .mahjong_msg.dealcardMsg.DealEnds dealends = 16;
  for (int i = 0; i < this->dealends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dealends(i), target);
  }

  // optional int32 mflag = 17;
  if (has_mflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->mflag(), target);
  }

  // optional int32 qgdeal = 18;
  if (has_qgdeal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->qgdeal(), target);
  }

  // repeated int32 handcards = 19;
  for (int i = 0; i < this->handcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->handcards(i), target);
  }

  // repeated .mahjong_msg.dealcardMsg.GangCard gangcards = 20;
  for (int i = 0; i < this->gangcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gangcards(i), target);
  }

  // optional int32 pass_hu_count = 21;
  if (has_pass_hu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pass_hu_count(), target);
  }

  // optional bool tianting = 22;
  if (has_tianting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->tianting(), target);
  }

  // optional bool haidilaoyue = 23;
  if (has_haidilaoyue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->haidilaoyue(), target);
  }

  // optional bool miaoshouhuichun = 24;
  if (has_miaoshouhuichun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->miaoshouhuichun(), target);
  }

  // optional int32 qgseatid = 25;
  if (has_qgseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->qgseatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.dealcardMsg)
  return target;
}

int dealcardMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 3;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 cardnums = 4;
    if (has_cardnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnums());
    }

    // required int32 cardv = 5;
    if (has_cardv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardv());
    }

    // required int32 index = 6;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 dtype = 7;
    if (has_dtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtype());
    }

    // required int32 otype = 8;
    if (has_otype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 zmcount = 9;
    if (has_zmcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zmcount());
    }

    // required int32 hpcount = 10;
    if (has_hpcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpcount());
    }

    // required int64 money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int32 train_money = 12;
    if (has_train_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_money());
    }

    // required int32 taste_money = 13;
    if (has_taste_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taste_money());
    }

    // required int32 lastseatid = 14;
    if (has_lastseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastseatid());
    }

    // required int32 qgflag = 15;
    if (has_qgflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qgflag());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 mflag = 17;
    if (has_mflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mflag());
    }

    // optional int32 qgdeal = 18;
    if (has_qgdeal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qgdeal());
    }

    // optional int32 pass_hu_count = 21;
    if (has_pass_hu_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_hu_count());
    }

    // optional bool tianting = 22;
    if (has_tianting()) {
      total_size += 2 + 1;
    }

    // optional bool haidilaoyue = 23;
    if (has_haidilaoyue()) {
      total_size += 2 + 1;
    }

    // optional bool miaoshouhuichun = 24;
    if (has_miaoshouhuichun()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 qgseatid = 25;
    if (has_qgseatid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qgseatid());
    }

  }
  // repeated int32 dealcards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dealcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dealcards(i));
    }
    total_size += 1 * this->dealcards_size() + data_size;
  }

  // repeated .mahjong_msg.dealcardMsg.DealEnds dealends = 16;
  total_size += 2 * this->dealends_size();
  for (int i = 0; i < this->dealends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dealends(i));
  }

  // repeated int32 handcards = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcards(i));
    }
    total_size += 2 * this->handcards_size() + data_size;
  }

  // repeated .mahjong_msg.dealcardMsg.GangCard gangcards = 20;
  total_size += 2 * this->gangcards_size();
  for (int i = 0; i < this->gangcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dealcardMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dealcardMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dealcardMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dealcardMsg::MergeFrom(const dealcardMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dealcards_.MergeFrom(from.dealcards_);
  dealends_.MergeFrom(from.dealends_);
  handcards_.MergeFrom(from.handcards_);
  gangcards_.MergeFrom(from.gangcards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_cardnums()) {
      set_cardnums(from.cardnums());
    }
    if (from.has_cardv()) {
      set_cardv(from.cardv());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_dtype()) {
      set_dtype(from.dtype());
    }
    if (from.has_otype()) {
      set_otype(from.otype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zmcount()) {
      set_zmcount(from.zmcount());
    }
    if (from.has_hpcount()) {
      set_hpcount(from.hpcount());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_train_money()) {
      set_train_money(from.train_money());
    }
    if (from.has_taste_money()) {
      set_taste_money(from.taste_money());
    }
    if (from.has_lastseatid()) {
      set_lastseatid(from.lastseatid());
    }
    if (from.has_qgflag()) {
      set_qgflag(from.qgflag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mflag()) {
      set_mflag(from.mflag());
    }
    if (from.has_qgdeal()) {
      set_qgdeal(from.qgdeal());
    }
    if (from.has_pass_hu_count()) {
      set_pass_hu_count(from.pass_hu_count());
    }
    if (from.has_tianting()) {
      set_tianting(from.tianting());
    }
    if (from.has_haidilaoyue()) {
      set_haidilaoyue(from.haidilaoyue());
    }
    if (from.has_miaoshouhuichun()) {
      set_miaoshouhuichun(from.miaoshouhuichun());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_qgseatid()) {
      set_qgseatid(from.qgseatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dealcardMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dealcardMsg::CopyFrom(const dealcardMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dealcardMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007ffe) != 0x00007ffe) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dealends())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gangcards())) return false;
  return true;
}

void dealcardMsg::Swap(dealcardMsg* other) {
  if (other != this) {
    dealcards_.Swap(&other->dealcards_);
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(cardnums_, other->cardnums_);
    std::swap(cardv_, other->cardv_);
    std::swap(index_, other->index_);
    std::swap(dtype_, other->dtype_);
    std::swap(otype_, other->otype_);
    std::swap(zmcount_, other->zmcount_);
    std::swap(hpcount_, other->hpcount_);
    std::swap(money_, other->money_);
    std::swap(train_money_, other->train_money_);
    std::swap(taste_money_, other->taste_money_);
    std::swap(lastseatid_, other->lastseatid_);
    std::swap(qgflag_, other->qgflag_);
    dealends_.Swap(&other->dealends_);
    std::swap(mflag_, other->mflag_);
    std::swap(qgdeal_, other->qgdeal_);
    handcards_.Swap(&other->handcards_);
    gangcards_.Swap(&other->gangcards_);
    std::swap(pass_hu_count_, other->pass_hu_count_);
    std::swap(tianting_, other->tianting_);
    std::swap(haidilaoyue_, other->haidilaoyue_);
    std::swap(miaoshouhuichun_, other->miaoshouhuichun_);
    std::swap(qgseatid_, other->qgseatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dealcardMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dealcardMsg_descriptor_;
  metadata.reflection = dealcardMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gameendMsg_PlayInfo::kUidFieldNumber;
const int gameendMsg_PlayInfo::kSeatidFieldNumber;
const int gameendMsg_PlayInfo::kNameFieldNumber;
const int gameendMsg_PlayInfo::kWinmoneyFieldNumber;
const int gameendMsg_PlayInfo::kBeishuFieldNumber;
const int gameendMsg_PlayInfo::kTotalBoardFieldNumber;
const int gameendMsg_PlayInfo::kTotalWinFieldNumber;
const int gameendMsg_PlayInfo::kMoneyFieldNumber;
const int gameendMsg_PlayInfo::kMaxFanFieldNumber;
const int gameendMsg_PlayInfo::kLovelinessAmtFieldNumber;
const int gameendMsg_PlayInfo::kTotalWinMoneyFieldNumber;
const int gameendMsg_PlayInfo::kCardsFieldNumber;
const int gameendMsg_PlayInfo::kPassHuCountFieldNumber;
const int gameendMsg_PlayInfo::kTrainMoneyFieldNumber;
const int gameendMsg_PlayInfo::kTasteMoneyFieldNumber;
#endif  // !_MSC_VER

gameendMsg_PlayInfo::gameendMsg_PlayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.gameendMsg.PlayInfo)
}

void gameendMsg_PlayInfo::InitAsDefaultInstance() {
}

gameendMsg_PlayInfo::gameendMsg_PlayInfo(const gameendMsg_PlayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.gameendMsg.PlayInfo)
}

void gameendMsg_PlayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winmoney_ = GOOGLE_LONGLONG(0);
  beishu_ = 0;
  total_board_ = 0;
  total_win_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  max_fan_ = 0;
  loveliness_amt_ = 0;
  total_win_money_ = GOOGLE_LONGLONG(0);
  pass_hu_count_ = 0;
  train_money_ = 0;
  taste_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gameendMsg_PlayInfo::~gameendMsg_PlayInfo() {
  // @@protoc_insertion_point(destructor:mahjong_msg.gameendMsg.PlayInfo)
  SharedDtor();
}

void gameendMsg_PlayInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void gameendMsg_PlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gameendMsg_PlayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gameendMsg_PlayInfo_descriptor_;
}

const gameendMsg_PlayInfo& gameendMsg_PlayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

gameendMsg_PlayInfo* gameendMsg_PlayInfo::default_instance_ = NULL;

gameendMsg_PlayInfo* gameendMsg_PlayInfo::New() const {
  return new gameendMsg_PlayInfo;
}

void gameendMsg_PlayInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<gameendMsg_PlayInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, seatid_);
    ZR_(winmoney_, total_win_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 30464) {
    ZR_(max_fan_, pass_hu_count_);
    ZR_(train_money_, taste_money_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gameendMsg_PlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.gameendMsg.PlayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_winmoney;
        break;
      }

      // required int64 winmoney = 4;
      case 4: {
        if (tag == 32) {
         parse_winmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_beishu;
        break;
      }

      // required int32 beishu = 5;
      case 5: {
        if (tag == 40) {
         parse_beishu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beishu_)));
          set_has_beishu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_board;
        break;
      }

      // required int32 total_board = 6;
      case 6: {
        if (tag == 48) {
         parse_total_board:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_board_)));
          set_has_total_board();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_win;
        break;
      }

      // required int32 total_win = 7;
      case 7: {
        if (tag == 56) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_money;
        break;
      }

      // required int64 money = 8;
      case 8: {
        if (tag == 64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_fan;
        break;
      }

      // required int32 max_fan = 9;
      case 9: {
        if (tag == 72) {
         parse_max_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_fan_)));
          set_has_max_fan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_loveliness_amt;
        break;
      }

      // required int32 loveliness_amt = 10;
      case 10: {
        if (tag == 80) {
         parse_loveliness_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loveliness_amt_)));
          set_has_loveliness_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_win_money;
        break;
      }

      // required int64 total_win_money = 11;
      case 11: {
        if (tag == 88) {
         parse_total_win_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_win_money_)));
          set_has_total_win_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 12;
      case 12: {
        if (tag == 96) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_cards())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cards;
        if (input->ExpectTag(112)) goto parse_pass_hu_count;
        break;
      }

      // optional int32 pass_hu_count = 14;
      case 14: {
        if (tag == 112) {
         parse_pass_hu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_hu_count_)));
          set_has_pass_hu_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_train_money;
        break;
      }

      // optional int32 train_money = 15;
      case 15: {
        if (tag == 120) {
         parse_train_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_money_)));
          set_has_train_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_taste_money;
        break;
      }

      // optional int32 taste_money = 16;
      case 16: {
        if (tag == 128) {
         parse_taste_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taste_money_)));
          set_has_taste_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.gameendMsg.PlayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.gameendMsg.PlayInfo)
  return false;
#undef DO_
}

void gameendMsg_PlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.gameendMsg.PlayInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required int64 winmoney = 4;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winmoney(), output);
  }

  // required int32 beishu = 5;
  if (has_beishu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->beishu(), output);
  }

  // required int32 total_board = 6;
  if (has_total_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_board(), output);
  }

  // required int32 total_win = 7;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_win(), output);
  }

  // required int64 money = 8;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->money(), output);
  }

  // required int32 max_fan = 9;
  if (has_max_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_fan(), output);
  }

  // required int32 loveliness_amt = 10;
  if (has_loveliness_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->loveliness_amt(), output);
  }

  // required int64 total_win_money = 11;
  if (has_total_win_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->total_win_money(), output);
  }

  // repeated int32 cards = 12;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->cards(i), output);
  }

  // optional int32 pass_hu_count = 14;
  if (has_pass_hu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pass_hu_count(), output);
  }

  // optional int32 train_money = 15;
  if (has_train_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->train_money(), output);
  }

  // optional int32 taste_money = 16;
  if (has_taste_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->taste_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.gameendMsg.PlayInfo)
}

::google::protobuf::uint8* gameendMsg_PlayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.gameendMsg.PlayInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int64 winmoney = 4;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->winmoney(), target);
  }

  // required int32 beishu = 5;
  if (has_beishu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->beishu(), target);
  }

  // required int32 total_board = 6;
  if (has_total_board()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_board(), target);
  }

  // required int32 total_win = 7;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_win(), target);
  }

  // required int64 money = 8;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->money(), target);
  }

  // required int32 max_fan = 9;
  if (has_max_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_fan(), target);
  }

  // required int32 loveliness_amt = 10;
  if (has_loveliness_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->loveliness_amt(), target);
  }

  // required int64 total_win_money = 11;
  if (has_total_win_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->total_win_money(), target);
  }

  // repeated int32 cards = 12;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->cards(i), target);
  }

  // optional int32 pass_hu_count = 14;
  if (has_pass_hu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pass_hu_count(), target);
  }

  // optional int32 train_money = 15;
  if (has_train_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->train_money(), target);
  }

  // optional int32 taste_money = 16;
  if (has_taste_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->taste_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.gameendMsg.PlayInfo)
  return target;
}

int gameendMsg_PlayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 winmoney = 4;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winmoney());
    }

    // required int32 beishu = 5;
    if (has_beishu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beishu());
    }

    // required int32 total_board = 6;
    if (has_total_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_board());
    }

    // required int32 total_win = 7;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_win());
    }

    // required int64 money = 8;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 max_fan = 9;
    if (has_max_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_fan());
    }

    // required int32 loveliness_amt = 10;
    if (has_loveliness_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loveliness_amt());
    }

    // required int64 total_win_money = 11;
    if (has_total_win_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_win_money());
    }

    // optional int32 pass_hu_count = 14;
    if (has_pass_hu_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_hu_count());
    }

    // optional int32 train_money = 15;
    if (has_train_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_money());
    }

    // optional int32 taste_money = 16;
    if (has_taste_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taste_money());
    }

  }
  // repeated int32 cards = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gameendMsg_PlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gameendMsg_PlayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gameendMsg_PlayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gameendMsg_PlayInfo::MergeFrom(const gameendMsg_PlayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_beishu()) {
      set_beishu(from.beishu());
    }
    if (from.has_total_board()) {
      set_total_board(from.total_board());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_fan()) {
      set_max_fan(from.max_fan());
    }
    if (from.has_loveliness_amt()) {
      set_loveliness_amt(from.loveliness_amt());
    }
    if (from.has_total_win_money()) {
      set_total_win_money(from.total_win_money());
    }
    if (from.has_pass_hu_count()) {
      set_pass_hu_count(from.pass_hu_count());
    }
    if (from.has_train_money()) {
      set_train_money(from.train_money());
    }
    if (from.has_taste_money()) {
      set_taste_money(from.taste_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gameendMsg_PlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gameendMsg_PlayInfo::CopyFrom(const gameendMsg_PlayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gameendMsg_PlayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void gameendMsg_PlayInfo::Swap(gameendMsg_PlayInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(name_, other->name_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(beishu_, other->beishu_);
    std::swap(total_board_, other->total_board_);
    std::swap(total_win_, other->total_win_);
    std::swap(money_, other->money_);
    std::swap(max_fan_, other->max_fan_);
    std::swap(loveliness_amt_, other->loveliness_amt_);
    std::swap(total_win_money_, other->total_win_money_);
    cards_.Swap(&other->cards_);
    std::swap(pass_hu_count_, other->pass_hu_count_);
    std::swap(train_money_, other->train_money_);
    std::swap(taste_money_, other->taste_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gameendMsg_PlayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gameendMsg_PlayInfo_descriptor_;
  metadata.reflection = gameendMsg_PlayInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gameendMsg_FanInfo::kFtypeFieldNumber;
const int gameendMsg_FanInfo::kBeishuFieldNumber;
const int gameendMsg_FanInfo::kWinmoneyFieldNumber;
const int gameendMsg_FanInfo::kOtypeFieldNumber;
#endif  // !_MSC_VER

gameendMsg_FanInfo::gameendMsg_FanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.gameendMsg.FanInfo)
}

void gameendMsg_FanInfo::InitAsDefaultInstance() {
}

gameendMsg_FanInfo::gameendMsg_FanInfo(const gameendMsg_FanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.gameendMsg.FanInfo)
}

void gameendMsg_FanInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ftype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beishu_ = 0;
  winmoney_ = GOOGLE_LONGLONG(0);
  otype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gameendMsg_FanInfo::~gameendMsg_FanInfo() {
  // @@protoc_insertion_point(destructor:mahjong_msg.gameendMsg.FanInfo)
  SharedDtor();
}

void gameendMsg_FanInfo::SharedDtor() {
  if (ftype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ftype_;
  }
  if (this != default_instance_) {
  }
}

void gameendMsg_FanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gameendMsg_FanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gameendMsg_FanInfo_descriptor_;
}

const gameendMsg_FanInfo& gameendMsg_FanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

gameendMsg_FanInfo* gameendMsg_FanInfo::default_instance_ = NULL;

gameendMsg_FanInfo* gameendMsg_FanInfo::New() const {
  return new gameendMsg_FanInfo;
}

void gameendMsg_FanInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<gameendMsg_FanInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(winmoney_, otype_);
    if (has_ftype()) {
      if (ftype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ftype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gameendMsg_FanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.gameendMsg.FanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ftype = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ftype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ftype().data(), this->ftype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ftype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_beishu;
        break;
      }

      // required int32 beishu = 2;
      case 2: {
        if (tag == 16) {
         parse_beishu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beishu_)));
          set_has_beishu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_winmoney;
        break;
      }

      // optional int64 winmoney = 3;
      case 3: {
        if (tag == 24) {
         parse_winmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_otype;
        break;
      }

      // optional int32 otype = 4;
      case 4: {
        if (tag == 32) {
         parse_otype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otype_)));
          set_has_otype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.gameendMsg.FanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.gameendMsg.FanInfo)
  return false;
#undef DO_
}

void gameendMsg_FanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.gameendMsg.FanInfo)
  // required string ftype = 1;
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ftype().data(), this->ftype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ftype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ftype(), output);
  }

  // required int32 beishu = 2;
  if (has_beishu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beishu(), output);
  }

  // optional int64 winmoney = 3;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->winmoney(), output);
  }

  // optional int32 otype = 4;
  if (has_otype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->otype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.gameendMsg.FanInfo)
}

::google::protobuf::uint8* gameendMsg_FanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.gameendMsg.FanInfo)
  // required string ftype = 1;
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ftype().data(), this->ftype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ftype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ftype(), target);
  }

  // required int32 beishu = 2;
  if (has_beishu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beishu(), target);
  }

  // optional int64 winmoney = 3;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->winmoney(), target);
  }

  // optional int32 otype = 4;
  if (has_otype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->otype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.gameendMsg.FanInfo)
  return target;
}

int gameendMsg_FanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ftype = 1;
    if (has_ftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ftype());
    }

    // required int32 beishu = 2;
    if (has_beishu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beishu());
    }

    // optional int64 winmoney = 3;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winmoney());
    }

    // optional int32 otype = 4;
    if (has_otype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gameendMsg_FanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gameendMsg_FanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gameendMsg_FanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gameendMsg_FanInfo::MergeFrom(const gameendMsg_FanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ftype()) {
      set_ftype(from.ftype());
    }
    if (from.has_beishu()) {
      set_beishu(from.beishu());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
    if (from.has_otype()) {
      set_otype(from.otype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gameendMsg_FanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gameendMsg_FanInfo::CopyFrom(const gameendMsg_FanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gameendMsg_FanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gameendMsg_FanInfo::Swap(gameendMsg_FanInfo* other) {
  if (other != this) {
    std::swap(ftype_, other->ftype_);
    std::swap(beishu_, other->beishu_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(otype_, other->otype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gameendMsg_FanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gameendMsg_FanInfo_descriptor_;
  metadata.reflection = gameendMsg_FanInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gameendMsg::kIsliujuFieldNumber;
const int gameendMsg::kPlayersFieldNumber;
const int gameendMsg::kFaninfosFieldNumber;
#endif  // !_MSC_VER

gameendMsg::gameendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.gameendMsg)
}

void gameendMsg::InitAsDefaultInstance() {
}

gameendMsg::gameendMsg(const gameendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.gameendMsg)
}

void gameendMsg::SharedCtor() {
  _cached_size_ = 0;
  isliuju_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gameendMsg::~gameendMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.gameendMsg)
  SharedDtor();
}

void gameendMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gameendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gameendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gameendMsg_descriptor_;
}

const gameendMsg& gameendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

gameendMsg* gameendMsg::default_instance_ = NULL;

gameendMsg* gameendMsg::New() const {
  return new gameendMsg;
}

void gameendMsg::Clear() {
  isliuju_ = 0;
  players_.Clear();
  faninfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gameendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.gameendMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isliuju = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isliuju_)));
          set_has_isliuju();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .mahjong_msg.gameendMsg.PlayInfo players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        if (input->ExpectTag(26)) goto parse_faninfos;
        break;
      }

      // repeated .mahjong_msg.gameendMsg.FanInfo faninfos = 3;
      case 3: {
        if (tag == 26) {
         parse_faninfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faninfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faninfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.gameendMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.gameendMsg)
  return false;
#undef DO_
}

void gameendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.gameendMsg)
  // required int32 isliuju = 1;
  if (has_isliuju()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isliuju(), output);
  }

  // repeated .mahjong_msg.gameendMsg.PlayInfo players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated .mahjong_msg.gameendMsg.FanInfo faninfos = 3;
  for (int i = 0; i < this->faninfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->faninfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.gameendMsg)
}

::google::protobuf::uint8* gameendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.gameendMsg)
  // required int32 isliuju = 1;
  if (has_isliuju()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isliuju(), target);
  }

  // repeated .mahjong_msg.gameendMsg.PlayInfo players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(i), target);
  }

  // repeated .mahjong_msg.gameendMsg.FanInfo faninfos = 3;
  for (int i = 0; i < this->faninfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->faninfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.gameendMsg)
  return target;
}

int gameendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isliuju = 1;
    if (has_isliuju()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isliuju());
    }

  }
  // repeated .mahjong_msg.gameendMsg.PlayInfo players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .mahjong_msg.gameendMsg.FanInfo faninfos = 3;
  total_size += 1 * this->faninfos_size();
  for (int i = 0; i < this->faninfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faninfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gameendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gameendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gameendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gameendMsg::MergeFrom(const gameendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  faninfos_.MergeFrom(from.faninfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isliuju()) {
      set_isliuju(from.isliuju());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gameendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gameendMsg::CopyFrom(const gameendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gameendMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->faninfos())) return false;
  return true;
}

void gameendMsg::Swap(gameendMsg* other) {
  if (other != this) {
    std::swap(isliuju_, other->isliuju_);
    players_.Swap(&other->players_);
    faninfos_.Swap(&other->faninfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gameendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gameendMsg_descriptor_;
  metadata.reflection = gameendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chatRequest::kTextFieldNumber;
const int chatRequest::kChatidFieldNumber;
#endif  // !_MSC_VER

chatRequest::chatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.chatRequest)
}

void chatRequest::InitAsDefaultInstance() {
}

chatRequest::chatRequest(const chatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.chatRequest)
}

void chatRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatRequest::~chatRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.chatRequest)
  SharedDtor();
}

void chatRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void chatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatRequest_descriptor_;
}

const chatRequest& chatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

chatRequest* chatRequest::default_instance_ = NULL;

chatRequest* chatRequest::New() const {
  return new chatRequest;
}

void chatRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    chatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.chatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chatid;
        break;
      }

      // required int32 chatid = 2;
      case 2: {
        if (tag == 16) {
         parse_chatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.chatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.chatRequest)
  return false;
#undef DO_
}

void chatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.chatRequest)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // required int32 chatid = 2;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.chatRequest)
}

::google::protobuf::uint8* chatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.chatRequest)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // required int32 chatid = 2;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.chatRequest)
  return target;
}

int chatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // required int32 chatid = 2;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatRequest::MergeFrom(const chatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatRequest::CopyFrom(const chatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void chatRequest::Swap(chatRequest* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(chatid_, other->chatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatRequest_descriptor_;
  metadata.reflection = chatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int giveupMsg::kSeatidFieldNumber;
#endif  // !_MSC_VER

giveupMsg::giveupMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.giveupMsg)
}

void giveupMsg::InitAsDefaultInstance() {
}

giveupMsg::giveupMsg(const giveupMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.giveupMsg)
}

void giveupMsg::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

giveupMsg::~giveupMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.giveupMsg)
  SharedDtor();
}

void giveupMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void giveupMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* giveupMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return giveupMsg_descriptor_;
}

const giveupMsg& giveupMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

giveupMsg* giveupMsg::default_instance_ = NULL;

giveupMsg* giveupMsg::New() const {
  return new giveupMsg;
}

void giveupMsg::Clear() {
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool giveupMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.giveupMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.giveupMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.giveupMsg)
  return false;
#undef DO_
}

void giveupMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.giveupMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.giveupMsg)
}

::google::protobuf::uint8* giveupMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.giveupMsg)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.giveupMsg)
  return target;
}

int giveupMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void giveupMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const giveupMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const giveupMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void giveupMsg::MergeFrom(const giveupMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void giveupMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void giveupMsg::CopyFrom(const giveupMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool giveupMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void giveupMsg::Swap(giveupMsg* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata giveupMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = giveupMsg_descriptor_;
  metadata.reflection = giveupMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chatMsg::kUidFieldNumber;
const int chatMsg::kSeatidFieldNumber;
const int chatMsg::kTextFieldNumber;
const int chatMsg::kChatidFieldNumber;
#endif  // !_MSC_VER

chatMsg::chatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.chatMsg)
}

void chatMsg::InitAsDefaultInstance() {
}

chatMsg::chatMsg(const chatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.chatMsg)
}

void chatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatMsg::~chatMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.chatMsg)
  SharedDtor();
}

void chatMsg::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void chatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatMsg_descriptor_;
}

const chatMsg& chatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

chatMsg* chatMsg::default_instance_ = NULL;

chatMsg* chatMsg::New() const {
  return new chatMsg;
}

void chatMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<chatMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, seatid_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    chatid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.chatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // required string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatid;
        break;
      }

      // required int32 chatid = 4;
      case 4: {
        if (tag == 32) {
         parse_chatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.chatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.chatMsg)
  return false;
#undef DO_
}

void chatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.chatMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // required int32 chatid = 4;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.chatMsg)
}

::google::protobuf::uint8* chatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.chatMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // required int32 chatid = 4;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.chatMsg)
  return target;
}

int chatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // required int32 chatid = 4;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatMsg::MergeFrom(const chatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatMsg::CopyFrom(const chatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void chatMsg::Swap(chatMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(text_, other->text_);
    std::swap(chatid_, other->chatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatMsg_descriptor_;
  metadata.reflection = chatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int normalexpresionRequest::kExpressionidFieldNumber;
#endif  // !_MSC_VER

normalexpresionRequest::normalexpresionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.normalexpresionRequest)
}

void normalexpresionRequest::InitAsDefaultInstance() {
}

normalexpresionRequest::normalexpresionRequest(const normalexpresionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.normalexpresionRequest)
}

void normalexpresionRequest::SharedCtor() {
  _cached_size_ = 0;
  expressionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

normalexpresionRequest::~normalexpresionRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.normalexpresionRequest)
  SharedDtor();
}

void normalexpresionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void normalexpresionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* normalexpresionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return normalexpresionRequest_descriptor_;
}

const normalexpresionRequest& normalexpresionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

normalexpresionRequest* normalexpresionRequest::default_instance_ = NULL;

normalexpresionRequest* normalexpresionRequest::New() const {
  return new normalexpresionRequest;
}

void normalexpresionRequest::Clear() {
  expressionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool normalexpresionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.normalexpresionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 expressionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expressionid_)));
          set_has_expressionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.normalexpresionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.normalexpresionRequest)
  return false;
#undef DO_
}

void normalexpresionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.normalexpresionRequest)
  // required int32 expressionid = 1;
  if (has_expressionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expressionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.normalexpresionRequest)
}

::google::protobuf::uint8* normalexpresionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.normalexpresionRequest)
  // required int32 expressionid = 1;
  if (has_expressionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->expressionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.normalexpresionRequest)
  return target;
}

int normalexpresionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 expressionid = 1;
    if (has_expressionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expressionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void normalexpresionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const normalexpresionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const normalexpresionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void normalexpresionRequest::MergeFrom(const normalexpresionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expressionid()) {
      set_expressionid(from.expressionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void normalexpresionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void normalexpresionRequest::CopyFrom(const normalexpresionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool normalexpresionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void normalexpresionRequest::Swap(normalexpresionRequest* other) {
  if (other != this) {
    std::swap(expressionid_, other->expressionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata normalexpresionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = normalexpresionRequest_descriptor_;
  metadata.reflection = normalexpresionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int normalexpresionMsg::kUidFieldNumber;
const int normalexpresionMsg::kNameFieldNumber;
const int normalexpresionMsg::kSeatidFieldNumber;
const int normalexpresionMsg::kExpressionidFieldNumber;
#endif  // !_MSC_VER

normalexpresionMsg::normalexpresionMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.normalexpresionMsg)
}

void normalexpresionMsg::InitAsDefaultInstance() {
}

normalexpresionMsg::normalexpresionMsg(const normalexpresionMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.normalexpresionMsg)
}

void normalexpresionMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seatid_ = 0;
  expressionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

normalexpresionMsg::~normalexpresionMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.normalexpresionMsg)
  SharedDtor();
}

void normalexpresionMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void normalexpresionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* normalexpresionMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return normalexpresionMsg_descriptor_;
}

const normalexpresionMsg& normalexpresionMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

normalexpresionMsg* normalexpresionMsg::default_instance_ = NULL;

normalexpresionMsg* normalexpresionMsg::New() const {
  return new normalexpresionMsg;
}

void normalexpresionMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<normalexpresionMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, expressionid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool normalexpresionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.normalexpresionMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 3;
      case 3: {
        if (tag == 24) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expressionid;
        break;
      }

      // required int32 expressionid = 4;
      case 4: {
        if (tag == 32) {
         parse_expressionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expressionid_)));
          set_has_expressionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.normalexpresionMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.normalexpresionMsg)
  return false;
#undef DO_
}

void normalexpresionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.normalexpresionMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // required int32 expressionid = 4;
  if (has_expressionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expressionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.normalexpresionMsg)
}

::google::protobuf::uint8* normalexpresionMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.normalexpresionMsg)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // required int32 expressionid = 4;
  if (has_expressionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expressionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.normalexpresionMsg)
  return target;
}

int normalexpresionMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 seatid = 3;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 expressionid = 4;
    if (has_expressionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expressionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void normalexpresionMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const normalexpresionMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const normalexpresionMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void normalexpresionMsg::MergeFrom(const normalexpresionMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_expressionid()) {
      set_expressionid(from.expressionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void normalexpresionMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void normalexpresionMsg::CopyFrom(const normalexpresionMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool normalexpresionMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void normalexpresionMsg::Swap(normalexpresionMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(seatid_, other->seatid_);
    std::swap(expressionid_, other->expressionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata normalexpresionMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = normalexpresionMsg_descriptor_;
  metadata.reflection = normalexpresionMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int expresionRequest::kTargetuidFieldNumber;
const int expresionRequest::kReciveseatidFieldNumber;
const int expresionRequest::kExpressionidFieldNumber;
#endif  // !_MSC_VER

expresionRequest::expresionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.expresionRequest)
}

void expresionRequest::InitAsDefaultInstance() {
}

expresionRequest::expresionRequest(const expresionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.expresionRequest)
}

void expresionRequest::SharedCtor() {
  _cached_size_ = 0;
  targetuid_ = 0;
  reciveseatid_ = 0;
  expressionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expresionRequest::~expresionRequest() {
  // @@protoc_insertion_point(destructor:mahjong_msg.expresionRequest)
  SharedDtor();
}

void expresionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void expresionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* expresionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return expresionRequest_descriptor_;
}

const expresionRequest& expresionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

expresionRequest* expresionRequest::default_instance_ = NULL;

expresionRequest* expresionRequest::New() const {
  return new expresionRequest;
}

void expresionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<expresionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetuid_, expressionid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool expresionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.expresionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuid_)));
          set_has_targetuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reciveseatid;
        break;
      }

      // required int32 reciveseatid = 2;
      case 2: {
        if (tag == 16) {
         parse_reciveseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reciveseatid_)));
          set_has_reciveseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_expressionid;
        break;
      }

      // required int32 expressionid = 3;
      case 3: {
        if (tag == 24) {
         parse_expressionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expressionid_)));
          set_has_expressionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.expresionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.expresionRequest)
  return false;
#undef DO_
}

void expresionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.expresionRequest)
  // required int32 targetuid = 1;
  if (has_targetuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetuid(), output);
  }

  // required int32 reciveseatid = 2;
  if (has_reciveseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reciveseatid(), output);
  }

  // required int32 expressionid = 3;
  if (has_expressionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expressionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.expresionRequest)
}

::google::protobuf::uint8* expresionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.expresionRequest)
  // required int32 targetuid = 1;
  if (has_targetuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetuid(), target);
  }

  // required int32 reciveseatid = 2;
  if (has_reciveseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reciveseatid(), target);
  }

  // required int32 expressionid = 3;
  if (has_expressionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expressionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.expresionRequest)
  return target;
}

int expresionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetuid = 1;
    if (has_targetuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuid());
    }

    // required int32 reciveseatid = 2;
    if (has_reciveseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reciveseatid());
    }

    // required int32 expressionid = 3;
    if (has_expressionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expressionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expresionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const expresionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const expresionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void expresionRequest::MergeFrom(const expresionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetuid()) {
      set_targetuid(from.targetuid());
    }
    if (from.has_reciveseatid()) {
      set_reciveseatid(from.reciveseatid());
    }
    if (from.has_expressionid()) {
      set_expressionid(from.expressionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void expresionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void expresionRequest::CopyFrom(const expresionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expresionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void expresionRequest::Swap(expresionRequest* other) {
  if (other != this) {
    std::swap(targetuid_, other->targetuid_);
    std::swap(reciveseatid_, other->reciveseatid_);
    std::swap(expressionid_, other->expressionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata expresionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = expresionRequest_descriptor_;
  metadata.reflection = expresionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int expresionMsg::kSendseatidFieldNumber;
const int expresionMsg::kMoneyFieldNumber;
const int expresionMsg::kTasteMoneyFieldNumber;
const int expresionMsg::kReciveseatidFieldNumber;
const int expresionMsg::kExpressionidFieldNumber;
const int expresionMsg::kTarLovelinessFieldNumber;
#endif  // !_MSC_VER

expresionMsg::expresionMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.expresionMsg)
}

void expresionMsg::InitAsDefaultInstance() {
}

expresionMsg::expresionMsg(const expresionMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.expresionMsg)
}

void expresionMsg::SharedCtor() {
  _cached_size_ = 0;
  sendseatid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  taste_money_ = 0;
  reciveseatid_ = 0;
  expressionid_ = 0;
  tar_loveliness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

expresionMsg::~expresionMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.expresionMsg)
  SharedDtor();
}

void expresionMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void expresionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* expresionMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return expresionMsg_descriptor_;
}

const expresionMsg& expresionMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

expresionMsg* expresionMsg::default_instance_ = NULL;

expresionMsg* expresionMsg::New() const {
  return new expresionMsg;
}

void expresionMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<expresionMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(money_, tar_loveliness_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool expresionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.expresionMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sendseatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendseatid_)));
          set_has_sendseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required int64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taste_money;
        break;
      }

      // required int32 taste_money = 3;
      case 3: {
        if (tag == 24) {
         parse_taste_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taste_money_)));
          set_has_taste_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reciveseatid;
        break;
      }

      // required int32 reciveseatid = 4;
      case 4: {
        if (tag == 32) {
         parse_reciveseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reciveseatid_)));
          set_has_reciveseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expressionid;
        break;
      }

      // required int32 expressionid = 5;
      case 5: {
        if (tag == 40) {
         parse_expressionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expressionid_)));
          set_has_expressionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tar_loveliness;
        break;
      }

      // required int32 tar_loveliness = 6;
      case 6: {
        if (tag == 48) {
         parse_tar_loveliness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tar_loveliness_)));
          set_has_tar_loveliness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.expresionMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.expresionMsg)
  return false;
#undef DO_
}

void expresionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.expresionMsg)
  // required int32 sendseatid = 1;
  if (has_sendseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sendseatid(), output);
  }

  // required int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // required int32 taste_money = 3;
  if (has_taste_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taste_money(), output);
  }

  // required int32 reciveseatid = 4;
  if (has_reciveseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reciveseatid(), output);
  }

  // required int32 expressionid = 5;
  if (has_expressionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expressionid(), output);
  }

  // required int32 tar_loveliness = 6;
  if (has_tar_loveliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tar_loveliness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.expresionMsg)
}

::google::protobuf::uint8* expresionMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.expresionMsg)
  // required int32 sendseatid = 1;
  if (has_sendseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sendseatid(), target);
  }

  // required int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // required int32 taste_money = 3;
  if (has_taste_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->taste_money(), target);
  }

  // required int32 reciveseatid = 4;
  if (has_reciveseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reciveseatid(), target);
  }

  // required int32 expressionid = 5;
  if (has_expressionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expressionid(), target);
  }

  // required int32 tar_loveliness = 6;
  if (has_tar_loveliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tar_loveliness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.expresionMsg)
  return target;
}

int expresionMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sendseatid = 1;
    if (has_sendseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendseatid());
    }

    // required int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int32 taste_money = 3;
    if (has_taste_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taste_money());
    }

    // required int32 reciveseatid = 4;
    if (has_reciveseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reciveseatid());
    }

    // required int32 expressionid = 5;
    if (has_expressionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expressionid());
    }

    // required int32 tar_loveliness = 6;
    if (has_tar_loveliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tar_loveliness());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void expresionMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const expresionMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const expresionMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void expresionMsg::MergeFrom(const expresionMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendseatid()) {
      set_sendseatid(from.sendseatid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_taste_money()) {
      set_taste_money(from.taste_money());
    }
    if (from.has_reciveseatid()) {
      set_reciveseatid(from.reciveseatid());
    }
    if (from.has_expressionid()) {
      set_expressionid(from.expressionid());
    }
    if (from.has_tar_loveliness()) {
      set_tar_loveliness(from.tar_loveliness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void expresionMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void expresionMsg::CopyFrom(const expresionMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool expresionMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void expresionMsg::Swap(expresionMsg* other) {
  if (other != this) {
    std::swap(sendseatid_, other->sendseatid_);
    std::swap(money_, other->money_);
    std::swap(taste_money_, other->taste_money_);
    std::swap(reciveseatid_, other->reciveseatid_);
    std::swap(expressionid_, other->expressionid_);
    std::swap(tar_loveliness_, other->tar_loveliness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata expresionMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = expresionMsg_descriptor_;
  metadata.reflection = expresionMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tableinfoMsg_TblPlayInfo_EatCard::kCardsFieldNumber;
#endif  // !_MSC_VER

tableinfoMsg_TblPlayInfo_EatCard::tableinfoMsg_TblPlayInfo_EatCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
}

void tableinfoMsg_TblPlayInfo_EatCard::InitAsDefaultInstance() {
}

tableinfoMsg_TblPlayInfo_EatCard::tableinfoMsg_TblPlayInfo_EatCard(const tableinfoMsg_TblPlayInfo_EatCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
}

void tableinfoMsg_TblPlayInfo_EatCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tableinfoMsg_TblPlayInfo_EatCard::~tableinfoMsg_TblPlayInfo_EatCard() {
  // @@protoc_insertion_point(destructor:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  SharedDtor();
}

void tableinfoMsg_TblPlayInfo_EatCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tableinfoMsg_TblPlayInfo_EatCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tableinfoMsg_TblPlayInfo_EatCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tableinfoMsg_TblPlayInfo_EatCard_descriptor_;
}

const tableinfoMsg_TblPlayInfo_EatCard& tableinfoMsg_TblPlayInfo_EatCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

tableinfoMsg_TblPlayInfo_EatCard* tableinfoMsg_TblPlayInfo_EatCard::default_instance_ = NULL;

tableinfoMsg_TblPlayInfo_EatCard* tableinfoMsg_TblPlayInfo_EatCard::New() const {
  return new tableinfoMsg_TblPlayInfo_EatCard;
}

void tableinfoMsg_TblPlayInfo_EatCard::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tableinfoMsg_TblPlayInfo_EatCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  return false;
#undef DO_
}

void tableinfoMsg_TblPlayInfo_EatCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
}

::google::protobuf::uint8* tableinfoMsg_TblPlayInfo_EatCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard)
  return target;
}

int tableinfoMsg_TblPlayInfo_EatCard::ByteSize() const {
  int total_size = 0;

  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tableinfoMsg_TblPlayInfo_EatCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tableinfoMsg_TblPlayInfo_EatCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tableinfoMsg_TblPlayInfo_EatCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tableinfoMsg_TblPlayInfo_EatCard::MergeFrom(const tableinfoMsg_TblPlayInfo_EatCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tableinfoMsg_TblPlayInfo_EatCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tableinfoMsg_TblPlayInfo_EatCard::CopyFrom(const tableinfoMsg_TblPlayInfo_EatCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tableinfoMsg_TblPlayInfo_EatCard::IsInitialized() const {

  return true;
}

void tableinfoMsg_TblPlayInfo_EatCard::Swap(tableinfoMsg_TblPlayInfo_EatCard* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tableinfoMsg_TblPlayInfo_EatCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tableinfoMsg_TblPlayInfo_EatCard_descriptor_;
  metadata.reflection = tableinfoMsg_TblPlayInfo_EatCard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int tableinfoMsg_TblPlayInfo_GangCard::kCardsFieldNumber;
const int tableinfoMsg_TblPlayInfo_GangCard::kTypeFieldNumber;
#endif  // !_MSC_VER

tableinfoMsg_TblPlayInfo_GangCard::tableinfoMsg_TblPlayInfo_GangCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
}

void tableinfoMsg_TblPlayInfo_GangCard::InitAsDefaultInstance() {
}

tableinfoMsg_TblPlayInfo_GangCard::tableinfoMsg_TblPlayInfo_GangCard(const tableinfoMsg_TblPlayInfo_GangCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
}

void tableinfoMsg_TblPlayInfo_GangCard::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tableinfoMsg_TblPlayInfo_GangCard::~tableinfoMsg_TblPlayInfo_GangCard() {
  // @@protoc_insertion_point(destructor:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  SharedDtor();
}

void tableinfoMsg_TblPlayInfo_GangCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tableinfoMsg_TblPlayInfo_GangCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tableinfoMsg_TblPlayInfo_GangCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tableinfoMsg_TblPlayInfo_GangCard_descriptor_;
}

const tableinfoMsg_TblPlayInfo_GangCard& tableinfoMsg_TblPlayInfo_GangCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

tableinfoMsg_TblPlayInfo_GangCard* tableinfoMsg_TblPlayInfo_GangCard::default_instance_ = NULL;

tableinfoMsg_TblPlayInfo_GangCard* tableinfoMsg_TblPlayInfo_GangCard::New() const {
  return new tableinfoMsg_TblPlayInfo_GangCard;
}

void tableinfoMsg_TblPlayInfo_GangCard::Clear() {
  type_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tableinfoMsg_TblPlayInfo_GangCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (tag == 8) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  return false;
#undef DO_
}

void tableinfoMsg_TblPlayInfo_GangCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
}

::google::protobuf::uint8* tableinfoMsg_TblPlayInfo_GangCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard)
  return target;
}

int tableinfoMsg_TblPlayInfo_GangCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tableinfoMsg_TblPlayInfo_GangCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tableinfoMsg_TblPlayInfo_GangCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tableinfoMsg_TblPlayInfo_GangCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tableinfoMsg_TblPlayInfo_GangCard::MergeFrom(const tableinfoMsg_TblPlayInfo_GangCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tableinfoMsg_TblPlayInfo_GangCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tableinfoMsg_TblPlayInfo_GangCard::CopyFrom(const tableinfoMsg_TblPlayInfo_GangCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tableinfoMsg_TblPlayInfo_GangCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void tableinfoMsg_TblPlayInfo_GangCard::Swap(tableinfoMsg_TblPlayInfo_GangCard* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tableinfoMsg_TblPlayInfo_GangCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tableinfoMsg_TblPlayInfo_GangCard_descriptor_;
  metadata.reflection = tableinfoMsg_TblPlayInfo_GangCard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int tableinfoMsg_TblPlayInfo::kUidFieldNumber;
const int tableinfoMsg_TblPlayInfo::kSeatidFieldNumber;
const int tableinfoMsg_TblPlayInfo::kZhunbeiFieldNumber;
const int tableinfoMsg_TblPlayInfo::kBettingFieldNumber;
const int tableinfoMsg_TblPlayInfo::kNameFieldNumber;
const int tableinfoMsg_TblPlayInfo::kSexFieldNumber;
const int tableinfoMsg_TblPlayInfo::kAvatarFieldNumber;
const int tableinfoMsg_TblPlayInfo::kAvatar1FieldNumber;
const int tableinfoMsg_TblPlayInfo::kMaxFanFieldNumber;
const int tableinfoMsg_TblPlayInfo::kLovelinessAmtFieldNumber;
const int tableinfoMsg_TblPlayInfo::kTotalWinMoneyFieldNumber;
const int tableinfoMsg_TblPlayInfo::kMoneyFieldNumber;
const int tableinfoMsg_TblPlayInfo::kTotalBoardFieldNumber;
const int tableinfoMsg_TblPlayInfo::kTotalWinFieldNumber;
const int tableinfoMsg_TblPlayInfo::kVlevelFieldNumber;
const int tableinfoMsg_TblPlayInfo::kTrainMoneyFieldNumber;
const int tableinfoMsg_TblPlayInfo::kPsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kHpstateFieldNumber;
const int tableinfoMsg_TblPlayInfo::kQuetypeFieldNumber;
const int tableinfoMsg_TblPlayInfo::kZmcountFieldNumber;
const int tableinfoMsg_TblPlayInfo::kHpcountFieldNumber;
const int tableinfoMsg_TblPlayInfo::kIsBaotingFieldNumber;
const int tableinfoMsg_TblPlayInfo::kPassHuCountFieldNumber;
const int tableinfoMsg_TblPlayInfo::kIsGiveUpFieldNumber;
const int tableinfoMsg_TblPlayInfo::kIsQuitFieldNumber;
const int tableinfoMsg_TblPlayInfo::kHandlenumFieldNumber;
const int tableinfoMsg_TblPlayInfo::kLastGetCardFieldNumber;
const int tableinfoMsg_TblPlayInfo::kHandcardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kOutcardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kPengcardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kFlowercardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kEatcardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kHucardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kGangcardsFieldNumber;
const int tableinfoMsg_TblPlayInfo::kHpinfosFieldNumber;
#endif  // !_MSC_VER

tableinfoMsg_TblPlayInfo::tableinfoMsg_TblPlayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.tableinfoMsg.TblPlayInfo)
}

void tableinfoMsg_TblPlayInfo::InitAsDefaultInstance() {
}

tableinfoMsg_TblPlayInfo::tableinfoMsg_TblPlayInfo(const tableinfoMsg_TblPlayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.tableinfoMsg.TblPlayInfo)
}

void tableinfoMsg_TblPlayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  seatid_ = 0;
  zhunbei_ = 0;
  betting_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_fan_ = 0;
  loveliness_amt_ = 0;
  total_win_money_ = GOOGLE_LONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  total_board_ = 0;
  total_win_ = 0;
  vlevel_ = 0;
  train_money_ = 0;
  ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hpstate_ = 0;
  quetype_ = 0;
  zmcount_ = 0;
  hpcount_ = 0;
  is_baoting_ = 0;
  pass_hu_count_ = 0;
  is_give_up_ = 0;
  is_quit_ = 0;
  handlenum_ = 0;
  last_get_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tableinfoMsg_TblPlayInfo::~tableinfoMsg_TblPlayInfo() {
  // @@protoc_insertion_point(destructor:mahjong_msg.tableinfoMsg.TblPlayInfo)
  SharedDtor();
}

void tableinfoMsg_TblPlayInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_1_;
  }
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ps_;
  }
  if (this != default_instance_) {
  }
}

void tableinfoMsg_TblPlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tableinfoMsg_TblPlayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tableinfoMsg_TblPlayInfo_descriptor_;
}

const tableinfoMsg_TblPlayInfo& tableinfoMsg_TblPlayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

tableinfoMsg_TblPlayInfo* tableinfoMsg_TblPlayInfo::default_instance_ = NULL;

tableinfoMsg_TblPlayInfo* tableinfoMsg_TblPlayInfo::New() const {
  return new tableinfoMsg_TblPlayInfo;
}

void tableinfoMsg_TblPlayInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tableinfoMsg_TblPlayInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, betting_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_avatar_1()) {
      if (avatar_1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(total_win_money_, vlevel_);
    max_fan_ = 0;
    train_money_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(hpstate_, is_give_up_);
    if (has_ps()) {
      if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ps_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 117440512) {
    ZR_(is_quit_, handlenum_);
    last_get_card_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  handcards_.Clear();
  outcards_.Clear();
  pengcards_.Clear();
  flowercards_.Clear();
  eatcards_.Clear();
  hucards_.Clear();
  gangcards_.Clear();
  hpinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tableinfoMsg_TblPlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.tableinfoMsg.TblPlayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zhunbei;
        break;
      }

      // required int32 zhunbei = 3;
      case 3: {
        if (tag == 24) {
         parse_zhunbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhunbei_)));
          set_has_zhunbei();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_betting;
        break;
      }

      // required int32 betting = 4;
      case 4: {
        if (tag == 32) {
         parse_betting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betting_)));
          set_has_betting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // required int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // required string avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar_1;
        break;
      }

      // required string avatar_1 = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_1().data(), this->avatar_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar_1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_fan;
        break;
      }

      // required int32 max_fan = 9;
      case 9: {
        if (tag == 72) {
         parse_max_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_fan_)));
          set_has_max_fan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_loveliness_amt;
        break;
      }

      // required int32 loveliness_amt = 10;
      case 10: {
        if (tag == 80) {
         parse_loveliness_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loveliness_amt_)));
          set_has_loveliness_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_win_money;
        break;
      }

      // required int64 total_win_money = 11;
      case 11: {
        if (tag == 88) {
         parse_total_win_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_win_money_)));
          set_has_total_win_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_money;
        break;
      }

      // required int64 money = 12;
      case 12: {
        if (tag == 96) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_total_board;
        break;
      }

      // required int32 total_board = 13;
      case 13: {
        if (tag == 104) {
         parse_total_board:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_board_)));
          set_has_total_board();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_total_win;
        break;
      }

      // required int32 total_win = 14;
      case 14: {
        if (tag == 112) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_vlevel;
        break;
      }

      // required int32 vlevel = 15;
      case 15: {
        if (tag == 120) {
         parse_vlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vlevel_)));
          set_has_vlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_train_money;
        break;
      }

      // optional int32 train_money = 16;
      case 16: {
        if (tag == 128) {
         parse_train_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_money_)));
          set_has_train_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_ps;
        break;
      }

      // required string ps = 25;
      case 25: {
        if (tag == 202) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ps().data(), this->ps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_hpstate;
        break;
      }

      // required int32 hpstate = 26;
      case 26: {
        if (tag == 208) {
         parse_hpstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpstate_)));
          set_has_hpstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_quetype;
        break;
      }

      // required int32 quetype = 27;
      case 27: {
        if (tag == 216) {
         parse_quetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quetype_)));
          set_has_quetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_zmcount;
        break;
      }

      // required int32 zmcount = 28;
      case 28: {
        if (tag == 224) {
         parse_zmcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zmcount_)));
          set_has_zmcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_hpcount;
        break;
      }

      // required int32 hpcount = 29;
      case 29: {
        if (tag == 232) {
         parse_hpcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpcount_)));
          set_has_hpcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_is_baoting;
        break;
      }

      // required int32 is_baoting = 30;
      case 30: {
        if (tag == 240) {
         parse_is_baoting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_baoting_)));
          set_has_is_baoting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_pass_hu_count;
        break;
      }

      // required int32 pass_hu_count = 31;
      case 31: {
        if (tag == 248) {
         parse_pass_hu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_hu_count_)));
          set_has_pass_hu_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_is_give_up;
        break;
      }

      // required int32 is_give_up = 32;
      case 32: {
        if (tag == 256) {
         parse_is_give_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_give_up_)));
          set_has_is_give_up();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_is_quit;
        break;
      }

      // required int32 is_quit = 33;
      case 33: {
        if (tag == 264) {
         parse_is_quit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_quit_)));
          set_has_is_quit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_handlenum;
        break;
      }

      // required int32 handlenum = 34;
      case 34: {
        if (tag == 272) {
         parse_handlenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handlenum_)));
          set_has_handlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_last_get_card;
        break;
      }

      // optional int32 last_get_card = 35;
      case 35: {
        if (tag == 280) {
         parse_last_get_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_get_card_)));
          set_has_last_get_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_handcards;
        break;
      }

      // repeated int32 handcards = 40;
      case 40: {
        if (tag == 320) {
         parse_handcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 320, input, this->mutable_handcards())));
        } else if (tag == 322) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_handcards;
        if (input->ExpectTag(328)) goto parse_outcards;
        break;
      }

      // repeated int32 outcards = 41;
      case 41: {
        if (tag == 328) {
         parse_outcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 328, input, this->mutable_outcards())));
        } else if (tag == 330) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_outcards;
        if (input->ExpectTag(336)) goto parse_pengcards;
        break;
      }

      // repeated int32 pengcards = 42;
      case 42: {
        if (tag == 336) {
         parse_pengcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 336, input, this->mutable_pengcards())));
        } else if (tag == 338) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pengcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_pengcards;
        if (input->ExpectTag(344)) goto parse_flowercards;
        break;
      }

      // repeated int32 flowercards = 43;
      case 43: {
        if (tag == 344) {
         parse_flowercards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 344, input, this->mutable_flowercards())));
        } else if (tag == 346) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flowercards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_flowercards;
        if (input->ExpectTag(354)) goto parse_eatcards;
        break;
      }

      // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard eatcards = 44;
      case 44: {
        if (tag == 354) {
         parse_eatcards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eatcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_eatcards;
        if (input->ExpectTag(360)) goto parse_hucards;
        break;
      }

      // repeated int32 hucards = 45;
      case 45: {
        if (tag == 360) {
         parse_hucards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 360, input, this->mutable_hucards())));
        } else if (tag == 362) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hucards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_hucards;
        if (input->ExpectTag(370)) goto parse_gangcards;
        break;
      }

      // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard gangcards = 46;
      case 46: {
        if (tag == 370) {
         parse_gangcards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_gangcards;
        if (input->ExpectTag(376)) goto parse_hpinfos;
        break;
      }

      // repeated int32 hpinfos = 47;
      case 47: {
        if (tag == 376) {
         parse_hpinfos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 376, input, this->mutable_hpinfos())));
        } else if (tag == 378) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hpinfos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_hpinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.tableinfoMsg.TblPlayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.tableinfoMsg.TblPlayInfo)
  return false;
#undef DO_
}

void tableinfoMsg_TblPlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.tableinfoMsg.TblPlayInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // required int32 zhunbei = 3;
  if (has_zhunbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zhunbei(), output);
  }

  // required int32 betting = 4;
  if (has_betting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betting(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // required string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar(), output);
  }

  // required string avatar_1 = 8;
  if (has_avatar_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_1().data(), this->avatar_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->avatar_1(), output);
  }

  // required int32 max_fan = 9;
  if (has_max_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_fan(), output);
  }

  // required int32 loveliness_amt = 10;
  if (has_loveliness_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->loveliness_amt(), output);
  }

  // required int64 total_win_money = 11;
  if (has_total_win_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->total_win_money(), output);
  }

  // required int64 money = 12;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->money(), output);
  }

  // required int32 total_board = 13;
  if (has_total_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->total_board(), output);
  }

  // required int32 total_win = 14;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->total_win(), output);
  }

  // required int32 vlevel = 15;
  if (has_vlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->vlevel(), output);
  }

  // optional int32 train_money = 16;
  if (has_train_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->train_money(), output);
  }

  // required string ps = 25;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->ps(), output);
  }

  // required int32 hpstate = 26;
  if (has_hpstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hpstate(), output);
  }

  // required int32 quetype = 27;
  if (has_quetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->quetype(), output);
  }

  // required int32 zmcount = 28;
  if (has_zmcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->zmcount(), output);
  }

  // required int32 hpcount = 29;
  if (has_hpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->hpcount(), output);
  }

  // required int32 is_baoting = 30;
  if (has_is_baoting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->is_baoting(), output);
  }

  // required int32 pass_hu_count = 31;
  if (has_pass_hu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->pass_hu_count(), output);
  }

  // required int32 is_give_up = 32;
  if (has_is_give_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->is_give_up(), output);
  }

  // required int32 is_quit = 33;
  if (has_is_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->is_quit(), output);
  }

  // required int32 handlenum = 34;
  if (has_handlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->handlenum(), output);
  }

  // optional int32 last_get_card = 35;
  if (has_last_get_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->last_get_card(), output);
  }

  // repeated int32 handcards = 40;
  for (int i = 0; i < this->handcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      40, this->handcards(i), output);
  }

  // repeated int32 outcards = 41;
  for (int i = 0; i < this->outcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      41, this->outcards(i), output);
  }

  // repeated int32 pengcards = 42;
  for (int i = 0; i < this->pengcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      42, this->pengcards(i), output);
  }

  // repeated int32 flowercards = 43;
  for (int i = 0; i < this->flowercards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      43, this->flowercards(i), output);
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard eatcards = 44;
  for (int i = 0; i < this->eatcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->eatcards(i), output);
  }

  // repeated int32 hucards = 45;
  for (int i = 0; i < this->hucards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      45, this->hucards(i), output);
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard gangcards = 46;
  for (int i = 0; i < this->gangcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->gangcards(i), output);
  }

  // repeated int32 hpinfos = 47;
  for (int i = 0; i < this->hpinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      47, this->hpinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.tableinfoMsg.TblPlayInfo)
}

::google::protobuf::uint8* tableinfoMsg_TblPlayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.tableinfoMsg.TblPlayInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // required int32 zhunbei = 3;
  if (has_zhunbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zhunbei(), target);
  }

  // required int32 betting = 4;
  if (has_betting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betting(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // required string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar(), target);
  }

  // required string avatar_1 = 8;
  if (has_avatar_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_1().data(), this->avatar_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->avatar_1(), target);
  }

  // required int32 max_fan = 9;
  if (has_max_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_fan(), target);
  }

  // required int32 loveliness_amt = 10;
  if (has_loveliness_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->loveliness_amt(), target);
  }

  // required int64 total_win_money = 11;
  if (has_total_win_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->total_win_money(), target);
  }

  // required int64 money = 12;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->money(), target);
  }

  // required int32 total_board = 13;
  if (has_total_board()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->total_board(), target);
  }

  // required int32 total_win = 14;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->total_win(), target);
  }

  // required int32 vlevel = 15;
  if (has_vlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->vlevel(), target);
  }

  // optional int32 train_money = 16;
  if (has_train_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->train_money(), target);
  }

  // required string ps = 25;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->ps(), target);
  }

  // required int32 hpstate = 26;
  if (has_hpstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hpstate(), target);
  }

  // required int32 quetype = 27;
  if (has_quetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->quetype(), target);
  }

  // required int32 zmcount = 28;
  if (has_zmcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->zmcount(), target);
  }

  // required int32 hpcount = 29;
  if (has_hpcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->hpcount(), target);
  }

  // required int32 is_baoting = 30;
  if (has_is_baoting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->is_baoting(), target);
  }

  // required int32 pass_hu_count = 31;
  if (has_pass_hu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->pass_hu_count(), target);
  }

  // required int32 is_give_up = 32;
  if (has_is_give_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->is_give_up(), target);
  }

  // required int32 is_quit = 33;
  if (has_is_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->is_quit(), target);
  }

  // required int32 handlenum = 34;
  if (has_handlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->handlenum(), target);
  }

  // optional int32 last_get_card = 35;
  if (has_last_get_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->last_get_card(), target);
  }

  // repeated int32 handcards = 40;
  for (int i = 0; i < this->handcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(40, this->handcards(i), target);
  }

  // repeated int32 outcards = 41;
  for (int i = 0; i < this->outcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(41, this->outcards(i), target);
  }

  // repeated int32 pengcards = 42;
  for (int i = 0; i < this->pengcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(42, this->pengcards(i), target);
  }

  // repeated int32 flowercards = 43;
  for (int i = 0; i < this->flowercards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(43, this->flowercards(i), target);
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard eatcards = 44;
  for (int i = 0; i < this->eatcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->eatcards(i), target);
  }

  // repeated int32 hucards = 45;
  for (int i = 0; i < this->hucards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(45, this->hucards(i), target);
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard gangcards = 46;
  for (int i = 0; i < this->gangcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->gangcards(i), target);
  }

  // repeated int32 hpinfos = 47;
  for (int i = 0; i < this->hpinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(47, this->hpinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.tableinfoMsg.TblPlayInfo)
  return target;
}

int tableinfoMsg_TblPlayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 zhunbei = 3;
    if (has_zhunbei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhunbei());
    }

    // required int32 betting = 4;
    if (has_betting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betting());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required string avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // required string avatar_1 = 8;
    if (has_avatar_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 max_fan = 9;
    if (has_max_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_fan());
    }

    // required int32 loveliness_amt = 10;
    if (has_loveliness_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loveliness_amt());
    }

    // required int64 total_win_money = 11;
    if (has_total_win_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_win_money());
    }

    // required int64 money = 12;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int32 total_board = 13;
    if (has_total_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_board());
    }

    // required int32 total_win = 14;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_win());
    }

    // required int32 vlevel = 15;
    if (has_vlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vlevel());
    }

    // optional int32 train_money = 16;
    if (has_train_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_money());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string ps = 25;
    if (has_ps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ps());
    }

    // required int32 hpstate = 26;
    if (has_hpstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpstate());
    }

    // required int32 quetype = 27;
    if (has_quetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quetype());
    }

    // required int32 zmcount = 28;
    if (has_zmcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zmcount());
    }

    // required int32 hpcount = 29;
    if (has_hpcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpcount());
    }

    // required int32 is_baoting = 30;
    if (has_is_baoting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_baoting());
    }

    // required int32 pass_hu_count = 31;
    if (has_pass_hu_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_hu_count());
    }

    // required int32 is_give_up = 32;
    if (has_is_give_up()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_give_up());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 is_quit = 33;
    if (has_is_quit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_quit());
    }

    // required int32 handlenum = 34;
    if (has_handlenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handlenum());
    }

    // optional int32 last_get_card = 35;
    if (has_last_get_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_get_card());
    }

  }
  // repeated int32 handcards = 40;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcards(i));
    }
    total_size += 2 * this->handcards_size() + data_size;
  }

  // repeated int32 outcards = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcards(i));
    }
    total_size += 2 * this->outcards_size() + data_size;
  }

  // repeated int32 pengcards = 42;
  {
    int data_size = 0;
    for (int i = 0; i < this->pengcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pengcards(i));
    }
    total_size += 2 * this->pengcards_size() + data_size;
  }

  // repeated int32 flowercards = 43;
  {
    int data_size = 0;
    for (int i = 0; i < this->flowercards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->flowercards(i));
    }
    total_size += 2 * this->flowercards_size() + data_size;
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.EatCard eatcards = 44;
  total_size += 2 * this->eatcards_size();
  for (int i = 0; i < this->eatcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eatcards(i));
  }

  // repeated int32 hucards = 45;
  {
    int data_size = 0;
    for (int i = 0; i < this->hucards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hucards(i));
    }
    total_size += 2 * this->hucards_size() + data_size;
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo.GangCard gangcards = 46;
  total_size += 2 * this->gangcards_size();
  for (int i = 0; i < this->gangcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangcards(i));
  }

  // repeated int32 hpinfos = 47;
  {
    int data_size = 0;
    for (int i = 0; i < this->hpinfos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hpinfos(i));
    }
    total_size += 2 * this->hpinfos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tableinfoMsg_TblPlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tableinfoMsg_TblPlayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tableinfoMsg_TblPlayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tableinfoMsg_TblPlayInfo::MergeFrom(const tableinfoMsg_TblPlayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcards_.MergeFrom(from.handcards_);
  outcards_.MergeFrom(from.outcards_);
  pengcards_.MergeFrom(from.pengcards_);
  flowercards_.MergeFrom(from.flowercards_);
  eatcards_.MergeFrom(from.eatcards_);
  hucards_.MergeFrom(from.hucards_);
  gangcards_.MergeFrom(from.gangcards_);
  hpinfos_.MergeFrom(from.hpinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_zhunbei()) {
      set_zhunbei(from.zhunbei());
    }
    if (from.has_betting()) {
      set_betting(from.betting());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_avatar_1()) {
      set_avatar_1(from.avatar_1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_fan()) {
      set_max_fan(from.max_fan());
    }
    if (from.has_loveliness_amt()) {
      set_loveliness_amt(from.loveliness_amt());
    }
    if (from.has_total_win_money()) {
      set_total_win_money(from.total_win_money());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_total_board()) {
      set_total_board(from.total_board());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_vlevel()) {
      set_vlevel(from.vlevel());
    }
    if (from.has_train_money()) {
      set_train_money(from.train_money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ps()) {
      set_ps(from.ps());
    }
    if (from.has_hpstate()) {
      set_hpstate(from.hpstate());
    }
    if (from.has_quetype()) {
      set_quetype(from.quetype());
    }
    if (from.has_zmcount()) {
      set_zmcount(from.zmcount());
    }
    if (from.has_hpcount()) {
      set_hpcount(from.hpcount());
    }
    if (from.has_is_baoting()) {
      set_is_baoting(from.is_baoting());
    }
    if (from.has_pass_hu_count()) {
      set_pass_hu_count(from.pass_hu_count());
    }
    if (from.has_is_give_up()) {
      set_is_give_up(from.is_give_up());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_is_quit()) {
      set_is_quit(from.is_quit());
    }
    if (from.has_handlenum()) {
      set_handlenum(from.handlenum());
    }
    if (from.has_last_get_card()) {
      set_last_get_card(from.last_get_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tableinfoMsg_TblPlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tableinfoMsg_TblPlayInfo::CopyFrom(const tableinfoMsg_TblPlayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tableinfoMsg_TblPlayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x03ff7fff) != 0x03ff7fff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gangcards())) return false;
  return true;
}

void tableinfoMsg_TblPlayInfo::Swap(tableinfoMsg_TblPlayInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(zhunbei_, other->zhunbei_);
    std::swap(betting_, other->betting_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(avatar_1_, other->avatar_1_);
    std::swap(max_fan_, other->max_fan_);
    std::swap(loveliness_amt_, other->loveliness_amt_);
    std::swap(total_win_money_, other->total_win_money_);
    std::swap(money_, other->money_);
    std::swap(total_board_, other->total_board_);
    std::swap(total_win_, other->total_win_);
    std::swap(vlevel_, other->vlevel_);
    std::swap(train_money_, other->train_money_);
    std::swap(ps_, other->ps_);
    std::swap(hpstate_, other->hpstate_);
    std::swap(quetype_, other->quetype_);
    std::swap(zmcount_, other->zmcount_);
    std::swap(hpcount_, other->hpcount_);
    std::swap(is_baoting_, other->is_baoting_);
    std::swap(pass_hu_count_, other->pass_hu_count_);
    std::swap(is_give_up_, other->is_give_up_);
    std::swap(is_quit_, other->is_quit_);
    std::swap(handlenum_, other->handlenum_);
    std::swap(last_get_card_, other->last_get_card_);
    handcards_.Swap(&other->handcards_);
    outcards_.Swap(&other->outcards_);
    pengcards_.Swap(&other->pengcards_);
    flowercards_.Swap(&other->flowercards_);
    eatcards_.Swap(&other->eatcards_);
    hucards_.Swap(&other->hucards_);
    gangcards_.Swap(&other->gangcards_);
    hpinfos_.Swap(&other->hpinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tableinfoMsg_TblPlayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tableinfoMsg_TblPlayInfo_descriptor_;
  metadata.reflection = tableinfoMsg_TblPlayInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int tableinfoMsg::kStateFieldNumber;
const int tableinfoMsg::kCdFieldNumber;
const int tableinfoMsg::kBaseMoneyFieldNumber;
const int tableinfoMsg::kMinMoneyFieldNumber;
const int tableinfoMsg::kCardnumsFieldNumber;
const int tableinfoMsg::kRobotFieldNumber;
const int tableinfoMsg::kMagicexpressioncostFieldNumber;
const int tableinfoMsg::kDealseatidFieldNumber;
const int tableinfoMsg::kRoomfeeFieldNumber;
const int tableinfoMsg::kAutoGiveupFieldNumber;
const int tableinfoMsg::kRoundFlagFieldNumber;
const int tableinfoMsg::kLimitMaxWinFieldNumber;
const int tableinfoMsg::kCliHbIntervalFieldNumber;
const int tableinfoMsg::kPassHuTwiceFieldNumber;
const int tableinfoMsg::kMaxPassHuFieldNumber;
const int tableinfoMsg::kRoomIdFieldNumber;
const int tableinfoMsg::kPlayersFieldNumber;
#endif  // !_MSC_VER

tableinfoMsg::tableinfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mahjong_msg.tableinfoMsg)
}

void tableinfoMsg::InitAsDefaultInstance() {
}

tableinfoMsg::tableinfoMsg(const tableinfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mahjong_msg.tableinfoMsg)
}

void tableinfoMsg::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  cd_ = 0;
  base_money_ = 0;
  min_money_ = 0;
  cardnums_ = 0;
  robot_ = 0;
  magicexpressioncost_ = 0;
  dealseatid_ = 0;
  roomfee_ = 0;
  auto_giveup_ = 0;
  round_flag_ = 0;
  limit_max_win_ = 0;
  cli_hb_interval_ = 0;
  pass_hu_twice_ = 0;
  max_pass_hu_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tableinfoMsg::~tableinfoMsg() {
  // @@protoc_insertion_point(destructor:mahjong_msg.tableinfoMsg)
  SharedDtor();
}

void tableinfoMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tableinfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tableinfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tableinfoMsg_descriptor_;
}

const tableinfoMsg& tableinfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_5fmsg_2eproto();
  return *default_instance_;
}

tableinfoMsg* tableinfoMsg::default_instance_ = NULL;

tableinfoMsg* tableinfoMsg::New() const {
  return new tableinfoMsg;
}

void tableinfoMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tableinfoMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(state_, dealseatid_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(roomfee_, room_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tableinfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mahjong_msg.tableinfoMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required int32 cd = 2;
      case 2: {
        if (tag == 16) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_base_money;
        break;
      }

      // required int32 base_money = 3;
      case 3: {
        if (tag == 24) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_money;
        break;
      }

      // required int32 min_money = 4;
      case 4: {
        if (tag == 32) {
         parse_min_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_money_)));
          set_has_min_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cardnums;
        break;
      }

      // required int32 cardnums = 5;
      case 5: {
        if (tag == 40) {
         parse_cardnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnums_)));
          set_has_cardnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_robot;
        break;
      }

      // required int32 robot = 6;
      case 6: {
        if (tag == 48) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_magicexpressioncost;
        break;
      }

      // required int32 magicexpressioncost = 7;
      case 7: {
        if (tag == 56) {
         parse_magicexpressioncost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicexpressioncost_)));
          set_has_magicexpressioncost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dealseatid;
        break;
      }

      // required int32 dealseatid = 8;
      case 8: {
        if (tag == 64) {
         parse_dealseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealseatid_)));
          set_has_dealseatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_roomfee;
        break;
      }

      // required int32 roomfee = 9;
      case 9: {
        if (tag == 72) {
         parse_roomfee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomfee_)));
          set_has_roomfee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_auto_giveup;
        break;
      }

      // required int32 auto_giveup = 10;
      case 10: {
        if (tag == 80) {
         parse_auto_giveup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_giveup_)));
          set_has_auto_giveup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_round_flag;
        break;
      }

      // required int32 round_flag = 11;
      case 11: {
        if (tag == 88) {
         parse_round_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_flag_)));
          set_has_round_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_limit_max_win;
        break;
      }

      // required int32 limit_max_win = 12;
      case 12: {
        if (tag == 96) {
         parse_limit_max_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_max_win_)));
          set_has_limit_max_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cli_hb_interval;
        break;
      }

      // required int32 cli_hb_interval = 13;
      case 13: {
        if (tag == 104) {
         parse_cli_hb_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cli_hb_interval_)));
          set_has_cli_hb_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pass_hu_twice;
        break;
      }

      // required int32 pass_hu_twice = 14;
      case 14: {
        if (tag == 112) {
         parse_pass_hu_twice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_hu_twice_)));
          set_has_pass_hu_twice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_max_pass_hu;
        break;
      }

      // required int32 max_pass_hu = 15;
      case 15: {
        if (tag == 120) {
         parse_max_pass_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pass_hu_)));
          set_has_max_pass_hu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_room_id;
        break;
      }

      // required int32 room_id = 16;
      case 16: {
        if (tag == 128) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_players;
        break;
      }

      // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo players = 17;
      case 17: {
        if (tag == 138) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mahjong_msg.tableinfoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mahjong_msg.tableinfoMsg)
  return false;
#undef DO_
}

void tableinfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mahjong_msg.tableinfoMsg)
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // required int32 base_money = 3;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->base_money(), output);
  }

  // required int32 min_money = 4;
  if (has_min_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_money(), output);
  }

  // required int32 cardnums = 5;
  if (has_cardnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardnums(), output);
  }

  // required int32 robot = 6;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->robot(), output);
  }

  // required int32 magicexpressioncost = 7;
  if (has_magicexpressioncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->magicexpressioncost(), output);
  }

  // required int32 dealseatid = 8;
  if (has_dealseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dealseatid(), output);
  }

  // required int32 roomfee = 9;
  if (has_roomfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roomfee(), output);
  }

  // required int32 auto_giveup = 10;
  if (has_auto_giveup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->auto_giveup(), output);
  }

  // required int32 round_flag = 11;
  if (has_round_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->round_flag(), output);
  }

  // required int32 limit_max_win = 12;
  if (has_limit_max_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->limit_max_win(), output);
  }

  // required int32 cli_hb_interval = 13;
  if (has_cli_hb_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cli_hb_interval(), output);
  }

  // required int32 pass_hu_twice = 14;
  if (has_pass_hu_twice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pass_hu_twice(), output);
  }

  // required int32 max_pass_hu = 15;
  if (has_max_pass_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_pass_hu(), output);
  }

  // required int32 room_id = 16;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->room_id(), output);
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo players = 17;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mahjong_msg.tableinfoMsg)
}

::google::protobuf::uint8* tableinfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mahjong_msg.tableinfoMsg)
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // required int32 base_money = 3;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->base_money(), target);
  }

  // required int32 min_money = 4;
  if (has_min_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_money(), target);
  }

  // required int32 cardnums = 5;
  if (has_cardnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardnums(), target);
  }

  // required int32 robot = 6;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->robot(), target);
  }

  // required int32 magicexpressioncost = 7;
  if (has_magicexpressioncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->magicexpressioncost(), target);
  }

  // required int32 dealseatid = 8;
  if (has_dealseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dealseatid(), target);
  }

  // required int32 roomfee = 9;
  if (has_roomfee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->roomfee(), target);
  }

  // required int32 auto_giveup = 10;
  if (has_auto_giveup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->auto_giveup(), target);
  }

  // required int32 round_flag = 11;
  if (has_round_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->round_flag(), target);
  }

  // required int32 limit_max_win = 12;
  if (has_limit_max_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->limit_max_win(), target);
  }

  // required int32 cli_hb_interval = 13;
  if (has_cli_hb_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cli_hb_interval(), target);
  }

  // required int32 pass_hu_twice = 14;
  if (has_pass_hu_twice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pass_hu_twice(), target);
  }

  // required int32 max_pass_hu = 15;
  if (has_max_pass_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_pass_hu(), target);
  }

  // required int32 room_id = 16;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->room_id(), target);
  }

  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo players = 17;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mahjong_msg.tableinfoMsg)
  return target;
}

int tableinfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 base_money = 3;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // required int32 min_money = 4;
    if (has_min_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_money());
    }

    // required int32 cardnums = 5;
    if (has_cardnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnums());
    }

    // required int32 robot = 6;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot());
    }

    // required int32 magicexpressioncost = 7;
    if (has_magicexpressioncost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicexpressioncost());
    }

    // required int32 dealseatid = 8;
    if (has_dealseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealseatid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 roomfee = 9;
    if (has_roomfee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomfee());
    }

    // required int32 auto_giveup = 10;
    if (has_auto_giveup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_giveup());
    }

    // required int32 round_flag = 11;
    if (has_round_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_flag());
    }

    // required int32 limit_max_win = 12;
    if (has_limit_max_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_max_win());
    }

    // required int32 cli_hb_interval = 13;
    if (has_cli_hb_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cli_hb_interval());
    }

    // required int32 pass_hu_twice = 14;
    if (has_pass_hu_twice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_hu_twice());
    }

    // required int32 max_pass_hu = 15;
    if (has_max_pass_hu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pass_hu());
    }

    // required int32 room_id = 16;
    if (has_room_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  // repeated .mahjong_msg.tableinfoMsg.TblPlayInfo players = 17;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tableinfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tableinfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tableinfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tableinfoMsg::MergeFrom(const tableinfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_min_money()) {
      set_min_money(from.min_money());
    }
    if (from.has_cardnums()) {
      set_cardnums(from.cardnums());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_magicexpressioncost()) {
      set_magicexpressioncost(from.magicexpressioncost());
    }
    if (from.has_dealseatid()) {
      set_dealseatid(from.dealseatid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomfee()) {
      set_roomfee(from.roomfee());
    }
    if (from.has_auto_giveup()) {
      set_auto_giveup(from.auto_giveup());
    }
    if (from.has_round_flag()) {
      set_round_flag(from.round_flag());
    }
    if (from.has_limit_max_win()) {
      set_limit_max_win(from.limit_max_win());
    }
    if (from.has_cli_hb_interval()) {
      set_cli_hb_interval(from.cli_hb_interval());
    }
    if (from.has_pass_hu_twice()) {
      set_pass_hu_twice(from.pass_hu_twice());
    }
    if (from.has_max_pass_hu()) {
      set_max_pass_hu(from.max_pass_hu());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tableinfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tableinfoMsg::CopyFrom(const tableinfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tableinfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void tableinfoMsg::Swap(tableinfoMsg* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(cd_, other->cd_);
    std::swap(base_money_, other->base_money_);
    std::swap(min_money_, other->min_money_);
    std::swap(cardnums_, other->cardnums_);
    std::swap(robot_, other->robot_);
    std::swap(magicexpressioncost_, other->magicexpressioncost_);
    std::swap(dealseatid_, other->dealseatid_);
    std::swap(roomfee_, other->roomfee_);
    std::swap(auto_giveup_, other->auto_giveup_);
    std::swap(round_flag_, other->round_flag_);
    std::swap(limit_max_win_, other->limit_max_win_);
    std::swap(cli_hb_interval_, other->cli_hb_interval_);
    std::swap(pass_hu_twice_, other->pass_hu_twice_);
    std::swap(max_pass_hu_, other->max_pass_hu_);
    std::swap(room_id_, other->room_id_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tableinfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tableinfoMsg_descriptor_;
  metadata.reflection = tableinfoMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mahjong_msg

// @@protoc_insertion_point(global_scope)
